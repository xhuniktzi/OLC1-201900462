package olc1.project1.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1.project1.instructions.Statement;

parser code 
{:
     public LinkedList<Statement> AST;

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  
  
:}

terminal String MAJOR, MINOR, MAJOREQUALS, MINOREQUALS, EQUALS, NOTEQUALS, NOT, OR, AND;
terminal String COMMA, DOTCOMMA, OPENQUESTION, CLOSEQUESTION;
terminal String ADD, SUBSTRACT, MULTIPLY, DIVISION;
terminal String POW, MODULE;
terminal String PARSTART, PAREND;
terminal String START, END;
terminal String ARROW;
terminal String ENTER, AS, WITH_VALUE;
terminal String IF, THEN, ENDIF, ELSE, ELIF;
terminal String SWITCH, DO, ENDSWITCH;
terminal String FOR, TO, ENDFOR, WITHINCREMENTAL;
terminal String WHILE, ENDWHILE;
terminal String REPEAT, ENDREPEAT;
terminal String RETURN, DEFPROCEDURE, ENDPROCEDURE, PARAMS;
terminal String FUNCTION, ENDFUNCTION, EXEC;
terminal String PRINT, PRINTLN;
terminal String NUM, STR, BOOLEAN, CHAR;
terminal String TYPEDEF, ID, FUNCID;

non terminal ini;

non terminal statements;
non terminal statement;
non terminal expr;
non terminal name_list;
non terminal params_list;
non terminal args_list;
non terminal func;
non terminal elifs;

precedence left MAJOR, MINOR, MAJOREQUALS, MINOREQUALS, EQUALS, NOTEQUALS;
precedence left AND, OR; 
precedence left ADD, SUBSTRACT;
precedence left MULTIPLY, DIVISION;
precedence left POW, MODULE;

start with ini;

ini ::= START statements END
| START END;

statements ::= statements statement
| statement;

statement ::= ENTER name_list AS TYPEDEF WITH_VALUE expr DOTCOMMA
| name_list ARROW expr DOTCOMMA
| IF expr THEN statements ENDIF
| IF expr THEN statements ELSE statements ENDIF
| IF expr THEN statements elifs ENDIF
| IF expr THEN statements elifs ELSE statements ENDIF
| FOR ID ARROW expr TO expr DO statements ENDFOR
| FOR ID ARROW expr TO expr WITHINCREMENTAL expr DO statements ENDFOR
| FOR ID ARROW expr TO expr DO ENDFOR
| FOR ID ARROW expr TO expr WITHINCREMENTAL expr DO ENDFOR
| WHILE expr DO statements ENDWHILE
| REPEAT statements ENDREPEAT expr
| WHILE expr DO ENDWHILE
| REPEAT ENDREPEAT expr
| RETURN expr DOTCOMMA
| DEFPROCEDURE FUNCID statements ENDPROCEDURE
| DEFPROCEDURE FUNCID PARAMS PARSTART params_list PAREND statements ENDPROCEDURE
| FUNCTION FUNCID TYPEDEF statements ENDFUNCTION
| FUNCTION FUNCID TYPEDEF PARAMS PARSTART params_list PAREND statements ENDFUNCTION
| EXEC func DOTCOMMA
| PRINT expr DOTCOMMA
| PRINTLN expr DOTCOMMA;

params_list ::= ID TYPEDEF COMMA params_list
| ID TYPEDEF;

args_list ::= expr COMMA args_list
| expr;

name_list ::= ID COMMA name_list
| ID;

func ::= FUNCID PARSTART PAREND
| FUNCID PARSTART args_list PAREND;

elifs ::= elifs ELIF expr THEN statements
| ELIF expr THEN statements;

expr ::= ID
| NUM
| STR
| BOOLEAN
| CHAR
| SUBSTRACT expr
| expr ADD expr
| expr SUBSTRACT expr
| expr MULTIPLY expr
| expr DIVISION expr
| expr POW expr
| expr MODULE expr
| PARSTART expr PAREND
| NOT expr
| expr MAJOR expr
| expr MINOR expr
| expr MAJOREQUALS expr
| expr MINOREQUALS expr
| expr EQUALS expr
| expr NOTEQUALS expr
| expr AND expr
| expr OR expr
| func;