// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexico

package olc1.project1.analizadores;
import java_cup.runtime.Symbol; 


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\4\0\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\12\21\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\4\41\1\0\1\55\2\0\1\56\1\0\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\4\41\1\0\1\57"+
    "\10\0\1\3\71\0\1\60\2\0\1\61\37\0\1\61"+
    "\115\0\2\62\115\0\1\63\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\20\21\4\1\1\22\1\0\1\23"+
    "\2\0\1\24\1\0\1\25\3\0\1\26\1\27\1\30"+
    "\12\21\1\0\6\21\1\0\1\21\1\31\5\21\2\32"+
    "\1\21\1\0\1\33\3\0\1\23\1\24\1\0\2\2"+
    "\1\14\1\34\11\21\1\35\1\21\1\35\2\21\1\0"+
    "\3\21\1\0\2\21\1\36\1\0\2\21\1\0\6\21"+
    "\1\37\5\0\3\21\1\40\1\0\5\21\1\0\2\21"+
    "\1\0\2\21\1\0\3\21\1\0\2\21\1\0\1\21"+
    "\2\41\1\42\5\21\4\0\1\2\3\21\1\0\5\21"+
    "\2\43\4\21\1\0\1\21\4\0\1\44\2\45\1\21"+
    "\1\0\2\21\1\0\2\21\1\0\4\21\1\46\1\21"+
    "\1\0\1\46\1\21\1\47\1\21\1\0\10\21\1\0"+
    "\2\21\2\50\1\0\1\21\4\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\2\51\1\52\1\21\1\0\2\21"+
    "\1\0\3\21\1\0\10\21\1\0\2\21\1\0\2\53"+
    "\3\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\2\54\2\21\1\0\3\21\1\55"+
    "\2\56\3\21\1\0\1\57\1\21\3\0\1\57\1\21"+
    "\1\0\2\60\2\61\2\62\2\63\1\64\1\0\1\21"+
    "\1\65\2\21\1\0\2\21\1\0\2\66\1\0\2\67"+
    "\1\21\2\0\3\21\1\0\1\70\1\21\1\0\1\70"+
    "\1\21\2\0\2\21\2\71\1\21\1\0\2\72\1\0"+
    "\2\21\2\73\1\0\2\21\1\0\2\74\1\21\1\0"+
    "\1\75\2\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\u0104\0\64"+
    "\0\64\0\64\0\64\0\64\0\u0138\0\u016c\0\u01a0\0\64"+
    "\0\u01d4\0\u0208\0\u023c\0\64\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\64\0\320\0\64\0\u0680\0\u06b4\0\64\0\u06e8\0\64"+
    "\0\u071c\0\u0750\0\u0784\0\64\0\64\0\64\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u03a8\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u03a8"+
    "\0\64\0\u0c98\0\u0ccc\0\64\0\u0d00\0\u0d34\0\u0d68\0\320"+
    "\0\u06b4\0\u0d9c\0\64\0\u0dd0\0\u0784\0\u03a8\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u03a8\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\64\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u03a8"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u03a8\0\64\0\u03a8"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0"+
    "\0\u1bd4\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u03a8\0\64\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u03a8"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u03a8\0\u22bc"+
    "\0\u22f0\0\64\0\u2324\0\u03a8\0\u2358\0\u238c\0\u23c0\0\u23f4"+
    "\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594"+
    "\0\u25c8\0\u03a8\0\64\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc"+
    "\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u03a8"+
    "\0\64\0\u03a8\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10"+
    "\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u03a8"+
    "\0\64\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u03a8\0\64"+
    "\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u03a8\0\u03a8"+
    "\0\64\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u03a8\0\u315c\0\u3190"+
    "\0\u31c4\0\u31f8\0\64\0\u322c\0\u3260\0\u3294\0\u32c8\0\u03a8"+
    "\0\64\0\u03a8\0\64\0\u03a8\0\64\0\u03a8\0\u32fc\0\u3330"+
    "\0\u03a8\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u03a8"+
    "\0\64\0\u349c\0\u03a8\0\64\0\u34d0\0\u3504\0\u3538\0\u356c"+
    "\0\u35a0\0\u35d4\0\u3608\0\u03a8\0\u363c\0\u3670\0\64\0\u36a4"+
    "\0\u36d8\0\u370c\0\u3740\0\u3774\0\u03a8\0\64\0\u37a8\0\u37dc"+
    "\0\u03a8\0\64\0\u3810\0\u3844\0\u3878\0\u03a8\0\64\0\u38ac"+
    "\0\u38e0\0\u3914\0\u3948\0\u03a8\0\64\0\u397c\0\u39b0\0\64"+
    "\0\u03a8\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\2\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\3\33"+
    "\1\36\1\37\1\40\1\41\1\33\1\42\1\43\2\33"+
    "\1\44\1\2\1\45\2\2\1\46\1\47\1\50\65\0"+
    "\1\3\2\0\2\3\102\0\1\51\37\0\2\52\1\0"+
    "\4\52\1\53\45\52\1\54\6\52\1\55\2\0\4\55"+
    "\1\0\1\56\44\55\1\57\6\55\25\0\1\60\51\0"+
    "\1\61\4\0\1\62\62\0\1\63\1\0\1\17\66\0"+
    "\1\64\63\0\1\65\63\0\1\66\60\0\1\33\5\0"+
    "\15\33\1\67\10\33\1\0\1\33\26\0\1\33\5\0"+
    "\16\33\1\70\7\33\1\0\1\33\26\0\1\33\5\0"+
    "\1\71\15\33\1\72\7\33\1\0\1\33\26\0\1\33"+
    "\5\0\4\33\1\73\21\33\1\0\1\33\26\0\1\33"+
    "\5\0\11\33\1\74\3\33\1\75\10\33\1\0\1\33"+
    "\26\0\1\33\5\0\1\76\7\33\1\77\13\33\1\100"+
    "\1\33\1\0\1\33\3\0\1\101\22\0\1\33\5\0"+
    "\26\33\1\0\1\33\26\0\1\33\5\0\1\102\25\33"+
    "\1\0\1\33\26\0\1\33\5\0\14\33\1\103\1\104"+
    "\10\33\1\0\1\33\26\0\1\33\5\0\4\33\1\105"+
    "\3\33\1\106\5\33\1\107\7\33\1\0\1\33\3\0"+
    "\1\110\22\0\1\33\5\0\24\33\1\111\1\33\1\0"+
    "\1\33\26\0\1\33\5\0\21\33\1\112\4\33\1\0"+
    "\1\113\26\0\1\33\5\0\1\114\15\33\1\115\7\33"+
    "\1\0\1\33\26\0\1\33\5\0\4\33\1\116\21\33"+
    "\1\0\1\33\26\0\1\33\5\0\4\33\1\117\3\33"+
    "\1\120\15\33\1\0\1\33\3\0\1\121\22\0\1\33"+
    "\5\0\4\33\1\122\21\33\1\0\1\33\26\0\1\123"+
    "\5\0\26\123\67\0\1\124\46\0\1\125\1\126\52\0"+
    "\1\127\3\0\1\121\22\0\1\121\1\0\2\52\1\0"+
    "\4\52\1\130\45\52\1\54\6\52\10\0\1\56\62\0"+
    "\1\55\1\131\33\0\1\55\5\0\1\55\11\0\13\61"+
    "\1\132\50\61\2\62\1\133\1\0\1\134\57\62\5\0"+
    "\1\135\13\0\1\135\35\0\1\135\25\0\1\33\5\0"+
    "\3\33\1\136\22\33\1\0\1\33\26\0\1\33\5\0"+
    "\16\33\1\137\7\33\1\0\1\33\26\0\1\33\5\0"+
    "\3\33\1\140\15\33\1\141\4\33\1\0\1\33\26\0"+
    "\1\33\5\0\14\33\1\142\1\143\10\33\1\0\1\33"+
    "\26\0\1\33\5\0\26\33\1\0\1\144\26\0\1\33"+
    "\5\0\4\33\1\145\21\33\1\0\1\33\26\0\1\33"+
    "\5\0\23\33\1\146\2\33\1\0\1\33\26\0\1\33"+
    "\5\0\13\33\1\147\12\33\1\0\1\33\26\0\1\33"+
    "\5\0\15\33\1\150\10\33\1\0\1\33\26\0\1\33"+
    "\5\0\15\33\1\151\10\33\1\0\1\33\51\0\1\152"+
    "\40\0\1\33\5\0\2\33\1\153\17\33\1\154\3\33"+
    "\1\0\1\33\4\0\1\155\21\0\1\33\5\0\17\33"+
    "\1\156\6\33\1\0\1\33\26\0\1\33\5\0\6\33"+
    "\1\157\1\33\1\160\15\33\1\0\1\33\3\0\1\161"+
    "\22\0\1\33\5\0\23\33\1\162\2\33\1\0\1\33"+
    "\26\0\1\33\5\0\4\33\1\163\21\33\1\0\1\33"+
    "\26\0\1\33\5\0\3\33\1\164\22\33\1\0\1\33"+
    "\40\0\1\165\51\0\1\33\5\0\14\33\1\166\11\33"+
    "\1\0\1\33\26\0\1\33\5\0\22\33\1\167\3\33"+
    "\1\0\1\33\4\0\1\170\21\0\1\33\5\0\21\33"+
    "\1\171\4\33\1\0\1\33\26\0\1\33\5\0\23\33"+
    "\1\172\2\33\1\0\1\33\26\0\1\33\5\0\17\33"+
    "\1\173\3\33\1\174\2\33\1\0\1\33\26\0\1\33"+
    "\5\0\6\33\1\175\17\33\1\0\1\33\26\0\1\33"+
    "\5\0\21\33\1\176\4\33\1\0\1\33\26\0\1\123"+
    "\5\0\26\123\1\0\1\177\53\0\1\200\52\0\1\201"+
    "\1\0\1\161\22\0\1\161\36\0\1\202\26\0\13\203"+
    "\1\204\4\203\1\133\43\203\2\0\1\133\102\0\1\33"+
    "\5\0\13\33\1\205\12\33\1\0\1\33\26\0\1\33"+
    "\5\0\4\33\1\206\21\33\1\0\1\33\26\0\1\33"+
    "\5\0\1\207\25\33\1\0\1\33\26\0\1\33\5\0"+
    "\16\33\1\210\7\33\1\0\1\33\12\0\1\211\13\0"+
    "\1\33\5\0\26\33\1\0\1\212\26\0\1\33\5\0"+
    "\13\33\1\213\12\33\1\0\1\33\26\0\1\33\5\0"+
    "\2\33\1\214\23\33\1\0\1\33\26\0\1\33\5\0"+
    "\16\33\1\215\7\33\1\0\1\33\26\0\1\33\5\0"+
    "\22\33\1\216\3\33\1\0\1\33\4\0\1\217\21\0"+
    "\1\33\5\0\26\33\1\0\1\220\26\0\1\33\5\0"+
    "\2\33\1\221\23\33\1\0\1\33\63\0\1\222\26\0"+
    "\1\33\5\0\4\33\1\223\21\33\1\0\1\33\26\0"+
    "\1\33\5\0\23\33\1\224\2\33\1\0\1\33\57\0"+
    "\1\225\32\0\1\33\5\0\21\33\1\226\4\33\1\0"+
    "\1\33\26\0\1\33\5\0\21\33\1\227\4\33\1\0"+
    "\1\33\26\0\1\33\5\0\2\33\1\230\23\33\1\0"+
    "\1\33\36\0\1\231\53\0\1\33\5\0\16\33\1\232"+
    "\7\33\1\0\1\33\26\0\1\33\5\0\15\33\1\233"+
    "\10\33\1\0\1\33\51\0\1\234\40\0\1\33\5\0"+
    "\4\33\1\235\21\33\1\0\1\33\26\0\1\33\5\0"+
    "\10\33\1\236\15\33\1\0\1\33\3\0\1\237\40\0"+
    "\1\237\22\0\1\237\22\0\1\33\5\0\1\240\25\33"+
    "\1\0\1\33\26\0\1\33\5\0\4\33\1\241\21\33"+
    "\1\0\1\33\26\0\1\33\5\0\4\33\1\242\21\33"+
    "\1\0\1\33\26\0\1\33\5\0\16\33\1\243\7\33"+
    "\1\0\1\33\26\0\1\33\5\0\24\33\1\244\1\33"+
    "\1\0\1\33\26\0\1\33\5\0\3\33\1\245\22\33"+
    "\1\0\1\33\55\0\1\246\63\0\1\247\66\0\1\250"+
    "\10\0\13\61\1\132\4\61\1\251\56\61\1\132\4\61"+
    "\1\252\43\61\21\0\1\33\5\0\4\33\1\253\21\33"+
    "\1\0\1\33\26\0\1\33\5\0\15\33\1\254\10\33"+
    "\1\0\1\33\26\0\1\33\5\0\2\33\1\255\23\33"+
    "\1\0\1\33\44\0\1\256\22\0\1\256\22\0\1\33"+
    "\5\0\17\33\1\257\5\33\1\260\1\0\1\33\26\0"+
    "\1\33\5\0\16\33\1\261\7\33\1\0\1\33\26\0"+
    "\1\33\5\0\24\33\1\262\1\33\1\0\1\33\26\0"+
    "\1\33\5\0\15\33\1\263\10\33\1\0\1\33\26\0"+
    "\1\33\5\0\16\33\1\264\7\33\1\0\1\33\52\0"+
    "\1\265\37\0\1\33\5\0\5\33\1\266\6\33\1\267"+
    "\2\33\1\270\2\33\1\271\3\33\1\0\1\33\4\0"+
    "\1\272\21\0\1\33\5\0\10\33\1\273\15\33\1\0"+
    "\1\33\3\0\1\274\35\0\1\275\6\0\1\276\2\0"+
    "\1\277\2\0\1\272\11\0\1\272\21\0\1\33\5\0"+
    "\21\33\1\300\4\33\1\0\1\33\26\0\1\33\5\0"+
    "\1\301\25\33\1\0\1\33\34\0\1\302\55\0\1\33"+
    "\5\0\10\33\1\303\15\33\1\0\1\33\3\0\1\304"+
    "\22\0\1\33\5\0\4\33\1\305\21\33\1\0\1\33"+
    "\26\0\1\33\5\0\10\33\1\306\15\33\1\0\1\33"+
    "\3\0\1\307\40\0\1\307\22\0\1\307\22\0\1\33"+
    "\5\0\3\33\1\310\22\33\1\0\1\33\26\0\1\33"+
    "\5\0\23\33\1\311\2\33\1\0\1\33\57\0\1\312"+
    "\32\0\1\33\5\0\21\33\1\313\4\33\1\0\1\33"+
    "\26\0\1\33\5\0\15\33\1\314\10\33\1\0\1\33"+
    "\26\0\1\33\5\0\23\33\1\315\2\33\1\0\1\33"+
    "\26\0\1\33\5\0\21\33\1\316\4\33\1\0\1\33"+
    "\26\0\1\33\5\0\15\33\1\317\10\33\1\0\1\33"+
    "\26\0\1\33\5\0\1\320\25\33\1\0\1\33\44\0"+
    "\1\304\22\0\1\304\34\0\1\321\74\0\1\322\37\0"+
    "\1\203\64\0\1\33\5\0\1\323\25\33\1\0\1\33"+
    "\26\0\1\33\5\0\1\324\25\33\1\0\1\33\26\0"+
    "\1\33\5\0\23\33\1\325\2\33\1\0\1\33\51\0"+
    "\1\326\40\0\1\33\5\0\1\327\25\33\1\0\1\33"+
    "\26\0\1\33\5\0\1\330\25\33\1\0\1\33\26\0"+
    "\1\33\5\0\26\33\1\0\1\331\26\0\1\33\5\0"+
    "\23\33\1\332\2\33\1\0\1\33\26\0\1\33\5\0"+
    "\2\33\1\333\23\33\1\0\1\33\26\0\1\33\5\0"+
    "\24\33\1\334\1\33\1\0\1\33\26\0\1\33\5\0"+
    "\4\33\1\335\3\33\1\336\15\33\1\0\1\33\3\0"+
    "\1\337\22\0\1\33\5\0\1\340\25\33\1\0\1\33"+
    "\26\0\1\33\5\0\4\33\1\341\3\33\1\342\15\33"+
    "\1\0\1\33\3\0\1\343\34\0\1\344\3\0\1\343"+
    "\22\0\1\343\22\0\1\33\5\0\16\33\1\345\7\33"+
    "\1\0\1\33\52\0\1\346\71\0\1\347\43\0\1\350"+
    "\3\0\1\337\22\0\1\337\30\0\1\351\55\0\1\33"+
    "\5\0\26\33\1\0\1\352\63\0\1\353\26\0\1\33"+
    "\5\0\14\33\1\354\11\33\1\0\1\33\50\0\1\355"+
    "\41\0\1\33\5\0\22\33\1\356\3\33\1\0\1\33"+
    "\4\0\1\357\21\0\1\33\5\0\16\33\1\360\7\33"+
    "\1\0\1\33\52\0\1\361\37\0\1\33\5\0\16\33"+
    "\1\362\7\33\1\0\1\33\26\0\1\33\5\0\21\33"+
    "\1\363\4\33\1\0\1\33\55\0\1\364\34\0\1\33"+
    "\5\0\16\33\1\324\7\33\1\0\1\33\26\0\1\33"+
    "\5\0\2\33\1\365\23\33\1\0\1\33\26\0\1\33"+
    "\5\0\10\33\1\366\15\33\1\0\1\33\3\0\1\367"+
    "\22\0\1\33\5\0\15\33\1\370\10\33\1\0\1\33"+
    "\26\0\1\33\5\0\3\33\1\371\22\33\1\0\1\33"+
    "\56\0\1\357\11\0\1\357\21\0\1\33\5\0\15\33"+
    "\1\324\10\33\1\0\1\33\26\0\1\33\5\0\4\33"+
    "\1\372\21\33\1\0\1\33\36\0\1\373\53\0\1\33"+
    "\5\0\21\33\1\374\4\33\1\0\1\33\26\0\1\33"+
    "\5\0\13\33\1\375\12\33\1\0\1\33\26\0\1\33"+
    "\5\0\2\33\1\376\23\33\1\0\1\33\26\0\1\33"+
    "\5\0\1\377\25\33\1\0\1\33\26\0\1\33\5\0"+
    "\4\33\1\u0100\21\33\1\0\1\33\26\0\1\33\5\0"+
    "\15\33\1\u0101\10\33\1\0\1\33\26\0\1\33\5\0"+
    "\23\33\1\u0102\2\33\1\0\1\33\26\0\1\33\5\0"+
    "\4\33\1\u0103\21\33\1\0\1\33\40\0\1\u0104\51\0"+
    "\1\33\5\0\21\33\1\u0105\4\33\1\0\1\33\26\0"+
    "\1\33\5\0\6\33\1\u0106\17\33\1\0\1\33\42\0"+
    "\1\u0107\47\0\1\33\5\0\15\33\1\u0108\10\33\1\0"+
    "\1\33\51\0\1\u0109\63\0\1\u010a\71\0\1\u010b\61\0"+
    "\1\u010c\34\0\1\33\5\0\20\33\1\u010d\5\33\1\0"+
    "\1\33\54\0\1\u010e\35\0\1\33\5\0\10\33\1\u010f"+
    "\15\33\1\0\1\33\3\0\1\u0110\40\0\1\u0110\22\0"+
    "\1\u0110\22\0\1\33\5\0\1\u0111\25\33\1\0\1\33"+
    "\34\0\1\u0112\55\0\1\33\5\0\1\u0113\25\33\1\0"+
    "\1\33\34\0\1\u0114\55\0\1\33\5\0\10\33\1\u0115"+
    "\15\33\1\0\1\33\3\0\1\u0116\22\0\1\33\5\0"+
    "\21\33\1\u0117\4\33\1\0\1\33\55\0\1\u0118\34\0"+
    "\1\33\5\0\1\u0119\25\33\1\0\1\33\26\0\1\33"+
    "\5\0\4\33\1\u011a\21\33\1\0\1\33\26\0\1\33"+
    "\5\0\21\33\1\324\4\33\1\0\1\33\55\0\1\u011b"+
    "\34\0\1\33\5\0\1\u011c\25\33\1\0\1\33\26\0"+
    "\1\33\5\0\16\33\1\u011d\7\33\1\0\1\33\26\0"+
    "\1\33\5\0\16\33\1\u011e\7\33\1\0\1\33\26\0"+
    "\1\33\5\0\21\33\1\u011f\4\33\1\0\1\33\26\0"+
    "\1\33\5\0\22\33\1\u0120\3\33\1\0\1\33\4\0"+
    "\1\u0121\21\0\1\33\5\0\2\33\1\u0122\23\33\1\0"+
    "\1\33\26\0\1\33\5\0\16\33\1\u0123\7\33\1\0"+
    "\1\33\26\0\1\33\5\0\15\33\1\u0124\10\33\1\0"+
    "\1\33\51\0\1\u0125\40\0\1\33\5\0\1\u0126\25\33"+
    "\1\0\1\33\26\0\1\33\5\0\24\33\1\u0127\1\33"+
    "\1\0\1\33\60\0\1\u0128\41\0\1\u0129\77\0\1\u012a"+
    "\45\0\1\u012b\55\0\1\33\5\0\24\33\1\u012c\1\33"+
    "\1\0\1\33\60\0\1\u012d\31\0\1\33\5\0\21\33"+
    "\1\u012e\4\33\1\0\1\33\55\0\1\u012f\34\0\1\33"+
    "\5\0\21\33\1\u0130\4\33\1\0\1\33\55\0\1\u0131"+
    "\34\0\1\33\5\0\22\33\1\u0132\3\33\1\0\1\33"+
    "\4\0\1\u0133\51\0\1\u0133\11\0\1\u0133\21\0\1\33"+
    "\5\0\1\u0134\25\33\1\0\1\33\34\0\1\u0135\55\0"+
    "\1\33\5\0\21\33\1\u0136\4\33\1\0\1\33\26\0"+
    "\1\33\5\0\21\33\1\216\4\33\1\0\1\33\40\0"+
    "\1\u0137\51\0\1\33\5\0\14\33\1\u0138\11\33\1\0"+
    "\1\33\26\0\1\33\5\0\21\33\1\u0139\4\33\1\0"+
    "\1\33\26\0\1\33\5\0\15\33\1\u013a\10\33\1\0"+
    "\1\33\26\0\1\33\5\0\10\33\1\u013b\15\33\1\0"+
    "\1\33\3\0\1\u013c\22\0\1\33\5\0\3\33\1\u013d"+
    "\22\33\1\0\1\33\26\0\1\33\5\0\23\33\1\u013e"+
    "\2\33\1\0\1\33\57\0\1\u013f\32\0\1\33\5\0"+
    "\15\33\1\u0140\10\33\1\0\1\33\51\0\1\u0141\56\0"+
    "\1\u013c\22\0\1\u013c\33\0\1\u0142\52\0\1\33\5\0"+
    "\4\33\1\u0143\21\33\1\0\1\33\40\0\1\u0144\51\0"+
    "\1\33\5\0\26\33\1\0\1\u0145\63\0\1\u0146\50\0"+
    "\1\u0147\41\0\1\33\5\0\4\33\1\u0148\21\33\1\0"+
    "\1\33\26\0\1\33\5\0\23\33\1\u0149\2\33\1\0"+
    "\1\33\26\0\1\33\5\0\16\33\1\u014a\7\33\1\0"+
    "\1\33\52\0\1\u014b\37\0\1\33\5\0\16\33\1\u014c"+
    "\7\33\1\0\1\33\26\0\1\33\5\0\21\33\1\u014d"+
    "\4\33\1\0\1\33\55\0\1\u014e\60\0\1\u014f\37\0"+
    "\1\33\5\0\15\33\1\u0150\10\33\1\0\1\33\51\0"+
    "\1\u0151\52\0\1\u0152\51\0\1\33\5\0\23\33\1\u0153"+
    "\2\33\1\0\1\33\26\0\1\33\5\0\21\33\1\u0154"+
    "\4\33\1\0\1\33\26\0\1\33\5\0\15\33\1\u0155"+
    "\10\33\1\0\1\33\51\0\1\u0156\40\0\1\33\5\0"+
    "\1\u0157\25\33\1\0\1\33\34\0\1\u0158\55\0\1\33"+
    "\5\0\13\33\1\u0159\12\33\1\0\1\33\47\0\1\u015a"+
    "\65\0\1\u015b\40\0\1\33\5\0\21\33\1\u015c\4\33"+
    "\1\0\1\33\26\0\1\33\5\0\1\u015d\25\33\1\0"+
    "\1\33\26\0\1\33\5\0\22\33\1\u015e\3\33\1\0"+
    "\1\33\4\0\1\u015f\51\0\1\u015f\11\0\1\u015f\52\0"+
    "\1\u0160\32\0\1\33\5\0\16\33\1\u0161\7\33\1\0"+
    "\1\33\26\0\1\33\5\0\21\33\1\u0162\4\33\1\0"+
    "\1\33\34\0\1\u0163\55\0\1\33\5\0\22\33\1\u0164"+
    "\3\33\1\0\1\33\4\0\1\u0165\21\0\1\33\5\0"+
    "\10\33\1\u0166\15\33\1\0\1\33\3\0\1\u0167\43\0"+
    "\1\u0168\42\0\1\33\5\0\16\33\1\u0169\7\33\1\0"+
    "\1\33\52\0\1\u016a\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\5\11\3\1\1\11"+
    "\3\1\1\11\24\1\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\3\0\3\11\12\1\1\0\6\1\1\0"+
    "\10\1\1\11\1\1\1\0\1\11\3\0\2\1\1\0"+
    "\1\11\21\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\6\1\1\11\5\0\4\1\1\0\5\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\11\6\1\4\0\4\1\1\0\6\1\1\11"+
    "\4\1\1\0\1\1\4\0\4\1\1\0\2\1\1\0"+
    "\2\1\1\0\6\1\1\0\1\11\3\1\1\0\10\1"+
    "\1\0\3\1\1\11\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\2\1\1\0\3\1\1\0\10\1\1\0\2\1\1\0"+
    "\1\1\1\11\3\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\5\1\1\11\3\1\1\0\2\1\3\0\1\11"+
    "\1\1\1\0\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\4\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\1\1\2\0\3\1\1\0\2\1"+
    "\1\0\1\11\1\1\2\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\0\3\1\1\11\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error lexico detectado: " + yytext() + ", en la linea: " + yyline + ", en la columna: " + (int) yychar);
            }
            // fall through
          case 63: break;
          case 2:
            { 
            }
            // fall through
          case 64: break;
          case 3:
            { yychar=1;
            }
            // fall through
          case 65: break;
          case 4:
            { return new Symbol(sym.NOT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 66: break;
          case 5:
            { return new Symbol(sym.PARSTART, yyline,(int) yychar, yytext());
            }
            // fall through
          case 67: break;
          case 6:
            { return new Symbol(sym.PAREND, yyline,(int) yychar, yytext());
            }
            // fall through
          case 68: break;
          case 7:
            { return new Symbol(sym.MULTIPLY, yyline,(int) yychar, yytext());
            }
            // fall through
          case 69: break;
          case 8:
            { return new Symbol(sym.ADD, yyline,(int) yychar, yytext());
            }
            // fall through
          case 70: break;
          case 9:
            { return new Symbol(sym.COMMA, yyline,(int) yychar, yytext());
            }
            // fall through
          case 71: break;
          case 10:
            { return new Symbol(sym.SUBSTRACT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 72: break;
          case 11:
            { return new Symbol(sym.DIVISION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 73: break;
          case 12:
            { return new Symbol(sym.NUM, yyline, (int) yychar, yytext());
            }
            // fall through
          case 74: break;
          case 13:
            { return new Symbol(sym.DOTCOMMA, yyline,(int) yychar, yytext());
            }
            // fall through
          case 75: break;
          case 14:
            { return new Symbol(sym.MINOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 76: break;
          case 15:
            { return new Symbol(sym.MAJOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 77: break;
          case 16:
            { return new Symbol(sym.CLOSEQUESTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 78: break;
          case 17:
            { return new Symbol(sym.FUNCID, yyline, (int) yychar, yytext());
            }
            // fall through
          case 79: break;
          case 18:
            { return new Symbol(sym.NOTEQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 80: break;
          case 19:
            { return new Symbol(sym.STR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 81: break;
          case 20:
            { return new Symbol(sym.CHAR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 82: break;
          case 21:
            { return new Symbol(sym.ARROW, yyline,(int) yychar, yytext());
            }
            // fall through
          case 83: break;
          case 22:
            { return new Symbol(sym.MINOREQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 84: break;
          case 23:
            { return new Symbol(sym.EQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 85: break;
          case 24:
            { return new Symbol(sym.MAJOREQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 86: break;
          case 25:
            { return new Symbol(sym.OR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 87: break;
          case 26:
            { return new Symbol(sym.IF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 88: break;
          case 27:
            { return new Symbol(sym.OPENQUESTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 89: break;
          case 28:
            { return new Symbol(sym.AND, yyline,(int) yychar, yytext());
            }
            // fall through
          case 90: break;
          case 29:
            { return new Symbol(sym.END, yyline,(int) yychar, yytext());
            }
            // fall through
          case 91: break;
          case 30:
            { return new Symbol(sym.MODULE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 92: break;
          case 31:
            { return new Symbol(sym.ID, yyline, (int) yychar, yytext());
            }
            // fall through
          case 93: break;
          case 32:
            { return new Symbol(sym.AS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 94: break;
          case 33:
            { return new Symbol(sym.ELIF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 95: break;
          case 34:
            { return new Symbol(sym.FOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 96: break;
          case 35:
            { return new Symbol(sym.BOOLEAN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 97: break;
          case 36:
            { return new Symbol(sym.DO, yyline,(int) yychar, yytext());
            }
            // fall through
          case 98: break;
          case 37:
            { return new Symbol(sym.TO, yyline,(int) yychar, yytext());
            }
            // fall through
          case 99: break;
          case 38:
            { return new Symbol(sym.SWITCH, yyline,(int) yychar, yytext());
            }
            // fall through
          case 100: break;
          case 39:
            { return new Symbol(sym.TYPEDEF, yyline, (int) yychar, yytext());
            }
            // fall through
          case 101: break;
          case 40:
            { return new Symbol(sym.ENDIF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 102: break;
          case 41:
            { return new Symbol(sym.START, yyline,(int) yychar, yytext());
            }
            // fall through
          case 103: break;
          case 42:
            { return new Symbol(sym.DEFPROCEDURE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 104: break;
          case 43:
            { return new Symbol(sym.FUNCTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 105: break;
          case 44:
            { return new Symbol(sym.REPEAT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 106: break;
          case 45:
            { return new Symbol(sym.EXEC, yyline,(int) yychar, yytext());
            }
            // fall through
          case 107: break;
          case 46:
            { return new Symbol(sym.THEN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 108: break;
          case 47:
            { return new Symbol(sym.ENDFOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 109: break;
          case 48:
            { return new Symbol(sym.PRINT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 110: break;
          case 49:
            { return new Symbol(sym.ENTER, yyline,(int) yychar, yytext());
            }
            // fall through
          case 111: break;
          case 50:
            { return new Symbol(sym.WHILE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 112: break;
          case 51:
            { return new Symbol(sym.POW, yyline,(int) yychar, yytext());
            }
            // fall through
          case 113: break;
          case 52:
            { return new Symbol(sym.RETURN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 114: break;
          case 53:
            { return new Symbol(sym.WITH_VALUE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 115: break;
          case 54:
            { return new Symbol(sym.ENDSWITCH, yyline,(int) yychar, yytext());
            }
            // fall through
          case 116: break;
          case 55:
            { return new Symbol(sym.ENDREPEAT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 117: break;
          case 56:
            { return new Symbol(sym.ENDPROCEDURE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 118: break;
          case 57:
            { return new Symbol(sym.ENDFUNCTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 119: break;
          case 58:
            { return new Symbol(sym.PRINTLN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 120: break;
          case 59:
            { return new Symbol(sym.ENDWHILE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 121: break;
          case 60:
            { return new Symbol(sym.PARAMS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 122: break;
          case 61:
            { return new Symbol(sym.WITHINCREMENTAL, yyline,(int) yychar, yytext());
            }
            // fall through
          case 123: break;
          case 62:
            { return new Symbol(sym.ELSE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
