// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexico

package olc1.project1.analizadores;
import java_cup.runtime.Symbol; 


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\4\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\12\20\1\0\1\21\2\0\1\22"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\2\36\1\52\1\36\1\0\1\53\2\0\1\54\1\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\2\36\1\52"+
    "\1\36\1\0\1\55\10\0\1\3\71\0\1\56\2\0"+
    "\1\56\155\0\2\57\115\0\1\60\u01a8\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\20\16"+
    "\1\1\1\17\2\1\1\0\1\20\2\0\1\21\1\0"+
    "\1\22\3\0\6\16\1\0\3\16\1\0\3\16\1\0"+
    "\7\16\1\0\2\16\1\23\5\16\2\24\1\16\4\0"+
    "\1\20\1\21\1\0\2\2\1\13\1\25\7\16\1\0"+
    "\3\16\1\0\1\16\1\26\1\16\1\26\2\16\1\0"+
    "\3\16\1\0\4\16\1\27\1\0\1\30\2\16\1\0"+
    "\6\16\1\31\5\0\3\16\1\32\1\0\3\16\1\0"+
    "\3\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0"+
    "\3\16\1\0\4\16\1\0\1\16\2\33\1\34\5\16"+
    "\4\0\1\2\3\16\1\0\4\16\1\0\3\16\1\0"+
    "\2\35\4\16\1\0\1\16\4\0\1\36\2\37\1\16"+
    "\1\0\2\16\1\0\1\40\1\41\2\16\1\0\4\16"+
    "\1\42\1\16\1\0\1\42\1\16\1\43\1\16\1\0"+
    "\4\16\1\0\3\16\1\0\3\16\1\0\2\16\2\44"+
    "\1\0\1\16\4\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\2\45\2\16\1\46\1\16\1\0\2\16\1\0"+
    "\3\16\1\0\4\16\1\0\3\16\1\0\3\16\1\0"+
    "\2\16\1\0\2\47\3\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\0\3\16\1\0\1\16\1\0\2\50\2\16"+
    "\1\0\4\16\1\0\1\51\2\52\2\53\3\16\1\0"+
    "\1\54\1\16\3\0\1\54\1\16\1\0\2\55\2\56"+
    "\2\16\2\57\2\60\1\61\1\0\1\16\1\62\1\16"+
    "\2\63\1\16\1\0\2\16\1\0\2\64\1\0\2\65"+
    "\1\16\1\0\1\16\1\0\1\16\2\0\3\16\1\0"+
    "\1\66\1\16\1\0\1\66\1\16\1\0\1\16\1\0"+
    "\1\16\2\0\2\16\2\67\1\16\1\0\2\70\1\16"+
    "\1\0\1\16\2\0\2\16\2\71\1\16\1\0\1\16"+
    "\2\0\2\16\2\72\2\73\1\0\2\74\1\16\1\0"+
    "\1\75\2\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\61\0\61"+
    "\0\61\0\61\0\61\0\365\0\u0126\0\u0157\0\61\0\61"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\61\0\u04c9\0\u04fa\0\223\0\61\0\u052b\0\u055c"+
    "\0\61\0\u058d\0\61\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u02ae"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u02ae\0\61\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\223\0\u055c\0\u0d04\0\61"+
    "\0\u0d35\0\u0620\0\u02ae\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u02ae\0\u1291"+
    "\0\u02ae\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\61\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u02ae\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u02ae"+
    "\0\61\0\u02ae\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u02ae\0\61\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u02ae\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u02ae\0\u245e"+
    "\0\u248f\0\61\0\u24c0\0\u02ae\0\u24f1\0\u2522\0\u2553\0\u2584"+
    "\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c"+
    "\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u02ae\0\61\0\u2832"+
    "\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u29eb\0\u2a1c\0\u2a4d\0\u02ae\0\61\0\u2a7e\0\u2aaf\0\u02ae"+
    "\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u02ae\0\61\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d"+
    "\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5"+
    "\0\u3226\0\u3257\0\u02ae\0\61\0\u3288\0\u32b9\0\u32ea\0\u331b"+
    "\0\u334c\0\u337d\0\u33ae\0\u33df\0\u02ae\0\u02ae\0\61\0\u02ae"+
    "\0\61\0\u3410\0\u3441\0\u3472\0\u34a3\0\u02ae\0\u34d4\0\u3505"+
    "\0\u3536\0\u3567\0\61\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u02ae"+
    "\0\61\0\u365c\0\u368d\0\u02ae\0\61\0\u02ae\0\61\0\u02ae"+
    "\0\u36be\0\u36ef\0\u02ae\0\u3720\0\u02ae\0\61\0\u3751\0\u3782"+
    "\0\u37b3\0\u37e4\0\u3815\0\u02ae\0\61\0\u3846\0\u02ae\0\61"+
    "\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce"+
    "\0\u39ff\0\u3a30\0\u3a61\0\u02ae\0\u3a92\0\u3ac3\0\61\0\u3af4"+
    "\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c"+
    "\0\u02ae\0\61\0\u3cad\0\u3cde\0\u02ae\0\61\0\u3d0f\0\u3d40"+
    "\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u02ae\0\61\0\u3e66"+
    "\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u02ae\0\61"+
    "\0\u02ae\0\61\0\u3fbd\0\u02ae\0\61\0\u3fee\0\u401f\0\61"+
    "\0\u02ae\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\2\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\15\1\16"+
    "\1\17\1\2\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\27\1\32\1\33\1\34"+
    "\1\35\1\27\1\36\1\37\2\27\1\40\1\27\1\2"+
    "\1\41\1\2\1\42\1\43\1\44\62\0\1\3\2\0"+
    "\2\3\53\0\2\45\1\0\3\45\1\46\44\45\1\47"+
    "\5\45\1\50\2\0\3\50\1\0\1\51\43\50\1\52"+
    "\5\50\22\0\1\53\50\0\1\54\4\0\1\55\57\0"+
    "\1\56\1\0\1\16\60\0\1\27\3\0\15\27\1\57"+
    "\11\27\1\0\1\27\24\0\1\27\3\0\16\27\1\60"+
    "\10\27\1\0\1\27\24\0\1\27\3\0\1\61\15\27"+
    "\1\62\10\27\1\0\1\27\24\0\1\27\3\0\4\27"+
    "\1\63\3\27\1\64\16\27\1\0\1\27\2\0\1\65"+
    "\21\0\1\27\3\0\11\27\1\66\3\27\1\67\4\27"+
    "\1\70\4\27\1\0\1\27\3\0\1\71\20\0\1\27"+
    "\3\0\1\72\7\27\1\73\13\27\1\74\2\27\1\0"+
    "\1\27\2\0\1\75\21\0\1\27\3\0\27\27\1\0"+
    "\1\27\24\0\1\27\3\0\1\76\26\27\1\0\1\27"+
    "\24\0\1\27\3\0\14\27\1\77\1\100\11\27\1\0"+
    "\1\27\24\0\1\27\3\0\1\101\3\27\1\102\3\27"+
    "\1\103\5\27\1\104\10\27\1\0\1\27\2\0\1\105"+
    "\21\0\1\27\3\0\16\27\1\106\5\27\1\107\2\27"+
    "\1\0\1\27\24\0\1\27\3\0\21\27\1\110\5\27"+
    "\1\0\1\111\24\0\1\27\3\0\1\112\15\27\1\113"+
    "\10\27\1\0\1\27\24\0\1\27\3\0\4\27\1\114"+
    "\22\27\1\0\1\27\24\0\1\27\3\0\4\27\1\115"+
    "\3\27\1\116\16\27\1\0\1\27\2\0\1\117\21\0"+
    "\1\27\3\0\4\27\1\120\22\27\1\0\1\27\24\0"+
    "\1\121\3\0\27\121\46\0\1\122\1\123\47\0\1\124"+
    "\3\0\1\117\22\0\1\117\1\0\2\45\1\0\3\45"+
    "\1\125\44\45\1\47\5\45\7\0\1\51\57\0\1\50"+
    "\1\126\31\0\1\50\5\0\1\50\11\0\12\54\1\127"+
    "\46\54\2\55\1\130\1\0\1\131\54\55\5\0\1\132"+
    "\12\0\1\132\34\0\1\132\23\0\1\27\3\0\3\27"+
    "\1\133\23\27\1\0\1\27\24\0\1\27\3\0\16\27"+
    "\1\134\10\27\1\0\1\27\24\0\1\27\3\0\3\27"+
    "\1\135\15\27\1\136\5\27\1\0\1\27\24\0\1\27"+
    "\3\0\14\27\1\137\1\140\11\27\1\0\1\27\24\0"+
    "\1\27\3\0\27\27\1\0\1\141\24\0\1\27\3\0"+
    "\5\27\1\142\21\27\1\0\1\27\35\0\1\143\47\0"+
    "\1\27\3\0\4\27\1\144\22\27\1\0\1\27\24\0"+
    "\1\27\3\0\23\27\1\145\3\27\1\0\1\27\24\0"+
    "\1\27\3\0\27\27\1\0\1\146\60\0\1\147\24\0"+
    "\1\27\3\0\13\27\1\150\13\27\1\0\1\27\24\0"+
    "\1\27\3\0\15\27\1\151\11\27\1\0\1\27\24\0"+
    "\1\27\3\0\15\27\1\152\11\27\1\0\1\27\45\0"+
    "\1\153\37\0\1\27\3\0\2\27\1\154\17\27\1\155"+
    "\4\27\1\0\1\27\3\0\1\156\20\0\1\27\3\0"+
    "\17\27\1\157\7\27\1\0\1\27\24\0\1\27\3\0"+
    "\6\27\1\160\1\27\1\161\16\27\1\0\1\27\2\0"+
    "\1\162\21\0\1\27\3\0\26\27\1\163\1\0\1\27"+
    "\24\0\1\27\3\0\15\27\1\164\5\27\1\165\3\27"+
    "\1\0\1\27\24\0\1\27\3\0\4\27\1\166\22\27"+
    "\1\0\1\27\24\0\1\27\3\0\3\27\1\167\23\27"+
    "\1\0\1\27\34\0\1\170\50\0\1\27\3\0\23\27"+
    "\1\171\3\27\1\0\1\27\24\0\1\27\3\0\14\27"+
    "\1\172\12\27\1\0\1\27\24\0\1\27\3\0\22\27"+
    "\1\173\4\27\1\0\1\27\3\0\1\174\20\0\1\27"+
    "\3\0\21\27\1\175\5\27\1\0\1\27\24\0\1\27"+
    "\3\0\23\27\1\176\3\27\1\0\1\27\24\0\1\27"+
    "\3\0\17\27\1\177\3\27\1\200\3\27\1\0\1\27"+
    "\24\0\1\27\3\0\6\27\1\201\20\27\1\0\1\27"+
    "\24\0\1\27\3\0\21\27\1\202\5\27\1\0\1\27"+
    "\24\0\1\121\3\0\27\121\1\0\1\203\47\0\1\204"+
    "\47\0\1\205\1\0\1\162\22\0\1\162\33\0\1\206"+
    "\26\0\12\207\1\210\4\207\1\130\41\207\2\0\1\130"+
    "\76\0\1\27\3\0\13\27\1\211\13\27\1\0\1\27"+
    "\24\0\1\27\3\0\4\27\1\212\22\27\1\0\1\27"+
    "\24\0\1\27\3\0\1\213\26\27\1\0\1\27\24\0"+
    "\1\27\3\0\16\27\1\214\10\27\1\0\1\27\11\0"+
    "\1\215\12\0\1\27\3\0\27\27\1\0\1\216\24\0"+
    "\1\27\3\0\13\27\1\217\13\27\1\0\1\27\24\0"+
    "\1\27\3\0\4\27\1\220\22\27\1\0\1\27\34\0"+
    "\1\221\50\0\1\27\3\0\2\27\1\222\24\27\1\0"+
    "\1\27\24\0\1\27\3\0\16\27\1\223\10\27\1\0"+
    "\1\27\24\0\1\27\3\0\10\27\1\224\16\27\1\0"+
    "\1\27\2\0\1\225\35\0\1\225\22\0\1\225\21\0"+
    "\1\27\3\0\22\27\1\226\4\27\1\0\1\27\3\0"+
    "\1\227\20\0\1\27\3\0\27\27\1\0\1\230\24\0"+
    "\1\27\3\0\2\27\1\231\24\27\1\0\1\27\60\0"+
    "\1\232\24\0\1\27\3\0\4\27\1\233\22\27\1\0"+
    "\1\27\24\0\1\27\3\0\23\27\1\234\3\27\1\0"+
    "\1\27\53\0\1\235\31\0\1\27\3\0\21\27\1\236"+
    "\5\27\1\0\1\27\24\0\1\27\3\0\21\27\1\237"+
    "\5\27\1\0\1\27\24\0\1\27\3\0\2\27\1\240"+
    "\24\27\1\0\1\27\32\0\1\241\52\0\1\27\3\0"+
    "\16\27\1\242\10\27\1\0\1\27\24\0\1\27\3\0"+
    "\16\27\1\243\10\27\1\0\1\27\24\0\1\27\3\0"+
    "\16\27\1\244\10\27\1\0\1\27\24\0\1\27\3\0"+
    "\15\27\1\245\11\27\1\0\1\27\45\0\1\246\37\0"+
    "\1\27\3\0\4\27\1\247\22\27\1\0\1\27\24\0"+
    "\1\27\3\0\10\27\1\250\16\27\1\0\1\27\2\0"+
    "\1\251\35\0\1\251\22\0\1\251\21\0\1\27\3\0"+
    "\1\252\26\27\1\0\1\27\24\0\1\27\3\0\4\27"+
    "\1\253\22\27\1\0\1\27\24\0\1\27\3\0\4\27"+
    "\1\254\22\27\1\0\1\27\24\0\1\27\3\0\16\27"+
    "\1\255\10\27\1\0\1\27\24\0\1\27\3\0\24\27"+
    "\1\256\2\27\1\0\1\27\24\0\1\27\3\0\3\27"+
    "\1\257\23\27\1\0\1\27\51\0\1\260\60\0\1\261"+
    "\63\0\1\262\10\0\12\54\1\127\4\54\1\263\53\54"+
    "\1\127\4\54\1\264\41\54\20\0\1\27\3\0\4\27"+
    "\1\265\22\27\1\0\1\27\24\0\1\27\3\0\15\27"+
    "\1\266\11\27\1\0\1\27\24\0\1\27\3\0\2\27"+
    "\1\267\24\27\1\0\1\27\40\0\1\270\22\0\1\270"+
    "\21\0\1\27\3\0\17\27\1\271\5\27\1\272\1\27"+
    "\1\0\1\27\24\0\1\27\3\0\16\27\1\273\10\27"+
    "\1\0\1\27\24\0\1\27\3\0\21\27\1\274\5\27"+
    "\1\0\1\27\51\0\1\275\33\0\1\27\3\0\24\27"+
    "\1\276\2\27\1\0\1\27\24\0\1\27\3\0\15\27"+
    "\1\277\11\27\1\0\1\27\24\0\1\27\3\0\6\27"+
    "\1\300\20\27\1\0\1\27\36\0\1\301\46\0\1\27"+
    "\3\0\16\27\1\302\10\27\1\0\1\27\46\0\1\303"+
    "\36\0\1\27\3\0\5\27\1\304\6\27\1\305\2\27"+
    "\1\306\2\27\1\307\4\27\1\0\1\27\3\0\1\310"+
    "\20\0\1\27\3\0\10\27\1\311\16\27\1\0\1\27"+
    "\2\0\1\312\32\0\1\313\6\0\1\314\2\0\1\315"+
    "\2\0\1\310\11\0\1\310\20\0\1\27\3\0\21\27"+
    "\1\316\5\27\1\0\1\27\24\0\1\27\3\0\1\317"+
    "\26\27\1\0\1\27\30\0\1\320\54\0\1\27\3\0"+
    "\10\27\1\321\16\27\1\0\1\27\2\0\1\322\21\0"+
    "\1\27\3\0\4\27\1\323\22\27\1\0\1\27\24\0"+
    "\1\27\3\0\10\27\1\324\16\27\1\0\1\27\2\0"+
    "\1\325\35\0\1\325\22\0\1\325\21\0\1\27\3\0"+
    "\21\27\1\326\5\27\1\0\1\27\24\0\1\27\3\0"+
    "\21\27\1\327\5\27\1\0\1\27\24\0\1\27\3\0"+
    "\3\27\1\330\23\27\1\0\1\27\24\0\1\27\3\0"+
    "\23\27\1\331\3\27\1\0\1\27\53\0\1\332\31\0"+
    "\1\27\3\0\21\27\1\333\5\27\1\0\1\27\24\0"+
    "\1\27\3\0\15\27\1\334\11\27\1\0\1\27\24\0"+
    "\1\27\3\0\23\27\1\335\3\27\1\0\1\27\24\0"+
    "\1\27\3\0\21\27\1\336\5\27\1\0\1\27\24\0"+
    "\1\27\3\0\15\27\1\337\11\27\1\0\1\27\24\0"+
    "\1\27\3\0\1\340\26\27\1\0\1\27\40\0\1\322"+
    "\22\0\1\322\31\0\1\341\71\0\1\342\36\0\1\207"+
    "\61\0\1\27\3\0\1\343\26\27\1\0\1\27\24\0"+
    "\1\27\3\0\1\344\26\27\1\0\1\27\24\0\1\27"+
    "\3\0\23\27\1\345\3\27\1\0\1\27\45\0\1\346"+
    "\37\0\1\27\3\0\1\347\26\27\1\0\1\27\24\0"+
    "\1\27\3\0\1\350\26\27\1\0\1\27\24\0\1\27"+
    "\3\0\27\27\1\0\1\351\24\0\1\27\3\0\4\27"+
    "\1\352\22\27\1\0\1\27\34\0\1\353\50\0\1\27"+
    "\3\0\23\27\1\354\3\27\1\0\1\27\24\0\1\27"+
    "\3\0\2\27\1\355\24\27\1\0\1\27\24\0\1\27"+
    "\3\0\24\27\1\356\2\27\1\0\1\27\54\0\1\357"+
    "\30\0\1\27\3\0\24\27\1\360\2\27\1\0\1\27"+
    "\24\0\1\27\3\0\4\27\1\361\3\27\1\362\16\27"+
    "\1\0\1\27\2\0\1\363\21\0\1\27\3\0\1\364"+
    "\26\27\1\0\1\27\24\0\1\27\3\0\4\27\1\365"+
    "\3\27\1\366\16\27\1\0\1\27\2\0\1\367\31\0"+
    "\1\370\3\0\1\367\22\0\1\367\21\0\1\27\3\0"+
    "\16\27\1\371\10\27\1\0\1\27\46\0\1\372\66\0"+
    "\1\373\40\0\1\374\3\0\1\363\22\0\1\363\25\0"+
    "\1\375\54\0\1\27\3\0\27\27\1\0\1\376\60\0"+
    "\1\377\24\0\1\27\3\0\14\27\1\u0100\12\27\1\0"+
    "\1\27\44\0\1\u0101\40\0\1\27\3\0\22\27\1\u0102"+
    "\4\27\1\0\1\27\3\0\1\u0103\20\0\1\27\3\0"+
    "\16\27\1\u0104\10\27\1\0\1\27\46\0\1\u0105\36\0"+
    "\1\27\3\0\27\27\1\0\1\u0106\24\0\1\27\3\0"+
    "\27\27\1\0\1\u0107\24\0\1\27\3\0\16\27\1\u0108"+
    "\10\27\1\0\1\27\24\0\1\27\3\0\21\27\1\u0109"+
    "\5\27\1\0\1\27\51\0\1\u010a\33\0\1\27\3\0"+
    "\16\27\1\344\10\27\1\0\1\27\24\0\1\27\3\0"+
    "\2\27\1\u010b\24\27\1\0\1\27\24\0\1\27\3\0"+
    "\10\27\1\u010c\16\27\1\0\1\27\2\0\1\u010d\21\0"+
    "\1\27\3\0\15\27\1\u010e\11\27\1\0\1\27\24\0"+
    "\1\27\3\0\3\27\1\u010f\23\27\1\0\1\27\52\0"+
    "\1\u0103\11\0\1\u0103\20\0\1\27\3\0\15\27\1\344"+
    "\11\27\1\0\1\27\24\0\1\27\3\0\4\27\1\u0110"+
    "\22\27\1\0\1\27\32\0\1\u0111\52\0\1\27\3\0"+
    "\21\27\1\u0112\5\27\1\0\1\27\24\0\1\27\3\0"+
    "\13\27\1\u0113\13\27\1\0\1\27\24\0\1\27\3\0"+
    "\2\27\1\u0114\24\27\1\0\1\27\24\0\1\27\3\0"+
    "\15\27\1\u0115\11\27\1\0\1\27\45\0\1\u0116\37\0"+
    "\1\27\3\0\1\u0117\26\27\1\0\1\27\24\0\1\27"+
    "\3\0\4\27\1\u0118\22\27\1\0\1\27\24\0\1\27"+
    "\3\0\1\u0119\26\27\1\0\1\27\30\0\1\u011a\54\0"+
    "\1\27\3\0\15\27\1\u011b\11\27\1\0\1\27\24\0"+
    "\1\27\3\0\23\27\1\u011c\3\27\1\0\1\27\24\0"+
    "\1\27\3\0\4\27\1\u011d\22\27\1\0\1\27\34\0"+
    "\1\u011e\50\0\1\27\3\0\21\27\1\u011f\5\27\1\0"+
    "\1\27\24\0\1\27\3\0\6\27\1\u0120\20\27\1\0"+
    "\1\27\36\0\1\u0121\46\0\1\27\3\0\15\27\1\u0122"+
    "\11\27\1\0\1\27\45\0\1\u0123\60\0\1\u0124\66\0"+
    "\1\u0125\56\0\1\u0126\33\0\1\27\3\0\20\27\1\u0127"+
    "\6\27\1\0\1\27\50\0\1\u0128\34\0\1\27\3\0"+
    "\10\27\1\u0129\16\27\1\0\1\27\2\0\1\u012a\35\0"+
    "\1\u012a\22\0\1\u012a\21\0\1\27\3\0\1\u012b\26\27"+
    "\1\0\1\27\30\0\1\u012c\54\0\1\27\3\0\16\27"+
    "\1\u012d\10\27\1\0\1\27\24\0\1\27\3\0\16\27"+
    "\1\u012e\10\27\1\0\1\27\24\0\1\27\3\0\1\u012f"+
    "\26\27\1\0\1\27\30\0\1\u0130\54\0\1\27\3\0"+
    "\10\27\1\u0131\16\27\1\0\1\27\2\0\1\u0132\21\0"+
    "\1\27\3\0\21\27\1\u0133\5\27\1\0\1\27\51\0"+
    "\1\u0134\33\0\1\27\3\0\1\u0135\26\27\1\0\1\27"+
    "\24\0\1\27\3\0\4\27\1\u0136\22\27\1\0\1\27"+
    "\24\0\1\27\3\0\21\27\1\344\5\27\1\0\1\27"+
    "\51\0\1\u0137\33\0\1\27\3\0\1\u0138\26\27\1\0"+
    "\1\27\24\0\1\27\3\0\16\27\1\u0139\10\27\1\0"+
    "\1\27\24\0\1\27\3\0\16\27\1\u013a\10\27\1\0"+
    "\1\27\24\0\1\27\3\0\23\27\1\u013b\3\27\1\0"+
    "\1\27\53\0\1\u013c\31\0\1\27\3\0\21\27\1\u013d"+
    "\5\27\1\0\1\27\24\0\1\27\3\0\22\27\1\u013e"+
    "\4\27\1\0\1\27\3\0\1\u013f\20\0\1\27\3\0"+
    "\13\27\1\u0140\13\27\1\0\1\27\43\0\1\u0141\41\0"+
    "\1\27\3\0\2\27\1\u0142\24\27\1\0\1\27\24\0"+
    "\1\27\3\0\16\27\1\u0143\10\27\1\0\1\27\24\0"+
    "\1\27\3\0\15\27\1\u0144\11\27\1\0\1\27\45\0"+
    "\1\u0145\37\0\1\27\3\0\1\u0146\26\27\1\0\1\27"+
    "\24\0\1\27\3\0\24\27\1\u0147\2\27\1\0\1\27"+
    "\54\0\1\u0148\36\0\1\u0149\74\0\1\u014a\42\0\1\u014b"+
    "\54\0\1\27\3\0\24\27\1\u014c\2\27\1\0\1\27"+
    "\54\0\1\u014d\30\0\1\27\3\0\21\27\1\u014e\5\27"+
    "\1\0\1\27\51\0\1\u014f\33\0\1\27\3\0\21\27"+
    "\1\u0150\5\27\1\0\1\27\51\0\1\u0151\33\0\1\27"+
    "\3\0\27\27\1\0\1\u0152\24\0\1\27\3\0\27\27"+
    "\1\0\1\u0153\24\0\1\27\3\0\22\27\1\u0154\4\27"+
    "\1\0\1\27\3\0\1\u0155\46\0\1\u0155\11\0\1\u0155"+
    "\20\0\1\27\3\0\1\u0156\26\27\1\0\1\27\30\0"+
    "\1\u0157\54\0\1\27\3\0\21\27\1\u0158\5\27\1\0"+
    "\1\27\24\0\1\27\3\0\21\27\1\226\5\27\1\0"+
    "\1\27\34\0\1\u0159\50\0\1\27\3\0\14\27\1\u015a"+
    "\12\27\1\0\1\27\24\0\1\27\3\0\21\27\1\u015b"+
    "\5\27\1\0\1\27\24\0\1\27\3\0\15\27\1\u015c"+
    "\11\27\1\0\1\27\24\0\1\27\3\0\4\27\1\u015d"+
    "\22\27\1\0\1\27\34\0\1\u015e\50\0\1\27\3\0"+
    "\10\27\1\u015f\16\27\1\0\1\27\2\0\1\u0160\21\0"+
    "\1\27\3\0\3\27\1\u0161\23\27\1\0\1\27\24\0"+
    "\1\27\3\0\23\27\1\u0162\3\27\1\0\1\27\53\0"+
    "\1\u0163\31\0\1\27\3\0\15\27\1\u0164\11\27\1\0"+
    "\1\27\45\0\1\u0165\53\0\1\u0160\22\0\1\u0160\30\0"+
    "\1\u0166\51\0\1\27\3\0\4\27\1\u0167\22\27\1\0"+
    "\1\27\34\0\1\u0168\50\0\1\27\3\0\27\27\1\0"+
    "\1\u0169\60\0\1\u016a\24\0\1\27\3\0\10\27\1\u016b"+
    "\16\27\1\0\1\27\2\0\1\u016c\21\0\1\27\3\0"+
    "\10\27\1\u016d\16\27\1\0\1\27\2\0\1\u016e\41\0"+
    "\1\u016f\40\0\1\27\3\0\4\27\1\u0170\22\27\1\0"+
    "\1\27\24\0\1\27\3\0\23\27\1\u0171\3\27\1\0"+
    "\1\27\24\0\1\27\3\0\16\27\1\u0172\10\27\1\0"+
    "\1\27\46\0\1\u0173\36\0\1\27\3\0\16\27\1\u0174"+
    "\10\27\1\0\1\27\24\0\1\27\3\0\21\27\1\u0175"+
    "\5\27\1\0\1\27\51\0\1\u0176\55\0\1\u0177\36\0"+
    "\1\27\3\0\15\27\1\u0178\11\27\1\0\1\27\45\0"+
    "\1\u0179\37\0\1\27\3\0\6\27\1\u017a\20\27\1\0"+
    "\1\27\36\0\1\u017b\46\0\1\27\3\0\6\27\1\u017c"+
    "\20\27\1\0\1\27\36\0\1\u017d\56\0\1\u017e\50\0"+
    "\1\27\3\0\23\27\1\u017f\3\27\1\0\1\27\24\0"+
    "\1\27\3\0\21\27\1\u0180\5\27\1\0\1\27\24\0"+
    "\1\27\3\0\15\27\1\u0181\11\27\1\0\1\27\45\0"+
    "\1\u0182\37\0\1\27\3\0\1\u0183\26\27\1\0\1\27"+
    "\30\0\1\u0184\54\0\1\27\3\0\13\27\1\u0185\13\27"+
    "\1\0\1\27\43\0\1\u0186\41\0\1\27\3\0\24\27"+
    "\1\u0187\2\27\1\0\1\27\54\0\1\u0188\30\0\1\27"+
    "\3\0\24\27\1\u0189\2\27\1\0\1\27\54\0\1\u018a"+
    "\51\0\1\u018b\37\0\1\27\3\0\21\27\1\u018c\5\27"+
    "\1\0\1\27\24\0\1\27\3\0\1\u018d\26\27\1\0"+
    "\1\27\24\0\1\27\3\0\22\27\1\u018e\4\27\1\0"+
    "\1\27\3\0\1\u018f\46\0\1\u018f\11\0\1\u018f\20\0"+
    "\1\27\3\0\1\u0190\26\27\1\0\1\27\30\0\1\u0191"+
    "\54\0\1\27\3\0\1\u0192\26\27\1\0\1\27\30\0"+
    "\1\u0193\103\0\1\u0194\31\0\1\27\3\0\16\27\1\u0195"+
    "\10\27\1\0\1\27\24\0\1\27\3\0\21\27\1\u0196"+
    "\5\27\1\0\1\27\24\0\1\27\3\0\13\27\1\u0197"+
    "\13\27\1\0\1\27\43\0\1\u0198\41\0\1\27\3\0"+
    "\13\27\1\u0199\13\27\1\0\1\27\43\0\1\u019a\45\0"+
    "\1\u019b\54\0\1\27\3\0\22\27\1\u019c\4\27\1\0"+
    "\1\27\3\0\1\u019d\20\0\1\27\3\0\10\27\1\u019e"+
    "\16\27\1\0\1\27\2\0\1\u019f\40\0\1\u01a0\41\0"+
    "\1\27\3\0\16\27\1\u01a1\10\27\1\0\1\27\46\0"+
    "\1\u01a2\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16464];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\5\11\3\1\2\11"+
    "\21\1\1\11\2\1\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\3\0\6\1\1\0\3\1\1\0\3\1\1\0"+
    "\7\1\1\0\11\1\1\11\1\1\4\0\2\1\1\0"+
    "\1\11\12\1\1\0\3\1\1\0\6\1\1\0\3\1"+
    "\1\0\5\1\1\0\3\1\1\0\6\1\1\11\5\0"+
    "\4\1\1\0\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\4\1\1\0"+
    "\2\1\1\11\6\1\4\0\4\1\1\0\4\1\1\0"+
    "\3\1\1\0\1\1\1\11\4\1\1\0\1\1\4\0"+
    "\4\1\1\0\2\1\1\0\4\1\1\0\6\1\1\0"+
    "\1\11\3\1\1\0\4\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\11\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\4\1\1\0"+
    "\2\1\1\0\3\1\1\0\4\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\1\11\3\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\0\4\1\1\0\2\1"+
    "\1\11\1\1\1\11\3\1\1\0\2\1\3\0\1\11"+
    "\1\1\1\0\3\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\0\4\1\1\11\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\3\1\1\0\2\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\2\0"+
    "\3\1\1\11\1\1\1\0\1\1\2\0\3\1\1\11"+
    "\1\1\1\11\1\0\1\1\1\11\1\1\1\0\1\11"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error lexico detectado: " + yytext() + ", en la linea: " + yyline + ", en la columna: " + (int) yychar);
            }
            // fall through
          case 63: break;
          case 2:
            { 
            }
            // fall through
          case 64: break;
          case 3:
            { yychar=1;
            }
            // fall through
          case 65: break;
          case 4:
            { return new Symbol(sym.PARSTART, yyline,(int) yychar, yytext());
            }
            // fall through
          case 66: break;
          case 5:
            { return new Symbol(sym.PAREND, yyline,(int) yychar, yytext());
            }
            // fall through
          case 67: break;
          case 6:
            { return new Symbol(sym.MULTIPLY, yyline,(int) yychar, yytext());
            }
            // fall through
          case 68: break;
          case 7:
            { return new Symbol(sym.ADD, yyline,(int) yychar, yytext());
            }
            // fall through
          case 69: break;
          case 8:
            { return new Symbol(sym.COMMA, yyline,(int) yychar, yytext());
            }
            // fall through
          case 70: break;
          case 9:
            { return new Symbol(sym.SUBSTRACT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 71: break;
          case 10:
            { return new Symbol(sym.DIVISION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 72: break;
          case 11:
            { return new Symbol(sym.NUM, yyline, (int) yychar, yytext());
            }
            // fall through
          case 73: break;
          case 12:
            { return new Symbol(sym.DOTCOMMA, yyline,(int) yychar, yytext());
            }
            // fall through
          case 74: break;
          case 13:
            { return new Symbol(sym.CLOSEQUESTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 75: break;
          case 14:
            { return new Symbol(sym.FUNCID, yyline, (int) yychar, yytext());
            }
            // fall through
          case 76: break;
          case 15:
            { return new Symbol(sym.OPENQUESTION, yyline, (int) yychar, yytext());
            }
            // fall through
          case 77: break;
          case 16:
            { return new Symbol(sym.STR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 78: break;
          case 17:
            { return new Symbol(sym.CHAR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 79: break;
          case 18:
            { return new Symbol(sym.ARROW, yyline,(int) yychar, yytext());
            }
            // fall through
          case 80: break;
          case 19:
            { return new Symbol(sym.OR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 81: break;
          case 20:
            { return new Symbol(sym.IF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 82: break;
          case 21:
            { return new Symbol(sym.AND, yyline,(int) yychar, yytext());
            }
            // fall through
          case 83: break;
          case 22:
            { return new Symbol(sym.END, yyline,(int) yychar, yytext());
            }
            // fall through
          case 84: break;
          case 23:
            { return new Symbol(sym.MODULE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 85: break;
          case 24:
            { return new Symbol(sym.NOT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 86: break;
          case 25:
            { return new Symbol(sym.ID, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 87: break;
          case 26:
            { return new Symbol(sym.AS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 88: break;
          case 27:
            { return new Symbol(sym.ELIF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 89: break;
          case 28:
            { return new Symbol(sym.FOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 90: break;
          case 29:
            { return new Symbol(sym.BOOLEAN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 91: break;
          case 30:
            { return new Symbol(sym.DO, yyline,(int) yychar, yytext());
            }
            // fall through
          case 92: break;
          case 31:
            { return new Symbol(sym.TO, yyline,(int) yychar, yytext());
            }
            // fall through
          case 93: break;
          case 32:
            { return new Symbol(sym.MAJOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 94: break;
          case 33:
            { return new Symbol(sym.MINOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 95: break;
          case 34:
            { return new Symbol(sym.SWITCH, yyline,(int) yychar, yytext());
            }
            // fall through
          case 96: break;
          case 35:
            { return new Symbol(sym.TYPEDEF, yyline, (int) yychar, yytext());
            }
            // fall through
          case 97: break;
          case 36:
            { return new Symbol(sym.ENDIF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 98: break;
          case 37:
            { return new Symbol(sym.START, yyline,(int) yychar, yytext());
            }
            // fall through
          case 99: break;
          case 38:
            { return new Symbol(sym.DEFPROCEDURE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 100: break;
          case 39:
            { return new Symbol(sym.FUNCTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 101: break;
          case 40:
            { return new Symbol(sym.REPEAT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 102: break;
          case 41:
            { return new Symbol(sym.EXEC, yyline,(int) yychar, yytext());
            }
            // fall through
          case 103: break;
          case 42:
            { return new Symbol(sym.THEN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 104: break;
          case 43:
            { return new Symbol(sym.EQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 105: break;
          case 44:
            { return new Symbol(sym.ENDFOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 106: break;
          case 45:
            { return new Symbol(sym.PRINT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 107: break;
          case 46:
            { return new Symbol(sym.ENTER, yyline,(int) yychar, yytext());
            }
            // fall through
          case 108: break;
          case 47:
            { return new Symbol(sym.WHILE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 109: break;
          case 48:
            { return new Symbol(sym.POW, yyline,(int) yychar, yytext());
            }
            // fall through
          case 110: break;
          case 49:
            { return new Symbol(sym.RETURN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 111: break;
          case 50:
            { return new Symbol(sym.WITH_VALUE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 112: break;
          case 51:
            { return new Symbol(sym.NOTEQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 113: break;
          case 52:
            { return new Symbol(sym.ENDSWITCH, yyline,(int) yychar, yytext());
            }
            // fall through
          case 114: break;
          case 53:
            { return new Symbol(sym.ENDREPEAT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 115: break;
          case 54:
            { return new Symbol(sym.ENDPROCEDURE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 116: break;
          case 55:
            { return new Symbol(sym.ENDFUNCTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 117: break;
          case 56:
            { return new Symbol(sym.PRINTLN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 118: break;
          case 57:
            { return new Symbol(sym.ENDWHILE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 119: break;
          case 58:
            { return new Symbol(sym.MAJOREQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 120: break;
          case 59:
            { return new Symbol(sym.MINOREQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 121: break;
          case 60:
            { return new Symbol(sym.PARAMS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 122: break;
          case 61:
            { return new Symbol(sym.WITHINCREMENTAL, yyline,(int) yychar, yytext());
            }
            // fall through
          case 123: break;
          case 62:
            { return new Symbol(sym.ELSE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
