
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1.project1.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1.project1.instructions.Statement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\006\000\002\004\007\000\002\004\011\000" +
    "\002\004\013\000\002\004\015\000\002\004\012\000\002" +
    "\004\014\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\005\000\002\004\005\000\002\004\006" +
    "\000\002\004\012\000\002\004\007\000\002\004\013\000" +
    "\002\004\006\000\002\004\007\000\002\004\004\000\002" +
    "\004\004\000\002\007\006\000\002\007\004\000\002\010" +
    "\005\000\002\010\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\006\006\000\002" +
    "\005\005\000\002\005\003\000\002\011\004\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\025\005\001\002\000\004\002\216\001" +
    "\002\000\034\026\025\030\014\033\015\043\010\047\007" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\013\071\020\001\002\000\034\030\014\033\015\043\010" +
    "\047\007\051\006\052\212\053\024\054\012\057\023\061" +
    "\011\062\022\063\013\071\020\001\002\000\010\016\031" +
    "\023\034\064\026\001\002\000\004\071\165\001\002\000" +
    "\004\072\160\001\002\000\004\072\147\001\002\000\004" +
    "\065\146\001\002\000\004\071\020\001\002\000\010\016" +
    "\031\023\034\064\026\001\002\000\034\026\127\030\014" +
    "\033\015\043\010\047\007\051\006\053\024\054\012\057" +
    "\023\061\011\062\022\063\013\071\020\001\002\000\004" +
    "\027\124\001\002\000\010\011\122\027\uffda\031\uffda\001" +
    "\002\000\052\026\ufffd\030\ufffd\033\ufffd\035\ufffd\036\ufffd" +
    "\043\ufffd\045\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\071\ufffd\001\002\000\004\065\121\001\002\000" +
    "\004\072\102\001\002\000\022\016\031\023\034\064\026" +
    "\065\027\066\030\067\040\071\033\072\035\001\002\000" +
    "\004\002\uffff\001\002\000\114\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\012\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\024\uffd1\026\uffd1\030\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\041\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\071\uffd1\001\002\000\004\012\uffe1\001\002\000\004" +
    "\012\uffdf\001\002\000\010\016\031\023\034\064\026\001" +
    "\002\000\004\012\uffe2\001\002\000\004\012\uffde\001\002" +
    "\000\010\016\031\023\034\064\026\001\002\000\004\023" +
    "\070\001\002\000\004\012\067\001\002\000\032\004\046" +
    "\005\043\006\052\007\053\010\051\012\uffe3\015\047\016" +
    "\045\017\044\020\050\021\042\022\041\001\002\000\004" +
    "\012\uffe0\001\002\000\010\016\031\023\034\064\026\001" +
    "\002\000\010\016\031\023\034\064\026\001\002\000\010" +
    "\016\031\023\034\064\026\001\002\000\010\016\031\023" +
    "\034\064\026\001\002\000\010\016\031\023\034\064\026" +
    "\001\002\000\010\016\031\023\034\064\026\001\002\000" +
    "\010\016\031\023\034\064\026\001\002\000\010\016\031" +
    "\023\034\064\026\001\002\000\010\016\031\023\034\064" +
    "\026\001\002\000\010\016\031\023\034\064\026\001\002" +
    "\000\010\016\031\023\034\064\026\001\002\000\074\012" +
    "\uffcd\015\047\016\045\017\044\020\050\021\042\022\041" +
    "\026\uffcd\030\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\041" +
    "\uffcd\043\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\071\uffcd\001\002\000\074\012\uffce\015\047" +
    "\016\045\017\044\020\050\021\042\022\041\026\uffce\030" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\043\uffce" +
    "\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\071\uffce\001\002\000\074\012\uffcc\015\047\016\045\017" +
    "\044\020\050\021\042\022\041\026\uffcc\030\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\041\uffcc\043\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\071\uffcc\001" +
    "\002\000\114\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\012\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\042\022" +
    "\041\024\uffd5\026\uffd5\030\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\041\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\071\uffd5\001" +
    "\002\000\114\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\015\uffd8\016\uffd8\017\044\020\050\021\042\022" +
    "\041\024\uffd8\026\uffd8\030\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\071\uffd8\001" +
    "\002\000\074\012\uffd0\015\047\016\045\017\044\020\050" +
    "\021\042\022\041\026\uffd0\030\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\041\uffd0\043\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\071\uffd0\001\002\000\114" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\015" +
    "\uffd7\016\uffd7\017\044\020\050\021\042\022\041\024\uffd7" +
    "\026\uffd7\030\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\041" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\071\uffd7\001\002\000\114" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\042\022\041\024\uffd6" +
    "\026\uffd6\030\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\041" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\071\uffd6\001\002\000\074" +
    "\012\uffcf\015\047\016\045\017\044\020\050\021\042\022" +
    "\041\026\uffcf\030\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\041\uffcf\043\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\071\uffcf\001\002\000\114\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\026\uffd4\030" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\041\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\071\uffd4\001\002\000\114\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\026\uffd3\030" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\041\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\071\uffd3\001\002\000\052\026\ufff0\030" +
    "\ufff0\033\ufff0\035\ufff0\036\ufff0\043\ufff0\045\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\071\ufff0\001\002" +
    "\000\006\024\072\071\071\001\002\000\006\011\075\024" +
    "\uffe4\001\002\000\004\012\uffdd\001\002\000\004\024\074" +
    "\001\002\000\004\012\uffdc\001\002\000\004\071\071\001" +
    "\002\000\004\024\uffe5\001\002\000\020\015\047\016\045" +
    "\017\044\020\050\021\042\022\041\024\100\001\002\000" +
    "\114\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024" +
    "\uffd2\026\uffd2\030\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\071\uffd2\001\002\000" +
    "\114\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9" +
    "\015\uffd9\016\uffd9\017\044\020\050\021\042\022\041\024" +
    "\uffd9\026\uffd9\030\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\041\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\071\uffd9\001\002\000" +
    "\004\070\103\001\002\000\034\030\014\033\015\043\010" +
    "\047\007\051\006\053\024\054\012\056\104\057\023\061" +
    "\011\062\022\063\013\071\020\001\002\000\004\023\110" +
    "\001\002\000\034\030\014\033\015\043\010\047\007\051" +
    "\006\053\024\054\012\057\023\060\107\061\011\062\022" +
    "\063\013\071\020\001\002\000\052\026\ufffe\030\ufffe\033" +
    "\ufffe\035\ufffe\036\ufffe\043\ufffe\045\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\071\ufffe\001\002\000\052" +
    "\026\uffed\030\uffed\033\uffed\035\uffed\036\uffed\043\uffed\045" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\071" +
    "\uffed\001\002\000\004\071\111\001\002\000\004\070\116" +
    "\001\002\000\004\024\113\001\002\000\032\030\014\033" +
    "\015\043\010\047\007\051\006\053\024\054\012\057\023" +
    "\061\011\062\022\063\013\071\020\001\002\000\034\030" +
    "\014\033\015\043\010\047\007\051\006\053\024\054\012" +
    "\057\023\060\115\061\011\062\022\063\013\071\020\001" +
    "\002\000\052\026\uffec\030\uffec\033\uffec\035\uffec\036\uffec" +
    "\043\uffec\045\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\057\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\071\uffec\001\002\000\006\011\117\024\uffe6\001" +
    "\002\000\004\071\111\001\002\000\004\024\uffe7\001\002" +
    "\000\052\026\uffe9\030\uffe9\033\uffe9\035\uffe9\036\uffe9\043" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\071\uffe9\001\002\000\004\071\020\001\002\000\006" +
    "\027\uffdb\031\uffdb\001\002\000\022\016\031\023\034\064" +
    "\026\065\027\066\030\067\040\071\033\072\035\001\002" +
    "\000\004\012\126\001\002\000\052\026\ufffb\030\ufffb\033" +
    "\ufffb\035\ufffb\036\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\062\ufffb\063\ufffb\071\ufffb\001\002\000\004" +
    "\002\000\001\002\000\004\034\132\001\002\000\030\004" +
    "\046\005\043\006\052\007\053\010\051\015\047\016\045" +
    "\017\044\020\050\021\042\022\041\001\002\000\032\030" +
    "\014\033\015\043\010\047\007\051\006\053\024\054\012" +
    "\057\023\061\011\062\022\063\013\071\020\001\002\000" +
    "\036\030\014\033\015\035\135\036\134\043\010\047\007" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\013\071\020\001\002\000\032\030\014\033\015\043\010" +
    "\047\007\051\006\053\024\054\012\057\023\061\011\062" +
    "\022\063\013\071\020\001\002\000\052\026\ufffa\030\ufffa" +
    "\033\ufffa\035\ufffa\036\ufffa\043\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\071\ufffa\001\002\000" +
    "\034\030\014\033\015\035\137\043\010\047\007\051\006" +
    "\053\024\054\012\057\023\061\011\062\022\063\013\071" +
    "\020\001\002\000\052\026\ufff9\030\ufff9\033\ufff9\035\ufff9" +
    "\036\ufff9\043\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\071\ufff9\001\002\000\004\031\141\001" +
    "\002\000\004\070\142\001\002\000\004\032\143\001\002" +
    "\000\022\016\031\023\034\064\026\065\027\066\030\067" +
    "\040\071\033\072\035\001\002\000\004\012\145\001\002" +
    "\000\052\026\ufffc\030\ufffc\033\ufffc\035\ufffc\036\ufffc\043" +
    "\ufffc\045\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\054\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\071\ufffc\001\002\000\052\026\uffe8\030\uffe8\033\uffe8" +
    "\035\uffe8\036\uffe8\043\uffe8\045\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\071\uffe8\001\002\000\034\030" +
    "\014\033\015\043\010\047\007\051\006\053\024\054\012" +
    "\056\150\057\023\061\011\062\022\063\013\071\020\001" +
    "\002\000\004\023\153\001\002\000\034\030\014\033\015" +
    "\043\010\047\007\051\006\053\024\054\012\055\152\057" +
    "\023\061\011\062\022\063\013\071\020\001\002\000\052" +
    "\026\uffef\030\uffef\033\uffef\035\uffef\036\uffef\043\uffef\045" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\071" +
    "\uffef\001\002\000\004\071\111\001\002\000\004\024\155" +
    "\001\002\000\032\030\014\033\015\043\010\047\007\051" +
    "\006\053\024\054\012\057\023\061\011\062\022\063\013" +
    "\071\020\001\002\000\034\030\014\033\015\043\010\047" +
    "\007\051\006\053\024\054\012\055\157\057\023\061\011" +
    "\062\022\063\013\071\020\001\002\000\052\026\uffee\030" +
    "\uffee\033\uffee\035\uffee\036\uffee\043\uffee\045\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\071\uffee\001\002" +
    "\000\004\023\161\001\002\000\006\024\162\071\071\001" +
    "\002\000\052\026\uffeb\030\uffeb\033\uffeb\035\uffeb\036\uffeb" +
    "\043\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\071\uffeb\001\002\000\004\024\164\001\002\000" +
    "\052\026\uffea\030\uffea\033\uffea\035\uffea\036\uffea\043\uffea" +
    "\045\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\071\uffea\001\002\000\004\027\166\001\002\000\010\016" +
    "\031\023\034\064\026\001\002\000\020\015\047\016\045" +
    "\017\044\020\050\021\042\022\041\044\170\001\002\000" +
    "\010\016\031\023\034\064\026\001\002\000\022\015\047" +
    "\016\045\017\044\020\050\021\042\022\041\041\172\046" +
    "\173\001\002\000\034\030\014\033\015\043\010\045\202" +
    "\047\007\051\006\053\024\054\012\057\023\061\011\062" +
    "\022\063\013\071\020\001\002\000\010\016\031\023\034" +
    "\064\026\001\002\000\020\015\047\016\045\017\044\020" +
    "\050\021\042\022\041\041\175\001\002\000\034\030\014" +
    "\033\015\043\010\045\177\047\007\051\006\053\024\054" +
    "\012\057\023\061\011\062\022\063\013\071\020\001\002" +
    "\000\034\030\014\033\015\043\010\045\200\047\007\051" +
    "\006\053\024\054\012\057\023\061\011\062\022\063\013" +
    "\071\020\001\002\000\052\026\ufff5\030\ufff5\033\ufff5\035" +
    "\ufff5\036\ufff5\043\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\071\ufff5\001\002\000\052\026\ufff7" +
    "\030\ufff7\033\ufff7\035\ufff7\036\ufff7\043\ufff7\045\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\071\ufff7\001" +
    "\002\000\034\030\014\033\015\043\010\045\203\047\007" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\013\071\020\001\002\000\052\026\ufff6\030\ufff6\033\ufff6" +
    "\035\ufff6\036\ufff6\043\ufff6\045\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\071\ufff6\001\002\000\052\026" +
    "\ufff8\030\ufff8\033\ufff8\035\ufff8\036\ufff8\043\ufff8\045\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\071\ufff8" +
    "\001\002\000\004\041\205\001\002\000\034\030\014\033" +
    "\015\043\010\047\007\050\207\051\006\053\024\054\012" +
    "\057\023\061\011\062\022\063\013\071\020\001\002\000" +
    "\034\030\014\033\015\043\010\047\007\050\210\051\006" +
    "\053\024\054\012\057\023\061\011\062\022\063\013\071" +
    "\020\001\002\000\052\026\ufff2\030\ufff2\033\ufff2\035\ufff2" +
    "\036\ufff2\043\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\071\ufff2\001\002\000\052\026\ufff4\030" +
    "\ufff4\033\ufff4\035\ufff4\036\ufff4\043\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\071\ufff4\001\002" +
    "\000\034\030\014\033\015\043\010\047\007\051\006\052" +
    "\214\053\024\054\012\057\023\061\011\062\022\063\013" +
    "\071\020\001\002\000\010\016\031\023\034\064\026\001" +
    "\002\000\052\026\ufff1\030\ufff1\033\ufff1\035\ufff1\036\ufff1" +
    "\043\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\071\ufff1\001\002\000\010\016\031\023\034\064" +
    "\026\001\002\000\052\026\ufff3\030\ufff3\033\ufff3\035\ufff3" +
    "\036\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\071\ufff3\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\015\004\020\005\016\001\001\000\010\003\210" +
    "\004\020\005\016\001\001\000\006\011\130\012\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\137\001\001\000\006\011" +
    "\130\012\127\001\001\000\006\004\105\005\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\035\011\036" +
    "\012\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\065\001\001\000\004\011" +
    "\064\001\001\000\004\011\063\001\001\000\004\011\062" +
    "\001\001\000\004\011\061\001\001\000\004\011\060\001" +
    "\001\000\004\011\057\001\001\000\004\011\056\001\001" +
    "\000\004\011\055\001\001\000\004\011\054\001\001\000" +
    "\004\011\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\104\004\020\005\016\001\001\000\002\001\001\000\006" +
    "\004\105\005\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\113\004\020\005\016\001\001\000" +
    "\006\004\105\005\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\122\001\001\000\002\001\001" +
    "\000\010\006\124\011\036\012\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\132\004\020\005\016\001" +
    "\001\000\006\004\105\005\016\001\001\000\010\003\135" +
    "\004\020\005\016\001\001\000\002\001\001\000\006\004" +
    "\105\005\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\143\011" +
    "\036\012\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\150\004\020\005\016\001" +
    "\001\000\002\001\001\000\006\004\105\005\016\001\001" +
    "\000\002\001\001\000\004\007\153\001\001\000\002\001" +
    "\001\000\010\003\155\004\020\005\016\001\001\000\006" +
    "\004\105\005\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\166\001\001\000\002\001\001\000\004\011\170\001\001" +
    "\000\002\001\001\000\010\003\200\004\020\005\016\001" +
    "\001\000\004\011\173\001\001\000\002\001\001\000\010" +
    "\003\175\004\020\005\016\001\001\000\006\004\105\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\105\005\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\205\004\020\005\016" +
    "\001\001\000\006\004\105\005\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\105\005\016\001\001" +
    "\000\006\011\130\012\212\001\001\000\002\001\001\000" +
    "\006\011\130\012\214\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public LinkedList<Statement> AST;

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= START statements END 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= START END 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= ENTER name_list AS TYPEDEF WITH_VALUE expr DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= name_list ARROW expr DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IF logical THEN statements ENDIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF logical THEN statements ELSE statements ENDIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= FOR ID ARROW numeric TO numeric DO statements ENDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= FOR ID ARROW numeric TO numeric WITHINCREMENTAL numeric DO statements ENDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= FOR ID ARROW numeric TO numeric DO ENDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= FOR ID ARROW numeric TO numeric WITHINCREMENTAL numeric DO ENDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= WHILE logical DO statements ENDWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= REPEAT statements ENDREPEAT logical 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= WHILE logical DO ENDWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= REPEAT ENDREPEAT logical 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= RETURN expr DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= DEFPROCEDURE FUNCID statements ENDPROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= DEFPROCEDURE FUNCID PARAMS PARSTART params_list PAREND statements ENDPROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= FUNCTION FUNCID TYPEDEF statements ENDFUNCTION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= FUNCTION FUNCID TYPEDEF PARAMS PARSTART params_list PAREND statements ENDFUNCTION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= EXEC FUNCID PARSTART PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= EXEC FUNCID PARSTART args_list PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= PRINT STR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= PRINTLN STR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params_list ::= ID TYPEDEF COMMA params_list 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // params_list ::= ID TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args_list ::= ID COMMA args_list 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // args_list ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= logical 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= STR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= FUNCID PARSTART PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= FUNCID PARSTART args_list PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // name_list ::= ID COMMA name_list 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // name_list ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // numeric ::= SUBSTRACT numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numeric ::= numeric ADD numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numeric ::= numeric SUBSTRACT numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // numeric ::= numeric MULTIPLY numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // numeric ::= numeric DIVISION numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // numeric ::= numeric POW numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // numeric ::= numeric MODULE numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // numeric ::= PARSTART numeric PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numeric ::= NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logical ::= numeric MAJOR numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logical ::= numeric MINOR numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical ::= numeric MAJOREQUALS numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical ::= numeric MINOREQUALS numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical ::= numeric EQUALS numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
