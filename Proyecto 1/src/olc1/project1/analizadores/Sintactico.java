
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1.project1.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1.project1.instructions.Statement;
import olc1.project1.instructions.Operation;
import olc1.project1.instructions.Param;
import olc1.project1.instructions.Assignment;
import olc1.project1.instructions.EnumOperations;
import olc1.project1.instructions.EnumTerminals;
import olc1.project1.instructions.EnumUnitaryOperations;
import olc1.project1.instructions.EnumTypes;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\006\000\002\004\007\000\002\004\011\000" +
    "\002\004\010\000\002\004\012\000\002\004\013\000\002" +
    "\004\015\000\002\004\012\000\002\004\014\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\004\012\000" +
    "\002\004\007\000\002\004\013\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\007\000\002\004" +
    "\011\000\002\007\006\000\002\007\004\000\002\010\005" +
    "\000\002\010\003\000\002\006\005\000\002\006\003\000" +
    "\002\011\005\000\002\011\006\000\002\012\007\000\002" +
    "\012\006\000\002\013\010\000\002\013\007\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\031\005\001\002\000\004\002\262\001" +
    "\002\000\036\032\026\034\014\037\015\044\022\047\010" +
    "\053\006\055\007\057\025\060\012\063\024\065\011\066" +
    "\023\067\013\075\020\001\002\000\022\012\035\022\032" +
    "\027\034\070\027\071\030\072\031\073\037\075\033\001" +
    "\002\000\036\034\014\037\015\044\022\047\010\053\006" +
    "\055\007\056\251\057\025\060\012\063\024\065\011\066" +
    "\023\067\013\075\020\001\002\000\004\075\231\001\002" +
    "\000\004\076\217\001\002\000\004\076\206\001\002\000" +
    "\022\012\035\022\032\027\034\070\027\071\030\072\031" +
    "\073\037\075\033\001\002\000\004\075\020\001\002\000" +
    "\022\012\035\022\032\027\034\070\027\071\030\072\031" +
    "\073\037\075\033\001\002\000\036\032\151\034\014\037" +
    "\015\044\022\047\010\053\006\055\007\057\025\060\012" +
    "\063\024\065\011\066\023\067\013\075\020\001\002\000" +
    "\006\015\144\033\145\001\002\000\010\015\uffdf\033\uffdf" +
    "\035\uffdf\001\002\000\062\017\ufffd\032\ufffd\034\ufffd\037" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046\ufffd\047\ufffd" +
    "\051\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\075\ufffd\001\002\000\022\012\035\022\032\027\034\070" +
    "\027\071\030\072\031\073\037\075\033\001\002\000\022" +
    "\012\035\022\032\027\034\070\027\071\030\072\031\073" +
    "\037\075\033\001\002\000\004\076\101\001\002\000\022" +
    "\012\035\022\032\027\034\070\027\071\030\072\031\073" +
    "\037\075\033\001\002\000\004\002\uffff\001\002\000\136" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\032" +
    "\uffd7\034\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\075" +
    "\uffd7\001\002\000\136\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\030\uffd6\032\uffd6\034\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\075\uffd6\001\002\000\136\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\032\uffd5\034\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\075\uffd5\001\002" +
    "\000\022\012\035\022\032\027\034\070\027\071\030\072" +
    "\031\073\037\075\033\001\002\000\136\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\030\uffd8\032\uffd8\034\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\067\uffd8\075\uffd8\001\002\000" +
    "\022\012\035\022\032\027\034\070\027\071\030\072\031" +
    "\073\037\075\033\001\002\000\022\012\035\022\032\027" +
    "\034\070\027\071\030\072\031\073\037\075\033\001\002" +
    "\000\040\004\047\005\043\006\053\007\055\010\052\011" +
    "\044\013\054\014\040\016\056\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\001\002\000\136\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\032\uffd4\034\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\075\uffd4\001\002" +
    "\000\022\012\035\022\032\027\034\070\027\071\030\072" +
    "\031\073\037\075\033\001\002\000\022\012\035\022\032" +
    "\027\034\070\027\071\030\072\031\073\037\075\033\001" +
    "\002\000\022\012\035\022\032\027\034\070\027\071\030" +
    "\072\031\073\037\075\033\001\002\000\022\012\035\022" +
    "\032\027\034\070\027\071\030\072\031\073\037\075\033" +
    "\001\002\000\022\012\035\022\032\027\034\070\027\071" +
    "\030\072\031\073\037\075\033\001\002\000\022\012\035" +
    "\022\032\027\034\070\027\071\030\072\031\073\037\075" +
    "\033\001\002\000\022\012\035\022\032\027\034\070\027" +
    "\071\030\072\031\073\037\075\033\001\002\000\022\012" +
    "\035\022\032\027\034\070\027\071\030\072\031\073\037" +
    "\075\033\001\002\000\022\012\035\022\032\027\034\070" +
    "\027\071\030\072\031\073\037\075\033\001\002\000\022" +
    "\012\035\022\032\027\034\070\027\071\030\072\031\073" +
    "\037\075\033\001\002\000\022\012\035\022\032\027\034" +
    "\070\027\071\030\072\031\073\037\075\033\001\002\000" +
    "\022\012\035\022\032\027\034\070\027\071\030\072\031" +
    "\073\037\075\033\001\002\000\022\012\035\022\032\027" +
    "\034\070\027\071\030\072\031\073\037\075\033\001\002" +
    "\000\022\012\035\022\032\027\034\070\027\071\030\072" +
    "\031\073\037\075\033\001\002\000\062\017\uffee\032\uffee" +
    "\034\uffee\037\uffee\041\uffee\042\uffee\043\uffee\044\uffee\046" +
    "\uffee\047\uffee\051\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\075\uffee\001\002\000\136\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\054\014\040\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\030\uffc8\032\uffc8\034\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\075\uffc8\001\002\000" +
    "\136\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\050\022\046\023\045\024\051\025\041\026\042\030\uffc4" +
    "\032\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\075\uffc4\001\002\000\136\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\054\014\040\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\050\022\046\023\045\024\051\025" +
    "\041\026\042\030\uffc9\032\uffc9\034\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\075\uffc9\001\002\000\136\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\054\014" +
    "\040\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\050\022\046" +
    "\023\045\024\051\025\041\026\042\030\uffc7\032\uffc7\034" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\075\uffc7\001" +
    "\002\000\136\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\041\026\042" +
    "\030\uffce\032\uffce\034\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\061\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\075\uffce\001\002\000\136\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\045\024" +
    "\051\025\041\026\042\030\uffd1\032\uffd1\034\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\075\uffd1\001\002\000\136" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013" +
    "\054\014\040\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\050" +
    "\022\046\023\045\024\051\025\041\026\042\030\uffcb\032" +
    "\uffcb\034\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\075" +
    "\uffcb\001\002\000\136\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\045\024\051\025\041" +
    "\026\042\030\uffd0\032\uffd0\034\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\075\uffd0\001\002\000\136\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\041\026\042\030\uffcf\032\uffcf\034\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\075\uffcf\001\002" +
    "\000\136\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\013\054\014\040\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\050\022\046\023\045\024\051\025\041\026\042\030" +
    "\uffc6\032\uffc6\034\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\075\uffc6\001\002\000\136\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\013\054\014\040\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\050\022\046\023\045\024\051" +
    "\025\041\026\042\030\uffca\032\uffca\034\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\075\uffca\001\002\000\136\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\032\uffcc" +
    "\034\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\075\uffcc" +
    "\001\002\000\136\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\030\uffcd\032\uffcd\034\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\075\uffcd\001\002\000\136\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\030\uffc5\032\uffc5\034\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\075\uffc5\001\002\000" +
    "\136\004\047\005\043\006\053\007\055\010\052\011\044" +
    "\013\054\014\040\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\050\022\046\023\045\024\051\025\041\026\042\030\uffd2" +
    "\032\uffd2\034\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\075\uffd2\001\002\000\040\004\047\005\043\006\053\007" +
    "\055\010\052\011\044\013\054\014\040\021\050\022\046" +
    "\023\045\024\051\025\041\026\042\030\077\001\002\000" +
    "\136\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3" +
    "\032\uffc3\034\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\075\uffc3\001\002\000\136\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\045\024\051\025" +
    "\041\026\042\030\uffd3\032\uffd3\034\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\075\uffd3\001\002\000\004\074\102" +
    "\001\002\000\036\034\014\037\015\044\022\047\010\053" +
    "\006\055\007\057\025\060\012\062\103\063\024\065\011" +
    "\066\023\067\013\075\020\001\002\000\004\027\107\001" +
    "\002\000\036\034\014\037\015\044\022\047\010\053\006" +
    "\055\007\057\025\060\012\063\024\064\106\065\011\066" +
    "\023\067\013\075\020\001\002\000\062\017\ufffe\032\ufffe" +
    "\034\ufffe\037\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\046" +
    "\ufffe\047\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\075\ufffe\001\002\000\062\017\uffeb\032\uffeb" +
    "\034\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\046" +
    "\uffeb\047\uffeb\051\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\075\uffeb\001\002\000\004\075\110\001\002" +
    "\000\004\074\120\001\002\000\006\015\112\030\113\001" +
    "\002\000\004\075\116\001\002\000\034\034\014\037\015" +
    "\044\022\047\010\053\006\055\007\057\025\060\012\063" +
    "\024\065\011\066\023\067\013\075\020\001\002\000\036" +
    "\034\014\037\015\044\022\047\010\053\006\055\007\057" +
    "\025\060\012\063\024\064\115\065\011\066\023\067\013" +
    "\075\020\001\002\000\062\017\uffea\032\uffea\034\uffea\037" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\046\uffea\047\uffea" +
    "\051\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\075\uffea\001\002\000\004\074\117\001\002\000\006\015" +
    "\uffe4\030\uffe4\001\002\000\006\015\uffe3\030\uffe3\001\002" +
    "\000\040\004\047\005\043\006\053\007\055\010\052\011" +
    "\044\013\054\014\040\016\122\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\001\002\000\062\017\uffe8\032" +
    "\uffe8\034\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\075\uffe8\001\002\000\040\004\047\005" +
    "\043\006\053\007\055\010\052\011\044\013\054\014\040" +
    "\021\050\022\046\023\045\024\051\025\041\026\042\045" +
    "\124\001\002\000\004\017\126\001\002\000\010\017\135" +
    "\042\133\046\134\001\002\000\022\012\035\022\032\027" +
    "\034\070\027\071\030\072\031\073\037\075\033\001\002" +
    "\000\040\004\047\005\043\006\053\007\055\010\052\011" +
    "\044\013\054\014\040\020\130\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\001\002\000\004\040\131\001" +
    "\002\000\034\034\014\037\015\044\022\047\010\053\006" +
    "\055\007\057\025\060\012\063\024\065\011\066\023\067" +
    "\013\075\020\001\002\000\042\017\uffd9\034\014\037\015" +
    "\042\uffd9\044\022\046\uffd9\047\010\053\006\055\007\057" +
    "\025\060\012\063\024\065\011\066\023\067\013\075\020" +
    "\001\002\000\034\034\014\037\015\044\022\047\010\053" +
    "\006\055\007\057\025\060\012\063\024\065\011\066\023" +
    "\067\013\075\020\001\002\000\062\017\uffe6\032\uffe6\034" +
    "\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\075\uffe6\001\002\000\022\012\035\022\032\027" +
    "\034\070\027\071\030\072\031\073\037\075\033\001\002" +
    "\000\040\004\047\005\043\006\053\007\055\010\052\011" +
    "\044\013\054\014\040\020\137\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\001\002\000\004\040\140\001" +
    "\002\000\034\034\014\037\015\044\022\047\010\053\006" +
    "\055\007\057\025\060\012\063\024\065\011\066\023\067" +
    "\013\075\020\001\002\000\042\017\uffda\034\014\037\015" +
    "\042\uffda\044\022\046\uffda\047\010\053\006\055\007\057" +
    "\025\060\012\063\024\065\011\066\023\067\013\075\020" +
    "\001\002\000\036\034\014\037\015\044\022\046\143\047" +
    "\010\053\006\055\007\057\025\060\012\063\024\065\011" +
    "\066\023\067\013\075\020\001\002\000\062\017\uffe5\032" +
    "\uffe5\034\uffe5\037\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\046\uffe5\047\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\075\uffe5\001\002\000\004\075\150\001" +
    "\002\000\022\012\035\022\032\027\034\070\027\071\030" +
    "\072\031\073\037\075\033\001\002\000\040\004\047\005" +
    "\043\006\053\007\055\010\052\011\044\013\054\014\040" +
    "\016\147\021\050\022\046\023\045\024\051\025\041\026" +
    "\042\001\002\000\062\017\ufffb\032\ufffb\034\ufffb\037\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\046\ufffb\047\ufffb\051" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\075" +
    "\ufffb\001\002\000\010\015\uffe0\033\uffe0\035\uffe0\001\002" +
    "\000\004\002\000\001\002\000\040\004\047\005\043\006" +
    "\053\007\055\010\052\011\044\013\054\014\040\021\050" +
    "\022\046\023\045\024\051\025\041\026\042\040\153\001" +
    "\002\000\034\034\014\037\015\044\022\047\010\053\006" +
    "\055\007\057\025\060\012\063\024\065\011\066\023\067" +
    "\013\075\020\001\002\000\042\034\014\037\015\041\156" +
    "\042\155\043\157\044\022\047\010\053\006\055\007\057" +
    "\025\060\012\063\024\065\011\066\023\067\013\075\020" +
    "\001\002\000\034\034\014\037\015\044\022\047\010\053" +
    "\006\055\007\057\025\060\012\063\024\065\011\066\023" +
    "\067\013\075\020\001\002\000\062\017\ufffa\032\ufffa\034" +
    "\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa" +
    "\047\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\075\ufffa\001\002\000\022\012\035\022\032\027" +
    "\034\070\027\071\030\072\031\073\037\075\033\001\002" +
    "\000\010\041\163\042\161\043\162\001\002\000\034\034" +
    "\014\037\015\044\022\047\010\053\006\055\007\057\025" +
    "\060\012\063\024\065\011\066\023\067\013\075\020\001" +
    "\002\000\022\012\035\022\032\027\034\070\027\071\030" +
    "\072\031\073\037\075\033\001\002\000\062\017\ufff8\032" +
    "\ufff8\034\ufff8\037\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\046\ufff8\047\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\066\ufff8\067\ufff8\075\ufff8\001\002\000\040\004\047\005" +
    "\043\006\053\007\055\010\052\011\044\013\054\014\040" +
    "\021\050\022\046\023\045\024\051\025\041\026\042\040" +
    "\165\001\002\000\034\034\014\037\015\044\022\047\010" +
    "\053\006\055\007\057\025\060\012\063\024\065\011\066" +
    "\023\067\013\075\020\001\002\000\042\034\014\037\015" +
    "\041\uffdc\042\uffdc\043\uffdc\044\022\047\010\053\006\055" +
    "\007\057\025\060\012\063\024\065\011\066\023\067\013" +
    "\075\020\001\002\000\036\034\014\037\015\041\170\044" +
    "\022\047\010\053\006\055\007\057\025\060\012\063\024" +
    "\065\011\066\023\067\013\075\020\001\002\000\062\017" +
    "\ufff7\032\ufff7\034\ufff7\037\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\046\ufff7\047\ufff7\051\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\075\ufff7\001\002\000\040\004" +
    "\047\005\043\006\053\007\055\010\052\011\044\013\054" +
    "\014\040\021\050\022\046\023\045\024\051\025\041\026" +
    "\042\040\172\001\002\000\034\034\014\037\015\044\022" +
    "\047\010\053\006\055\007\057\025\060\012\063\024\065" +
    "\011\066\023\067\013\075\020\001\002\000\042\034\014" +
    "\037\015\041\uffdb\042\uffdb\043\uffdb\044\022\047\010\053" +
    "\006\055\007\057\025\060\012\063\024\065\011\066\023" +
    "\067\013\075\020\001\002\000\036\034\014\037\015\041" +
    "\175\044\022\047\010\053\006\055\007\057\025\060\012" +
    "\063\024\065\011\066\023\067\013\075\020\001\002\000" +
    "\062\017\ufff9\032\ufff9\034\ufff9\037\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\075\ufff9\001\002\000" +
    "\006\015\144\035\177\001\002\000\004\074\200\001\002" +
    "\000\004\036\201\001\002\000\022\012\035\022\032\027" +
    "\034\070\027\071\030\072\031\073\037\075\033\001\002" +
    "\000\040\004\047\005\043\006\053\007\055\010\052\011" +
    "\044\013\054\014\040\016\203\021\050\022\046\023\045" +
    "\024\051\025\041\026\042\001\002\000\062\017\ufffc\032" +
    "\ufffc\034\ufffc\037\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\046\ufffc\047\ufffc\051\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\075\ufffc\001\002\000\040\004\047\005" +
    "\043\006\053\007\055\010\052\011\044\013\054\014\040" +
    "\016\205\021\050\022\046\023\045\024\051\025\041\026" +
    "\042\001\002\000\062\017\uffe7\032\uffe7\034\uffe7\037\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\075" +
    "\uffe7\001\002\000\036\034\014\037\015\044\022\047\010" +
    "\053\006\055\007\057\025\060\012\062\207\063\024\065" +
    "\011\066\023\067\013\075\020\001\002\000\004\027\212" +
    "\001\002\000\036\034\014\037\015\044\022\047\010\053" +
    "\006\055\007\057\025\060\012\061\211\063\024\065\011" +
    "\066\023\067\013\075\020\001\002\000\062\017\uffed\032" +
    "\uffed\034\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\046\uffed\047\uffed\051\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\075\uffed\001\002\000\004\075\110\001" +
    "\002\000\006\015\112\030\214\001\002\000\034\034\014" +
    "\037\015\044\022\047\010\053\006\055\007\057\025\060" +
    "\012\063\024\065\011\066\023\067\013\075\020\001\002" +
    "\000\036\034\014\037\015\044\022\047\010\053\006\055" +
    "\007\057\025\060\012\061\216\063\024\065\011\066\023" +
    "\067\013\075\020\001\002\000\062\017\uffec\032\uffec\034" +
    "\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec" +
    "\047\uffec\051\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\075\uffec\001\002\000\004\027\222\001\002\000" +
    "\004\016\221\001\002\000\062\017\uffe9\032\uffe9\034\uffe9" +
    "\037\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\075\uffe9\001\002\000\024\012\035\022\032\027\034" +
    "\030\224\070\027\071\030\072\031\073\037\075\033\001" +
    "\002\000\006\015\226\030\227\001\002\000\004\016\uffde" +
    "\001\002\000\042\004\047\005\043\006\053\007\055\010" +
    "\052\011\044\013\054\014\040\015\uffe1\021\050\022\046" +
    "\023\045\024\051\025\041\026\042\030\uffe1\001\002\000" +
    "\022\012\035\022\032\027\034\070\027\071\030\072\031" +
    "\073\037\075\033\001\002\000\004\016\uffdd\001\002\000" +
    "\042\004\047\005\043\006\053\007\055\010\052\011\044" +
    "\013\054\014\040\015\uffe2\021\050\022\046\023\045\024" +
    "\051\025\041\026\042\030\uffe2\001\002\000\004\033\232" +
    "\001\002\000\022\012\035\022\032\027\034\070\027\071" +
    "\030\072\031\073\037\075\033\001\002\000\040\004\047" +
    "\005\043\006\053\007\055\010\052\011\044\013\054\014" +
    "\040\021\050\022\046\023\045\024\051\025\041\026\042" +
    "\050\234\001\002\000\022\012\035\022\032\027\034\070" +
    "\027\071\030\072\031\073\037\075\033\001\002\000\042" +
    "\004\047\005\043\006\053\007\055\010\052\011\044\013" +
    "\054\014\040\021\050\022\046\023\045\024\051\025\041" +
    "\026\042\045\237\052\236\001\002\000\022\012\035\022" +
    "\032\027\034\070\027\071\030\072\031\073\037\075\033" +
    "\001\002\000\036\034\014\037\015\044\022\047\010\051" +
    "\241\053\006\055\007\057\025\060\012\063\024\065\011" +
    "\066\023\067\013\075\020\001\002\000\036\034\014\037" +
    "\015\044\022\047\010\051\242\053\006\055\007\057\025" +
    "\060\012\063\024\065\011\066\023\067\013\075\020\001" +
    "\002\000\062\017\ufff4\032\ufff4\034\ufff4\037\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4\051\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\075\ufff4\001" +
    "\002\000\062\017\ufff6\032\ufff6\034\ufff6\037\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\046\ufff6\047\ufff6\051\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\075\ufff6\001" +
    "\002\000\040\004\047\005\043\006\053\007\055\010\052" +
    "\011\044\013\054\014\040\021\050\022\046\023\045\024" +
    "\051\025\041\026\042\045\244\001\002\000\036\034\014" +
    "\037\015\044\022\047\010\051\246\053\006\055\007\057" +
    "\025\060\012\063\024\065\011\066\023\067\013\075\020" +
    "\001\002\000\036\034\014\037\015\044\022\047\010\051" +
    "\247\053\006\055\007\057\025\060\012\063\024\065\011" +
    "\066\023\067\013\075\020\001\002\000\062\017\ufff3\032" +
    "\ufff3\034\ufff3\037\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\046\ufff3\047\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3" +
    "\066\ufff3\067\ufff3\075\ufff3\001\002\000\062\017\ufff5\032" +
    "\ufff5\034\ufff5\037\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\046\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\067\ufff5\075\ufff5\001\002\000\036\034\014\037" +
    "\015\044\022\047\010\053\006\055\007\056\253\057\025" +
    "\060\012\063\024\065\011\066\023\067\013\075\020\001" +
    "\002\000\022\012\035\022\032\027\034\070\027\071\030" +
    "\072\031\073\037\075\033\001\002\000\116\004\047\005" +
    "\043\006\053\007\055\010\052\011\044\013\054\014\040" +
    "\017\uffef\021\050\022\046\023\045\024\051\025\041\026" +
    "\042\032\uffef\034\uffef\037\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\046\uffef\047\uffef\051\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\075\uffef\001\002\000\022\012" +
    "\035\022\032\027\034\070\027\071\030\072\031\073\037" +
    "\075\033\001\002\000\116\004\047\005\043\006\053\007" +
    "\055\010\052\011\044\013\054\014\040\017\ufff1\021\050" +
    "\022\046\023\045\024\051\025\041\026\042\032\ufff1\034" +
    "\ufff1\037\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1" +
    "\047\ufff1\051\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\075\ufff1\001\002\000\040\004\047\005\043\006" +
    "\053\007\055\010\052\011\044\013\054\014\040\021\050" +
    "\022\046\023\045\024\051\025\041\026\042\045\256\001" +
    "\002\000\036\034\014\037\015\044\022\047\010\053\006" +
    "\054\260\055\007\057\025\060\012\063\024\065\011\066" +
    "\023\067\013\075\020\001\002\000\036\034\014\037\015" +
    "\044\022\047\010\053\006\054\261\055\007\057\025\060" +
    "\012\063\024\065\011\066\023\067\013\075\020\001\002" +
    "\000\062\017\ufff0\032\ufff0\034\ufff0\037\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\051\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\075\ufff0\001\002" +
    "\000\062\017\ufff2\032\ufff2\034\ufff2\037\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\046\ufff2\047\ufff2\051\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\075\ufff2\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\015\004\020\006\016\001\001\000\004\005\254" +
    "\001\001\000\010\003\247\004\020\006\016\001\001\000" +
    "\002\001\001\000\004\011\217\001\001\000\002\001\001" +
    "\000\004\005\203\001\001\000\004\006\175\001\001\000" +
    "\004\005\151\001\001\000\006\004\104\006\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\122\001\001\000\004\005\120\001\001\000\002" +
    "\001\001\000\004\005\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\077\001\001\000\002\001\001\000\004\005\075\001" +
    "\001\000\004\005\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\073\001\001\000\004\005\072\001" +
    "\001\000\004\005\071\001\001\000\004\005\070\001\001" +
    "\000\004\005\067\001\001\000\004\005\066\001\001\000" +
    "\004\005\065\001\001\000\004\005\064\001\001\000\004" +
    "\005\063\001\001\000\004\005\062\001\001\000\004\005" +
    "\061\001\001\000\004\005\060\001\001\000\004\005\057" +
    "\001\001\000\004\005\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\103\004\020\006\016\001\001\000\002\001\001\000\006" +
    "\004\104\006\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\113\004\020\006" +
    "\016\001\001\000\006\004\104\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\124\001\001\000\002\001\001\000\004\005" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\131\004\020\006\016\001\001\000\006\004\104\006" +
    "\016\001\001\000\010\003\141\004\020\006\016\001\001" +
    "\000\002\001\001\000\004\005\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\140\004\020\006\016" +
    "\001\001\000\006\004\104\006\016\001\001\000\006\004" +
    "\104\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\153\004\020\006\016\001\001\000\010\004" +
    "\104\006\016\012\157\001\001\000\010\003\173\004\020" +
    "\006\016\001\001\000\002\001\001\000\004\005\170\001" +
    "\001\000\002\001\001\000\010\003\166\004\020\006\016" +
    "\001\001\000\004\005\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\165\004\020\006\016\001\001" +
    "\000\006\004\104\006\016\001\001\000\006\004\104\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\172\004\020\006\016\001\001\000\006\004\104\006" +
    "\016\001\001\000\006\004\104\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\207\004\020\006\016\001\001\000\002\001\001\000\006" +
    "\004\104\006\016\001\001\000\002\001\001\000\004\007" +
    "\212\001\001\000\002\001\001\000\010\003\214\004\020" +
    "\006\016\001\001\000\006\004\104\006\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\224\010\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\232\001\001\000\002\001\001\000\004" +
    "\005\234\001\001\000\002\001\001\000\004\005\242\001" +
    "\001\000\010\003\237\004\020\006\016\001\001\000\006" +
    "\004\104\006\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\244\004\020\006\016" +
    "\001\001\000\006\004\104\006\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\104\006\016\001\001" +
    "\000\004\005\251\001\001\000\002\001\001\000\004\005" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\256\004\020\006\016\001\001\000\006\004\104\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public LinkedList<Statement> AST;

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= START statements END 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.AST=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= START END 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Statement>(); RESULT.add(s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= ENTER name_list AS TYPEDEF WITH_VALUE expr DOTCOMMA 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Assignment(n, t, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= name_list ARROW expr DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IF expr THEN statements ENDIF 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF expr THEN statements ELSE statements ENDIF 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF expr THEN statements elifs ENDIF 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF expr THEN statements elifs ELSE statements ENDIF 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= FOR ID ARROW expr TO expr DO statements ENDFOR 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= FOR ID ARROW expr TO expr WITHINCREMENTAL expr DO statements ENDFOR 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= FOR ID ARROW expr TO expr DO ENDFOR 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= FOR ID ARROW expr TO expr WITHINCREMENTAL expr DO ENDFOR 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= WHILE expr DO statements ENDWHILE 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= REPEAT statements ENDREPEAT expr 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WHILE expr DO ENDWHILE 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= REPEAT ENDREPEAT expr 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= RETURN expr DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= DEFPROCEDURE FUNCID statements ENDPROCEDURE 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= DEFPROCEDURE FUNCID PARAMS PARSTART params_list PAREND statements ENDPROCEDURE 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= FUNCTION FUNCID TYPEDEF statements ENDFUNCTION 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= FUNCTION FUNCID TYPEDEF PARAMS PARSTART params_list PAREND statements ENDFUNCTION 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= EXEC func DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= PRINT expr DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= PRINTLN expr DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= SWITCH expr DO cases ENDSWITCH 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= SWITCH expr DO cases ELSE statements ENDSWITCH 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params_list ::= params_list COMMA ID TYPEDEF 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = p; RESULT.add(new Param(i, t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params_list ::= ID TYPEDEF 
            {
              LinkedList<Param> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Param>(); RESULT.add(new Param(i, t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // args_list ::= args_list COMMA expr 
            {
              LinkedList<Operation> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operation> a = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // args_list ::= expr 
            {
              LinkedList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Operation>(); RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // name_list ::= name_list COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n; RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // name_list ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<String>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func ::= FUNCID PARSTART PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // func ::= FUNCID PARSTART args_list PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elifs ::= elifs ELIF expr THEN statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elifs",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elifs ::= ELIF expr THEN statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elifs",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cases ::= cases OPENQUESTION expr CLOSEQUESTION THEN statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cases ::= OPENQUESTION expr CLOSEQUESTION THEN statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(i, EnumTerminals.ID);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NUM 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(n, EnumTerminals.NUM);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= STR 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(s, EnumTerminals.STR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(b, EnumTerminals.BOOLEAN);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= CHAR 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(c, EnumTerminals.CHAR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= SUBSTRACT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(e, EnumUnitaryOperations.NEGATIVE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(e, EnumUnitaryOperations.NOT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr ADD expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.ADD, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr SUBSTRACT expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.SUBSTRACT, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MULTIPLY expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MULTIPLY, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr DIVISION expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.DIVISION, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr POW expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.POW, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr MODULE expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MODULE, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MAJOR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MAJOR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr MINOR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MINOR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MAJOREQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MAJOREQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr MINOREQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MINOREQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr EQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.EQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr NOTEQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.NOTEQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.AND, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.OR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= PARSTART expr PAREND 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
