
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1.project1.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1.project1.errors.SintaxError;
import olc1.project1.instructions.Statement;
import olc1.project1.instructions.Operation;
import olc1.project1.instructions.Param;
import olc1.project1.instructions.Declaration;
import olc1.project1.instructions.Assignment;
import olc1.project1.instructions.While;
import olc1.project1.instructions.For;
import olc1.project1.instructions.Repeat;
import olc1.project1.instructions.Print;
import olc1.project1.instructions.Println;
import olc1.project1.instructions.Return;
import olc1.project1.instructions.Procedure;
import olc1.project1.instructions.Function;
import olc1.project1.instructions.Case;
import olc1.project1.instructions.Elif;
import olc1.project1.instructions.If;
import olc1.project1.instructions.Switch;
import olc1.project1.instructions.Execute;
import olc1.project1.instructions.EnumOperations;
import olc1.project1.instructions.EnumTerminals;
import olc1.project1.instructions.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\006" +
    "\000\002\004\003\000\002\004\003\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\005\000\002" +
    "\004\005\000\002\004\006\000\002\004\012\000\002\004" +
    "\007\000\002\004\013\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\007\000\002\004\012\000" +
    "\002\004\004\000\002\020\007\000\002\020\011\000\002" +
    "\020\010\000\002\020\012\000\002\021\013\000\002\021" +
    "\015\000\002\021\012\000\002\021\014\000\002\007\006" +
    "\000\002\007\004\000\002\010\005\000\002\010\003\000" +
    "\002\006\005\000\002\006\003\000\002\011\005\000\002" +
    "\011\006\000\002\012\007\000\002\012\006\000\002\013" +
    "\010\000\002\013\007\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\007\000\002\014" +
    "\007\000\002\014\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\004\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\031\005\001\002\000\004\002\300\001" +
    "\002\000\036\003\023\034\020\037\016\044\015\047\027" +
    "\053\012\055\030\057\013\060\011\063\014\065\006\066" +
    "\024\067\022\075\017\001\002\000\004\075\117\001\002" +
    "\000\064\003\ufffe\017\ufffe\032\ufffe\034\ufffe\037\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\046\ufffe\047\ufffe\051\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\075\ufffe" +
    "\001\002\000\006\015\157\033\273\001\002\000\004\075" +
    "\262\001\002\000\024\012\047\022\042\027\046\065\037" +
    "\070\035\071\040\072\041\073\052\075\045\001\002\000" +
    "\024\012\047\022\042\027\046\065\037\070\035\071\040" +
    "\072\041\073\052\075\045\001\002\000\004\075\234\001" +
    "\002\000\024\012\047\022\042\027\046\065\037\070\035" +
    "\071\040\072\041\073\052\075\045\001\002\000\024\012" +
    "\047\022\042\027\046\065\037\070\035\071\040\072\041" +
    "\073\052\075\045\001\002\000\010\015\uffdd\033\uffdd\035" +
    "\uffdd\001\002\000\004\075\017\001\002\000\064\003\ufffb" +
    "\017\ufffb\032\ufffb\034\ufffb\037\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\075\ufffb\001\002\000\024" +
    "\012\047\022\042\027\046\065\037\070\035\071\040\072" +
    "\041\073\052\075\045\001\002\000\004\016\153\001\002" +
    "\000\024\012\047\022\042\027\046\065\037\070\035\071" +
    "\040\072\041\073\052\075\045\001\002\000\064\003\ufffa" +
    "\017\ufffa\032\ufffa\034\ufffa\037\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\046\ufffa\047\ufffa\051\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\075\ufffa\001\002\000\040" +
    "\003\023\032\150\034\020\037\016\044\015\047\027\053" +
    "\012\055\030\057\013\060\011\063\014\065\006\066\024" +
    "\067\022\075\017\001\002\000\004\075\131\001\002\000" +
    "\040\003\023\034\020\037\016\044\015\047\027\053\012" +
    "\055\030\056\031\057\013\060\011\063\014\065\006\066" +
    "\024\067\022\075\017\001\002\000\024\012\047\022\042" +
    "\027\046\065\037\070\035\071\040\072\041\073\052\075" +
    "\045\001\002\000\040\003\023\034\020\037\016\044\015" +
    "\047\027\053\012\055\030\056\034\057\013\060\011\063" +
    "\014\065\006\066\024\067\022\075\017\001\002\000\064" +
    "\003\uffff\017\uffff\032\uffff\034\uffff\037\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\046\uffff\047\uffff\051\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\075\uffff\001\002" +
    "\000\024\012\047\022\042\027\046\065\037\070\035\071" +
    "\040\072\041\073\052\075\045\001\002\000\142\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca\032" +
    "\uffca\034\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\075" +
    "\uffca\077\uffca\001\002\000\142\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\030\uffd6\032\uffd6\034\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\075\uffd6\077\uffd6\001" +
    "\002\000\004\075\117\001\002\000\142\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\032\uffbf\034" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\075\uffbf\077" +
    "\uffbf\001\002\000\142\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\030\uffc1\032\uffc1\034\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\075\uffc1\077\uffc1\001\002\000" +
    "\024\012\047\022\042\027\046\065\037\070\035\071\040" +
    "\072\041\073\052\075\045\001\002\000\142\003\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\030\uffd3\032\uffd3" +
    "\034\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\075\uffd3" +
    "\077\uffd3\001\002\000\142\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\030\uffd4\032\uffd4\034\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\075\uffd4\077\uffd4\001\002" +
    "\000\142\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\030\uffc0\032\uffc0\034\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\075\uffc0\077\uffc0\001\002\000\024\012\047" +
    "\022\042\027\046\065\037\070\035\071\040\072\041\073" +
    "\052\075\045\001\002\000\024\012\047\022\042\027\046" +
    "\065\037\070\035\071\040\072\041\073\052\075\045\001" +
    "\002\000\120\003\ufff7\004\062\005\056\006\066\007\070" +
    "\010\065\011\057\013\067\014\053\017\ufff7\021\063\022" +
    "\061\023\060\024\064\025\054\026\055\032\ufff7\034\ufff7" +
    "\037\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\047" +
    "\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\075\ufff7\001\002\000\142\003\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\030\uffd5\032\uffd5\034\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\075\uffd5\077\uffd5\001" +
    "\002\000\142\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\030\uffbe\032\uffbe\034\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\075\uffbe\077\uffbe\001\002\000\024\012" +
    "\047\022\042\027\046\065\037\070\035\071\040\072\041" +
    "\073\052\075\045\001\002\000\004\076\107\001\002\000" +
    "\004\076\104\001\002\000\024\012\047\022\042\027\046" +
    "\065\037\070\035\071\040\072\041\073\052\075\045\001" +
    "\002\000\024\012\047\022\042\027\046\065\037\070\035" +
    "\071\040\072\041\073\052\075\045\001\002\000\024\012" +
    "\047\022\042\027\046\065\037\070\035\071\040\072\041" +
    "\073\052\075\045\001\002\000\024\012\047\022\042\027" +
    "\046\065\037\070\035\071\040\072\041\073\052\075\045" +
    "\001\002\000\024\012\047\022\042\027\046\065\037\070" +
    "\035\071\040\072\041\073\052\075\045\001\002\000\024" +
    "\012\047\022\042\027\046\065\037\070\035\071\040\072" +
    "\041\073\052\075\045\001\002\000\024\012\047\022\042" +
    "\027\046\065\037\070\035\071\040\072\041\073\052\075" +
    "\045\001\002\000\024\012\047\022\042\027\046\065\037" +
    "\070\035\071\040\072\041\073\052\075\045\001\002\000" +
    "\024\012\047\022\042\027\046\065\037\070\035\071\040" +
    "\072\041\073\052\075\045\001\002\000\024\012\047\022" +
    "\042\027\046\065\037\070\035\071\040\072\041\073\052" +
    "\075\045\001\002\000\024\012\047\022\042\027\046\065" +
    "\037\070\035\071\040\072\041\073\052\075\045\001\002" +
    "\000\142\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\013\067\014\053\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\063\022\061\023\060\024\064\025\054\026" +
    "\055\030\uffc6\032\uffc6\034\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\075\uffc6\077\uffc6\001\002\000\142\003\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\063" +
    "\022\061\023\060\024\064\025\054\026\055\030\uffc2\032" +
    "\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\075" +
    "\uffc2\077\uffc2\001\002\000\142\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\067\014\053\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\063\022\061\023\060" +
    "\024\064\025\054\026\055\030\uffc7\032\uffc7\034\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\067\uffc7\075\uffc7\077\uffc7\001" +
    "\002\000\142\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\013\067\014\053\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\063\022\061\023\060\024\064\025\054" +
    "\026\055\030\uffc5\032\uffc5\034\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\075\uffc5\077\uffc5\001\002\000\142\003" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\054\026\055\030\uffcd" +
    "\032\uffcd\034\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\075\uffcd\077\uffcd\001\002\000\142\003\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\060\024\064\025\054\026\055\030\uffd0\032\uffd0\034\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\075\uffd0\077\uffd0" +
    "\001\002\000\142\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\067\014\053\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\030\uffc9\032\uffc9\034\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\075\uffc9\077\uffc9\001\002\000\142" +
    "\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\060\024\064\025\054\026\055\030" +
    "\uffcf\032\uffcf\034\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\075\uffcf\077\uffcf\001\002\000\142\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\054\026\055\030\uffce\032\uffce\034" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\075\uffce\077" +
    "\uffce\001\002\000\142\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\013\067\014\053\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\063\022\061\023\060\024\064" +
    "\025\054\026\055\030\uffc4\032\uffc4\034\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\075\uffc4\077\uffc4\001\002\000" +
    "\142\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\013\067\014\053\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\063\022\061\023\060\024\064\025\054\026\055" +
    "\030\uffc8\032\uffc8\034\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\075\uffc8\077\uffc8\001\002\000\024\012\047\022" +
    "\042\027\046\065\037\070\035\071\040\072\041\073\052" +
    "\075\045\001\002\000\040\004\062\005\056\006\066\007" +
    "\070\010\065\011\057\013\067\014\053\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\077\106\001\002\000" +
    "\142\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\032\uffcb\034\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\075\uffcb\077\uffcb\001\002\000\024\012\047\022" +
    "\042\027\046\065\037\070\035\071\040\072\041\073\052" +
    "\075\045\001\002\000\040\004\062\005\056\006\066\007" +
    "\070\010\065\011\057\013\067\014\053\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\077\111\001\002\000" +
    "\142\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\030\uffcc\032\uffcc\034\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\075\uffcc\077\uffcc\001\002\000\142\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\063\022" +
    "\061\023\060\024\064\025\054\026\055\030\uffc3\032\uffc3" +
    "\034\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\075\uffc3" +
    "\077\uffc3\001\002\000\142\003\uffbc\004\062\005\056\006" +
    "\066\007\070\010\065\011\057\013\067\014\053\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\030\uffbc\032\uffbc\034\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\075\uffbc\077\uffbc\001\002" +
    "\000\040\004\062\005\056\006\066\007\070\010\065\011" +
    "\057\013\067\014\053\021\063\022\061\023\060\024\064" +
    "\025\054\026\055\030\115\001\002\000\142\003\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\032\uffd1" +
    "\034\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\075\uffd1" +
    "\077\uffd1\001\002\000\142\003\uffbd\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\060\024" +
    "\064\025\054\026\055\030\uffbd\032\uffbd\034\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\075\uffbd\077\uffbd\001\002" +
    "\000\004\027\121\001\002\000\142\003\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\032\uffd2\034\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\075\uffd2\077\uffd2" +
    "\001\002\000\026\012\047\022\042\027\046\030\123\065" +
    "\037\070\035\071\040\072\041\073\052\075\045\001\002" +
    "\000\006\015\125\030\126\001\002\000\142\003\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\032\uffdc" +
    "\034\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\075\uffdc" +
    "\077\uffdc\001\002\000\042\004\062\005\056\006\066\007" +
    "\070\010\065\011\057\013\067\014\053\015\uffdf\021\063" +
    "\022\061\023\060\024\064\025\054\026\055\030\uffdf\001" +
    "\002\000\024\012\047\022\042\027\046\065\037\070\035" +
    "\071\040\072\041\073\052\075\045\001\002\000\142\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb" +
    "\032\uffdb\034\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\075\uffdb\077\uffdb\001\002\000\042\004\062\005\056\006" +
    "\066\007\070\010\065\011\057\013\067\014\053\015\uffe0" +
    "\021\063\022\061\023\060\024\064\025\054\026\055\030" +
    "\uffe0\001\002\000\120\003\ufff6\004\062\005\056\006\066" +
    "\007\070\010\065\011\057\013\067\014\053\017\ufff6\021" +
    "\063\022\061\023\060\024\064\025\054\026\055\032\ufff6" +
    "\034\ufff6\037\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\046" +
    "\ufff6\047\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\067\ufff6\075\ufff6\001\002\000\004\033\132\001\002" +
    "\000\024\012\047\022\042\027\046\065\037\070\035\071" +
    "\040\072\041\073\052\075\045\001\002\000\040\004\062" +
    "\005\056\006\066\007\070\010\065\011\057\013\067\014" +
    "\053\021\063\022\061\023\060\024\064\025\054\026\055" +
    "\050\134\001\002\000\024\012\047\022\042\027\046\065" +
    "\037\070\035\071\040\072\041\073\052\075\045\001\002" +
    "\000\042\004\062\005\056\006\066\007\070\010\065\011" +
    "\057\013\067\014\053\021\063\022\061\023\060\024\064" +
    "\025\054\026\055\045\136\052\137\001\002\000\040\003" +
    "\023\034\020\037\016\044\015\047\027\051\146\053\012" +
    "\055\030\057\013\060\011\063\014\065\006\066\024\067" +
    "\022\075\017\001\002\000\004\070\140\001\002\000\004" +
    "\045\141\001\002\000\040\003\023\034\020\037\016\044" +
    "\015\047\027\051\143\053\012\055\030\057\013\060\011" +
    "\063\014\065\006\066\024\067\022\075\017\001\002\000" +
    "\040\003\023\034\020\037\016\044\015\047\027\051\144" +
    "\053\012\055\030\057\013\060\011\063\014\065\006\066" +
    "\024\067\022\075\017\001\002\000\064\003\uffe3\017\uffe3" +
    "\032\uffe3\034\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\046\uffe3\047\uffe3\051\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\075\uffe3\001\002\000\064\003\uffe5" +
    "\017\uffe5\032\uffe5\034\uffe5\037\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\047\uffe5\051\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\075\uffe5\001\002\000\040" +
    "\003\023\034\020\037\016\044\015\047\027\051\147\053" +
    "\012\055\030\057\013\060\011\063\014\065\006\066\024" +
    "\067\022\075\017\001\002\000\064\003\uffe4\017\uffe4\032" +
    "\uffe4\034\uffe4\037\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\046\uffe4\047\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\075\uffe4\001\002\000\064\003\uffe6\017" +
    "\uffe6\032\uffe6\034\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\046\uffe6\047\uffe6\051\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\075\uffe6\001\002\000\004\002" +
    "\000\001\002\000\040\004\062\005\056\006\066\007\070" +
    "\010\065\011\057\013\067\014\053\016\152\021\063\022" +
    "\061\023\060\024\064\025\054\026\055\001\002\000\064" +
    "\003\uffef\017\uffef\032\uffef\034\uffef\037\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\046\uffef\047\uffef\051\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\075\uffef\001\002" +
    "\000\064\003\uffeb\017\uffeb\032\uffeb\034\uffeb\037\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\051\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\075\uffeb" +
    "\001\002\000\040\004\062\005\056\006\066\007\070\010" +
    "\065\011\057\013\067\014\053\016\155\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\001\002\000\064\003" +
    "\uffee\017\uffee\032\uffee\034\uffee\037\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\046\uffee\047\uffee\051\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\075\uffee\001\002\000" +
    "\006\015\157\035\160\001\002\000\004\075\165\001\002" +
    "\000\004\074\161\001\002\000\004\036\162\001\002\000" +
    "\024\012\047\022\042\027\046\065\037\070\035\071\040" +
    "\072\041\073\052\075\045\001\002\000\040\004\062\005" +
    "\056\006\066\007\070\010\065\011\057\013\067\014\053" +
    "\016\164\021\063\022\061\023\060\024\064\025\054\026" +
    "\055\001\002\000\064\003\ufffd\017\ufffd\032\ufffd\034\ufffd" +
    "\037\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046\ufffd\047" +
    "\ufffd\051\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\075\ufffd\001\002\000\010\015\uffde\033\uffde\035\uffde" +
    "\001\002\000\040\004\062\005\056\006\066\007\070\010" +
    "\065\011\057\013\067\014\053\021\063\022\061\023\060" +
    "\024\064\025\054\026\055\040\167\001\002\000\036\003" +
    "\023\034\020\037\016\044\015\047\027\053\012\055\030" +
    "\057\013\060\011\063\014\065\006\066\024\067\022\075" +
    "\017\001\002\000\044\003\023\034\020\037\016\041\172" +
    "\042\171\043\173\044\015\047\027\053\012\055\030\057" +
    "\013\060\011\063\014\065\006\066\024\067\022\075\017" +
    "\001\002\000\036\003\023\034\020\037\016\044\015\047" +
    "\027\053\012\055\030\057\013\060\011\063\014\065\006" +
    "\066\024\067\022\075\017\001\002\000\064\003\uffea\017" +
    "\uffea\032\uffea\034\uffea\037\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\046\uffea\047\uffea\051\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\075\uffea\001\002\000\024\012" +
    "\047\022\042\027\046\065\037\070\035\071\040\072\041" +
    "\073\052\075\045\001\002\000\010\041\177\042\175\043" +
    "\176\001\002\000\036\003\023\034\020\037\016\044\015" +
    "\047\027\053\012\055\030\057\013\060\011\063\014\065" +
    "\006\066\024\067\022\075\017\001\002\000\024\012\047" +
    "\022\042\027\046\065\037\070\035\071\040\072\041\073" +
    "\052\075\045\001\002\000\064\003\uffe8\017\uffe8\032\uffe8" +
    "\034\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\075\uffe8\001\002\000\040\004\062\005\056" +
    "\006\066\007\070\010\065\011\057\013\067\014\053\021" +
    "\063\022\061\023\060\024\064\025\054\026\055\040\201" +
    "\001\002\000\036\003\023\034\020\037\016\044\015\047" +
    "\027\053\012\055\030\057\013\060\011\063\014\065\006" +
    "\066\024\067\022\075\017\001\002\000\044\003\023\034" +
    "\020\037\016\041\uffda\042\uffda\043\uffda\044\015\047\027" +
    "\053\012\055\030\057\013\060\011\063\014\065\006\066" +
    "\024\067\022\075\017\001\002\000\040\003\023\034\020" +
    "\037\016\041\204\044\015\047\027\053\012\055\030\057" +
    "\013\060\011\063\014\065\006\066\024\067\022\075\017" +
    "\001\002\000\064\003\uffe7\017\uffe7\032\uffe7\034\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7" +
    "\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\075\uffe7\001\002\000\040\004\062\005\056\006\066\007" +
    "\070\010\065\011\057\013\067\014\053\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\040\206\001\002\000" +
    "\036\003\023\034\020\037\016\044\015\047\027\053\012" +
    "\055\030\057\013\060\011\063\014\065\006\066\024\067" +
    "\022\075\017\001\002\000\044\003\023\034\020\037\016" +
    "\041\uffd9\042\uffd9\043\uffd9\044\015\047\027\053\012\055" +
    "\030\057\013\060\011\063\014\065\006\066\024\067\022" +
    "\075\017\001\002\000\040\003\023\034\020\037\016\041" +
    "\211\044\015\047\027\053\012\055\030\057\013\060\011" +
    "\063\014\065\006\066\024\067\022\075\017\001\002\000" +
    "\064\003\uffe9\017\uffe9\032\uffe9\034\uffe9\037\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\051\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\075\uffe9\001" +
    "\002\000\040\004\062\005\056\006\066\007\070\010\065" +
    "\011\057\013\067\014\053\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\045\213\001\002\000\004\017\215" +
    "\001\002\000\010\017\224\042\222\046\223\001\002\000" +
    "\024\012\047\022\042\027\046\065\037\070\035\071\040" +
    "\072\041\073\052\075\045\001\002\000\040\004\062\005" +
    "\056\006\066\007\070\010\065\011\057\013\067\014\053" +
    "\020\217\021\063\022\061\023\060\024\064\025\054\026" +
    "\055\001\002\000\004\040\220\001\002\000\036\003\023" +
    "\034\020\037\016\044\015\047\027\053\012\055\030\057" +
    "\013\060\011\063\014\065\006\066\024\067\022\075\017" +
    "\001\002\000\044\003\023\017\uffd7\034\020\037\016\042" +
    "\uffd7\044\015\046\uffd7\047\027\053\012\055\030\057\013" +
    "\060\011\063\014\065\006\066\024\067\022\075\017\001" +
    "\002\000\004\040\231\001\002\000\064\003\uffed\017\uffed" +
    "\032\uffed\034\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\046\uffed\047\uffed\051\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\075\uffed\001\002\000\024\012\047" +
    "\022\042\027\046\065\037\070\035\071\040\072\041\073" +
    "\052\075\045\001\002\000\040\004\062\005\056\006\066" +
    "\007\070\010\065\011\057\013\067\014\053\020\226\021" +
    "\063\022\061\023\060\024\064\025\054\026\055\001\002" +
    "\000\004\040\227\001\002\000\036\003\023\034\020\037" +
    "\016\044\015\047\027\053\012\055\030\057\013\060\011" +
    "\063\014\065\006\066\024\067\022\075\017\001\002\000" +
    "\044\003\023\017\uffd8\034\020\037\016\042\uffd8\044\015" +
    "\046\uffd8\047\027\053\012\055\030\057\013\060\011\063" +
    "\014\065\006\066\024\067\022\075\017\001\002\000\036" +
    "\003\023\034\020\037\016\044\015\047\027\053\012\055" +
    "\030\057\013\060\011\063\014\065\006\066\024\067\022" +
    "\075\017\001\002\000\040\003\023\034\020\037\016\044" +
    "\015\046\233\047\027\053\012\055\030\057\013\060\011" +
    "\063\014\065\006\066\024\067\022\075\017\001\002\000" +
    "\064\003\uffec\017\uffec\032\uffec\034\uffec\037\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\046\uffec\047\uffec\051\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\075\uffec\001" +
    "\002\000\004\074\235\001\002\000\040\003\023\034\020" +
    "\037\016\044\015\047\027\053\012\055\030\057\013\060" +
    "\011\062\236\063\014\065\006\066\024\067\022\075\017" +
    "\001\002\000\004\027\241\001\002\000\040\003\023\034" +
    "\020\037\016\044\015\047\027\053\012\055\030\057\013" +
    "\060\011\063\014\064\240\065\006\066\024\067\022\075" +
    "\017\001\002\000\064\003\ufff2\017\ufff2\032\ufff2\034\ufff2" +
    "\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\047" +
    "\ufff2\051\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\075\ufff2\001\002\000\004\075\242\001\002\000\004" +
    "\074\252\001\002\000\006\015\244\030\245\001\002\000" +
    "\004\075\250\001\002\000\036\003\023\034\020\037\016" +
    "\044\015\047\027\053\012\055\030\057\013\060\011\063" +
    "\014\065\006\066\024\067\022\075\017\001\002\000\040" +
    "\003\023\034\020\037\016\044\015\047\027\053\012\055" +
    "\030\057\013\060\011\063\014\064\247\065\006\066\024" +
    "\067\022\075\017\001\002\000\064\003\ufff1\017\ufff1\032" +
    "\ufff1\034\ufff1\037\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\046\ufff1\047\ufff1\051\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\075\ufff1\001\002\000\004\074\251\001" +
    "\002\000\006\015\uffe2\030\uffe2\001\002\000\006\015\uffe1" +
    "\030\uffe1\001\002\000\040\004\062\005\056\006\066\007" +
    "\070\010\065\011\057\013\067\014\053\016\254\021\063" +
    "\022\061\023\060\024\064\025\054\026\055\001\002\000" +
    "\064\003\ufff5\017\ufff5\032\ufff5\034\ufff5\037\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\046\ufff5\047\ufff5\051\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\075\ufff5\001" +
    "\002\000\040\004\062\005\056\006\066\007\070\010\065" +
    "\011\057\013\067\014\053\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\045\256\001\002\000\040\003\023" +
    "\034\020\037\016\044\015\047\027\053\012\054\257\055" +
    "\030\057\013\060\011\063\014\065\006\066\024\067\022" +
    "\075\017\001\002\000\064\003\ufff8\017\ufff8\032\ufff8\034" +
    "\ufff8\037\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8" +
    "\047\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\075\ufff8\001\002\000\040\003\023\034\020\037" +
    "\016\044\015\047\027\053\012\054\261\055\030\057\013" +
    "\060\011\063\014\065\006\066\024\067\022\075\017\001" +
    "\002\000\064\003\ufff9\017\ufff9\032\ufff9\034\ufff9\037\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\051" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\075" +
    "\ufff9\001\002\000\040\003\023\034\020\037\016\044\015" +
    "\047\027\053\012\055\030\057\013\060\011\062\263\063" +
    "\014\065\006\066\024\067\022\075\017\001\002\000\004" +
    "\027\266\001\002\000\040\003\023\034\020\037\016\044" +
    "\015\047\027\053\012\055\030\057\013\060\011\061\265" +
    "\063\014\065\006\066\024\067\022\075\017\001\002\000" +
    "\064\003\ufff4\017\ufff4\032\ufff4\034\ufff4\037\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4\051\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\075\ufff4\001" +
    "\002\000\004\075\242\001\002\000\006\015\244\030\270" +
    "\001\002\000\036\003\023\034\020\037\016\044\015\047" +
    "\027\053\012\055\030\057\013\060\011\063\014\065\006" +
    "\066\024\067\022\075\017\001\002\000\040\003\023\034" +
    "\020\037\016\044\015\047\027\053\012\055\030\057\013" +
    "\060\011\061\272\063\014\065\006\066\024\067\022\075" +
    "\017\001\002\000\064\003\ufff3\017\ufff3\032\ufff3\034\ufff3" +
    "\037\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3\047" +
    "\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\075\ufff3\001\002\000\024\012\047\022\042\027\046" +
    "\065\037\070\035\071\040\072\041\073\052\075\045\001" +
    "\002\000\040\004\062\005\056\006\066\007\070\010\065" +
    "\011\057\013\067\014\053\016\275\021\063\022\061\023" +
    "\060\024\064\025\054\026\055\001\002\000\064\003\ufffc" +
    "\017\ufffc\032\ufffc\034\ufffc\037\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\046\ufffc\047\ufffc\051\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\075\ufffc\001\002\000\004" +
    "\016\277\001\002\000\064\003\ufff0\017\ufff0\032\ufff0\034" +
    "\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0" +
    "\047\ufff0\051\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\075\ufff0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\025\004\006\006\007\020\020\021\024\001\001" +
    "\000\004\011\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\254\014\043\015\042" +
    "\016\035\017\050\001\001\000\014\005\252\014\043\015" +
    "\042\016\035\017\050\001\001\000\002\001\001\000\014" +
    "\005\211\014\043\015\042\016\035\017\050\001\001\000" +
    "\014\005\165\014\043\015\042\016\035\017\050\001\001" +
    "\000\002\001\001\000\004\006\155\001\001\000\002\001" +
    "\001\000\014\005\153\014\043\015\042\016\035\017\050" +
    "\001\001\000\002\001\001\000\014\005\150\014\043\015" +
    "\042\016\035\017\050\001\001\000\002\001\001\000\012" +
    "\004\032\006\007\020\020\021\024\001\001\000\002\001" +
    "\001\000\014\003\031\004\006\006\007\020\020\021\024" +
    "\001\001\000\014\005\127\014\043\015\042\016\035\017" +
    "\050\001\001\000\012\004\032\006\007\020\020\021\024" +
    "\001\001\000\002\001\001\000\014\005\047\014\043\015" +
    "\042\016\035\017\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\115\014\043\015\042\016\035" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\113\014\043\015\042\016\035" +
    "\017\050\001\001\000\014\005\112\014\043\015\042\016" +
    "\035\017\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\111\014\043\015\042\016" +
    "\035\017\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\102\014\043\015\042\016\035\017\050\001" +
    "\001\000\014\005\101\014\043\015\042\016\035\017\050" +
    "\001\001\000\014\005\100\014\043\015\042\016\035\017" +
    "\050\001\001\000\014\005\077\014\043\015\042\016\035" +
    "\017\050\001\001\000\014\005\076\014\043\015\042\016" +
    "\035\017\050\001\001\000\014\005\075\014\043\015\042" +
    "\016\035\017\050\001\001\000\014\005\074\014\043\015" +
    "\042\016\035\017\050\001\001\000\014\005\073\014\043" +
    "\015\042\016\035\017\050\001\001\000\014\005\072\014" +
    "\043\015\042\016\035\017\050\001\001\000\014\005\071" +
    "\014\043\015\042\016\035\017\050\001\001\000\014\005" +
    "\070\014\043\015\042\016\035\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\104\014\043\015\042\016\035" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\107\014\043\015\042\016\035\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\123\010\121\014\043\015\042\016\035\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\126\014\043\015\042\016\035\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\132\014\043\015\042\016\035" +
    "\017\050\001\001\000\002\001\001\000\014\005\134\014" +
    "\043\015\042\016\035\017\050\001\001\000\002\001\001" +
    "\000\014\003\144\004\006\006\007\020\020\021\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\141" +
    "\004\006\006\007\020\020\021\024\001\001\000\012\004" +
    "\032\006\007\020\020\021\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\032\006\007\020\020\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\162\014\043\015\042\016\035\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\167\004\006\006\007\020\020" +
    "\021\024\001\001\000\014\004\032\006\007\012\173\020" +
    "\020\021\024\001\001\000\014\003\207\004\006\006\007" +
    "\020\020\021\024\001\001\000\002\001\001\000\014\005" +
    "\204\014\043\015\042\016\035\017\050\001\001\000\002" +
    "\001\001\000\014\003\202\004\006\006\007\020\020\021" +
    "\024\001\001\000\014\005\177\014\043\015\042\016\035" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\201\004\006\006\007\020\020\021\024\001\001" +
    "\000\012\004\032\006\007\020\020\021\024\001\001\000" +
    "\012\004\032\006\007\020\020\021\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\206\004\006\006" +
    "\007\020\020\021\024\001\001\000\012\004\032\006\007" +
    "\020\020\021\024\001\001\000\012\004\032\006\007\020" +
    "\020\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\213\001\001\000\002\001\001\000\014\005" +
    "\215\014\043\015\042\016\035\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\220\004\006\006" +
    "\007\020\020\021\024\001\001\000\012\004\032\006\007" +
    "\020\020\021\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\224\014\043\015\042\016\035\017\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\227\004\006\006\007\020\020\021\024\001\001\000\012" +
    "\004\032\006\007\020\020\021\024\001\001\000\014\003" +
    "\231\004\006\006\007\020\020\021\024\001\001\000\012" +
    "\004\032\006\007\020\020\021\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\236\004\006\006\007" +
    "\020\020\021\024\001\001\000\002\001\001\000\012\004" +
    "\032\006\007\020\020\021\024\001\001\000\002\001\001" +
    "\000\004\007\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\245\004\006\006\007" +
    "\020\020\021\024\001\001\000\012\004\032\006\007\020" +
    "\020\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\257\004\006" +
    "\006\007\020\020\021\024\001\001\000\002\001\001\000" +
    "\012\004\032\006\007\020\020\021\024\001\001\000\002" +
    "\001\001\000\014\003\263\004\006\006\007\020\020\021" +
    "\024\001\001\000\002\001\001\000\012\004\032\006\007" +
    "\020\020\021\024\001\001\000\002\001\001\000\004\007" +
    "\266\001\001\000\002\001\001\000\014\003\270\004\006" +
    "\006\007\020\020\021\024\001\001\000\012\004\032\006" +
    "\007\020\020\021\024\001\001\000\002\001\001\000\014" +
    "\005\273\014\043\015\042\016\035\017\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();

    public void syntax_error(Symbol s){
            errors.add(new SintaxError(s.value.toString(), s.left, s.right, true));
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            errors.add(new SintaxError(s.value.toString(), s.left, s.right, false));
    }  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= START statements END 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.AST=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Statement>(); RESULT.add(s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= ENTER name_list AS TYPEDEF WITH_VALUE expr DOTCOMMA 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Declaration(n, t, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= name_list ARROW expr DOTCOMMA 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Assignment(n, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= for 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= WHILE expr DO statements ENDWHILE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new While(e, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= WHILE expr DO ENDWHILE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new While(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= REPEAT statements ENDREPEAT expr 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Repeat(s, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= REPEAT ENDREPEAT expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Repeat(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= RETURN expr DOTCOMMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Return(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= DEFPROCEDURE ID statements ENDPROCEDURE 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Procedure(f, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= DEFPROCEDURE ID PARAMS PARSTART params_list PAREND statements ENDPROCEDURE 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Procedure(f, p, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= FUNCTION ID TYPEDEF statements ENDFUNCTION 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Function(f, t, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= FUNCTION ID TYPEDEF PARAMS PARSTART params_list PAREND statements ENDFUNCTION 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Function(f, t, p, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= EXEC func DOTCOMMA 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Execute f = (Execute)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= PRINT expr DOTCOMMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Print(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= PRINTLN expr DOTCOMMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Println(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= SWITCH expr DO cases ENDSWITCH 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Switch(e, c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= SWITCH expr DO cases ELSE THEN statements ENDSWITCH 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Switch(e, c, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= error DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if ::= IF expr THEN statements ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= IF expr THEN statements ELSE statements ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Statement> p = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, p, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= IF expr THEN statements elifs ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, s, f, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= IF expr THEN statements elifs ELSE statements ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> p = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, s, f, p);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for ::= FOR ID ARROW expr TO expr DO statements ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new For(i, e, f, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for ::= FOR ID ARROW expr TO expr WITHINCREMENTAL NUM DO statements ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new For(i, e, f, n, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for ::= FOR ID ARROW expr TO expr DO ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new For(i, e, f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // for ::= FOR ID ARROW expr TO expr WITHINCREMENTAL NUM DO ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new For(i, e, f, n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params_list ::= params_list COMMA ID TYPEDEF 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = p; RESULT.add(new Param(i, t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params_list ::= ID TYPEDEF 
            {
              LinkedList<Param> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Param>(); RESULT.add(new Param(i, t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // args_list ::= args_list COMMA expr 
            {
              LinkedList<Operation> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operation> a = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // args_list ::= expr 
            {
              LinkedList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Operation>(); RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // name_list ::= name_list COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n; RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // name_list ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<String>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func ::= ID PARSTART PAREND 
            {
              Execute RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Execute(f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // func ::= ID PARSTART args_list PAREND 
            {
              Execute RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operation> a = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Execute(f, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elifs ::= elifs ELIF expr THEN statements 
            {
              LinkedList<Elif> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = f; RESULT.add(new Elif(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elifs",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elifs ::= ELIF expr THEN statements 
            {
              LinkedList<Elif> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Elif>(); RESULT.add(new Elif(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elifs",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cases ::= cases OPENQUESTION expr CLOSEQUESTION THEN statements 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = c; RESULT.add(new Case(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cases ::= OPENQUESTION expr CLOSEQUESTION THEN statements 
            {
              LinkedList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Case>(); RESULT.add(new Case(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = u;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= EXEC func 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Execute f = (Execute)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= PARSTART expr PAREND 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operation(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aritmetic ::= expr ADD expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.ADD, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aritmetic ::= expr SUBSTRACT expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.SUBSTRACT, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aritmetic ::= expr MULTIPLY expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MULTIPLY, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aritmetic ::= expr DIVISION expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.DIVISION, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aritmetic ::= expr POW SBRACKETOPEN expr SBRACKETCLOSE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operation(a, EnumOperations.POW, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // aritmetic ::= expr MODULE SBRACKETOPEN expr SBRACKETCLOSE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operation(a, EnumOperations.MODULE, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // aritmetic ::= NUM 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(n, EnumTerminals.NUM);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logical ::= expr MAJOR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MAJOR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logical ::= expr MINOR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MINOR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logical ::= expr MAJOREQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MAJOREQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logical ::= expr MINOREQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MINOREQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // logical ::= expr EQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.EQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logical ::= expr NOTEQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.NOTEQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.AND, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.OR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logical ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(b, EnumTerminals.BOOLEAN);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(i, EnumTerminals.ID);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("symbols",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // symbols ::= STR 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(s, EnumTerminals.STR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("symbols",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // symbols ::= CHAR 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(c, EnumTerminals.CHAR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("symbols",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unitary ::= SUBSTRACT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(e, EnumUnitaryOperations.NEGATIVE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("unitary",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(e, EnumUnitaryOperations.NOT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("unitary",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
