
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1.project1.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1.project1.instructions.Statement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\006" +
    "\000\002\004\007\000\002\004\011\000\002\004\013\000" +
    "\002\004\015\000\002\004\007\000\002\004\006\000\002" +
    "\004\005\000\002\004\006\000\002\004\012\000\002\004" +
    "\007\000\002\004\013\000\002\004\006\000\002\004\007" +
    "\000\002\004\004\000\002\004\004\000\002\007\006\000" +
    "\002\007\004\000\002\010\005\000\002\010\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\005\005\000\002\005\003" +
    "\000\002\011\004\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\025\005\001\002\000\004\002\202\001" +
    "\002\000\032\030\013\033\015\043\010\047\007\051\006" +
    "\053\024\054\012\057\023\061\011\062\022\063\014\071" +
    "\020\001\002\000\032\030\013\033\015\043\010\047\007" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\014\071\020\001\002\000\010\016\027\023\032\064\025" +
    "\001\002\000\004\071\156\001\002\000\004\072\146\001" +
    "\002\000\004\072\135\001\002\000\004\071\020\001\002" +
    "\000\004\065\126\001\002\000\010\016\027\023\032\064" +
    "\025\001\002\000\034\026\115\030\013\033\015\043\010" +
    "\047\007\051\006\053\024\054\012\057\023\061\011\062" +
    "\022\063\014\071\020\001\002\000\004\027\112\001\002" +
    "\000\010\011\110\027\uffe2\031\uffe2\001\002\000\052\026" +
    "\ufffe\030\ufffe\033\ufffe\035\ufffe\036\ufffe\043\ufffe\045\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\071\ufffe" +
    "\001\002\000\004\065\107\001\002\000\004\072\070\001" +
    "\002\000\016\016\027\023\032\064\025\065\026\066\030" +
    "\067\035\001\002\000\114\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\024\uffd9\026\uffd9\030\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\071\uffd9\001\002\000\004\012\uffe6\001\002\000\010\016" +
    "\027\023\032\064\025\001\002\000\004\012\uffe4\001\002" +
    "\000\004\012\uffe7\001\002\000\010\016\027\023\032\064" +
    "\025\001\002\000\004\012\064\001\002\000\032\004\043" +
    "\005\040\006\047\007\050\010\046\012\uffe8\015\044\016" +
    "\042\017\041\020\045\021\037\022\036\001\002\000\004" +
    "\012\uffe5\001\002\000\010\016\027\023\032\064\025\001" +
    "\002\000\010\016\027\023\032\064\025\001\002\000\010" +
    "\016\027\023\032\064\025\001\002\000\010\016\027\023" +
    "\032\064\025\001\002\000\010\016\027\023\032\064\025" +
    "\001\002\000\010\016\027\023\032\064\025\001\002\000" +
    "\010\016\027\023\032\064\025\001\002\000\010\016\027" +
    "\023\032\064\025\001\002\000\010\016\027\023\032\064" +
    "\025\001\002\000\010\016\027\023\032\064\025\001\002" +
    "\000\010\016\027\023\032\064\025\001\002\000\074\012" +
    "\uffd5\015\044\016\042\017\041\020\045\021\037\022\036" +
    "\026\uffd5\030\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041" +
    "\uffd5\043\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\071\uffd5\001\002\000\074\012\uffd6\015\044" +
    "\016\042\017\041\020\045\021\037\022\036\026\uffd6\030" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\043\uffd6" +
    "\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\071\uffd6\001\002\000\074\012\uffd4\015\044\016\042\017" +
    "\041\020\045\021\037\022\036\026\uffd4\030\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\041\uffd4\043\uffd4\045\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\071\uffd4\001" +
    "\002\000\114\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\012\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\037\022" +
    "\036\024\uffdd\026\uffdd\030\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\071\uffdd\001" +
    "\002\000\114\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\012\uffe0\015\uffe0\016\uffe0\017\041\020\045\021\037\022" +
    "\036\024\uffe0\026\uffe0\030\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\071\uffe0\001" +
    "\002\000\074\012\uffd8\015\044\016\042\017\041\020\045" +
    "\021\037\022\036\026\uffd8\030\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\041\uffd8\043\uffd8\045\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\071\uffd8\001\002\000\114" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\015" +
    "\uffdf\016\uffdf\017\041\020\045\021\037\022\036\024\uffdf" +
    "\026\uffdf\030\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\041" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\071\uffdf\001\002\000\114" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\037\022\036\024\uffde" +
    "\026\uffde\030\uffde\033\uffde\034\uffde\035\uffde\036\uffde\041" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\071\uffde\001\002\000\074" +
    "\012\uffd7\015\044\016\042\017\041\020\045\021\037\022" +
    "\036\026\uffd7\030\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\041\uffd7\043\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\071\uffd7\001\002\000\114\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\030" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\071\uffdc\001\002\000\114\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\026\uffdb\030" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\041\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\071\uffdb\001\002\000\052\026\ufff5\030" +
    "\ufff5\033\ufff5\035\ufff5\036\ufff5\043\ufff5\045\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\071\ufff5\001\002" +
    "\000\020\015\044\016\042\017\041\020\045\021\037\022" +
    "\036\024\066\001\002\000\114\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\024\uffda\026\uffda\030\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\041\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\071\uffda\001\002\000\114\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\012\uffe1\015\uffe1\016\uffe1\017\041\020" +
    "\045\021\037\022\036\024\uffe1\026\uffe1\030\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\041\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\071\uffe1\001\002\000\004\070\071\001\002\000\034" +
    "\030\013\033\015\043\010\047\007\051\006\053\024\054" +
    "\012\056\072\057\023\061\011\062\022\063\014\071\020" +
    "\001\002\000\004\023\076\001\002\000\034\030\013\033" +
    "\015\043\010\047\007\051\006\053\024\054\012\057\023" +
    "\060\075\061\011\062\022\063\014\071\020\001\002\000" +
    "\052\026\uffff\030\uffff\033\uffff\035\uffff\036\uffff\043\uffff" +
    "\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\071\uffff\001\002\000\052\026\ufff2\030\ufff2\033\ufff2\035" +
    "\ufff2\036\ufff2\043\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\071\ufff2\001\002\000\004\071\077" +
    "\001\002\000\004\070\104\001\002\000\004\024\101\001" +
    "\002\000\032\030\013\033\015\043\010\047\007\051\006" +
    "\053\024\054\012\057\023\061\011\062\022\063\014\071" +
    "\020\001\002\000\034\030\013\033\015\043\010\047\007" +
    "\051\006\053\024\054\012\057\023\060\103\061\011\062" +
    "\022\063\014\071\020\001\002\000\052\026\ufff1\030\ufff1" +
    "\033\ufff1\035\ufff1\036\ufff1\043\ufff1\045\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\071\ufff1\001\002\000" +
    "\006\011\105\024\uffeb\001\002\000\004\071\077\001\002" +
    "\000\004\024\uffec\001\002\000\052\026\uffee\030\uffee\033" +
    "\uffee\035\uffee\036\uffee\043\uffee\045\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\071\uffee\001\002\000\004" +
    "\071\020\001\002\000\006\027\uffe3\031\uffe3\001\002\000" +
    "\016\016\027\023\032\064\025\065\026\066\030\067\035" +
    "\001\002\000\004\012\114\001\002\000\052\026\ufffc\030" +
    "\ufffc\033\ufffc\035\ufffc\036\ufffc\043\ufffc\045\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\071\ufffc\001\002" +
    "\000\004\002\000\001\002\000\004\034\120\001\002\000" +
    "\030\004\043\005\040\006\047\007\050\010\046\015\044" +
    "\016\042\017\041\020\045\021\037\022\036\001\002\000" +
    "\032\030\013\033\015\043\010\047\007\051\006\053\024" +
    "\054\012\057\023\061\011\062\022\063\014\071\020\001" +
    "\002\000\036\030\013\033\015\035\123\036\122\043\010" +
    "\047\007\051\006\053\024\054\012\057\023\061\011\062" +
    "\022\063\014\071\020\001\002\000\032\030\013\033\015" +
    "\043\010\047\007\051\006\053\024\054\012\057\023\061" +
    "\011\062\022\063\014\071\020\001\002\000\052\026\ufffb" +
    "\030\ufffb\033\ufffb\035\ufffb\036\ufffb\043\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\071\ufffb\001" +
    "\002\000\034\030\013\033\015\035\125\043\010\047\007" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\014\071\020\001\002\000\052\026\ufffa\030\ufffa\033\ufffa" +
    "\035\ufffa\036\ufffa\043\ufffa\045\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\071\ufffa\001\002\000\052\026" +
    "\uffed\030\uffed\033\uffed\035\uffed\036\uffed\043\uffed\045\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\071\uffed" +
    "\001\002\000\004\031\130\001\002\000\004\070\131\001" +
    "\002\000\004\032\132\001\002\000\016\016\027\023\032" +
    "\064\025\065\026\066\030\067\035\001\002\000\004\012" +
    "\134\001\002\000\052\026\ufffd\030\ufffd\033\ufffd\035\ufffd" +
    "\036\ufffd\043\ufffd\045\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\071\ufffd\001\002\000\034\030\013\033" +
    "\015\043\010\047\007\051\006\053\024\054\012\056\136" +
    "\057\023\061\011\062\022\063\014\071\020\001\002\000" +
    "\004\023\141\001\002\000\034\030\013\033\015\043\010" +
    "\047\007\051\006\053\024\054\012\055\140\057\023\061" +
    "\011\062\022\063\014\071\020\001\002\000\052\026\ufff4" +
    "\030\ufff4\033\ufff4\035\ufff4\036\ufff4\043\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\071\ufff4\001" +
    "\002\000\004\071\077\001\002\000\004\024\143\001\002" +
    "\000\032\030\013\033\015\043\010\047\007\051\006\053" +
    "\024\054\012\057\023\061\011\062\022\063\014\071\020" +
    "\001\002\000\034\030\013\033\015\043\010\047\007\051" +
    "\006\053\024\054\012\055\145\057\023\061\011\062\022" +
    "\063\014\071\020\001\002\000\052\026\ufff3\030\ufff3\033" +
    "\ufff3\035\ufff3\036\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\057\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\071\ufff3\001\002\000\004" +
    "\023\147\001\002\000\006\024\151\071\150\001\002\000" +
    "\006\011\154\024\uffe9\001\002\000\052\026\ufff0\030\ufff0" +
    "\033\ufff0\035\ufff0\036\ufff0\043\ufff0\045\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\071\ufff0\001\002\000" +
    "\004\024\153\001\002\000\052\026\uffef\030\uffef\033\uffef" +
    "\035\uffef\036\uffef\043\uffef\045\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\057\uffef\060\uffef" +
    "\061\uffef\062\uffef\063\uffef\071\uffef\001\002\000\004\071" +
    "\150\001\002\000\004\024\uffea\001\002\000\004\027\157" +
    "\001\002\000\010\016\027\023\032\064\025\001\002\000" +
    "\020\015\044\016\042\017\041\020\045\021\037\022\036" +
    "\044\161\001\002\000\010\016\027\023\032\064\025\001" +
    "\002\000\022\015\044\016\042\017\041\020\045\021\037" +
    "\022\036\041\163\046\164\001\002\000\032\030\013\033" +
    "\015\043\010\047\007\051\006\053\024\054\012\057\023" +
    "\061\011\062\022\063\014\071\020\001\002\000\010\016" +
    "\027\023\032\064\025\001\002\000\020\015\044\016\042" +
    "\017\041\020\045\021\037\022\036\041\166\001\002\000" +
    "\032\030\013\033\015\043\010\047\007\051\006\053\024" +
    "\054\012\057\023\061\011\062\022\063\014\071\020\001" +
    "\002\000\034\030\013\033\015\043\010\045\170\047\007" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\014\071\020\001\002\000\052\026\ufff8\030\ufff8\033\ufff8" +
    "\035\ufff8\036\ufff8\043\ufff8\045\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\071\ufff8\001\002\000\034\030" +
    "\013\033\015\043\010\045\172\047\007\051\006\053\024" +
    "\054\012\057\023\061\011\062\022\063\014\071\020\001" +
    "\002\000\052\026\ufff9\030\ufff9\033\ufff9\035\ufff9\036\ufff9" +
    "\043\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\071\ufff9\001\002\000\004\041\174\001\002\000" +
    "\032\030\013\033\015\043\010\047\007\051\006\053\024" +
    "\054\012\057\023\061\011\062\022\063\014\071\020\001" +
    "\002\000\034\030\013\033\015\043\010\047\007\050\176" +
    "\051\006\053\024\054\012\057\023\061\011\062\022\063" +
    "\014\071\020\001\002\000\052\026\ufff7\030\ufff7\033\ufff7" +
    "\035\ufff7\036\ufff7\043\ufff7\045\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\071\ufff7\001\002\000\034\030" +
    "\013\033\015\043\010\047\007\051\006\052\200\053\024" +
    "\054\012\057\023\061\011\062\022\063\014\071\020\001" +
    "\002\000\010\016\027\023\032\064\025\001\002\000\052" +
    "\026\ufff6\030\ufff6\033\ufff6\035\ufff6\036\ufff6\043\ufff6\045" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\071" +
    "\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\015\004\020\005\016\001\001\000\010\003\176" +
    "\004\020\005\016\001\001\000\006\011\116\012\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\126\001\001\000\002\001\001\000\006\011" +
    "\116\012\115\001\001\000\006\004\073\005\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\032\011\033" +
    "\012\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\062\001\001\000\004" +
    "\011\061\001\001\000\004\011\060\001\001\000\004\011" +
    "\057\001\001\000\004\011\056\001\001\000\004\011\055" +
    "\001\001\000\004\011\054\001\001\000\004\011\053\001" +
    "\001\000\004\011\052\001\001\000\004\011\051\001\001" +
    "\000\004\011\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\072\004\020\005\016" +
    "\001\001\000\002\001\001\000\006\004\073\005\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\101\004\020\005\016\001\001\000\006\004\073\005\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\110\001\001\000\002\001\001\000\010\006\112\011" +
    "\033\012\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\120\004\020\005\016\001\001\000\006\004\073" +
    "\005\016\001\001\000\010\003\123\004\020\005\016\001" +
    "\001\000\002\001\001\000\006\004\073\005\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\132\011\033" +
    "\012\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\136\004\020\005\016\001\001\000\002\001\001" +
    "\000\006\004\073\005\016\001\001\000\002\001\001\000" +
    "\004\007\141\001\001\000\002\001\001\000\010\003\143" +
    "\004\020\005\016\001\001\000\006\004\073\005\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\157\001\001\000" +
    "\002\001\001\000\004\011\161\001\001\000\002\001\001" +
    "\000\010\003\170\004\020\005\016\001\001\000\004\011" +
    "\164\001\001\000\002\001\001\000\010\003\166\004\020" +
    "\005\016\001\001\000\006\004\073\005\016\001\001\000" +
    "\002\001\001\000\006\004\073\005\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\174\004\020\005" +
    "\016\001\001\000\006\004\073\005\016\001\001\000\002" +
    "\001\001\000\006\004\073\005\016\001\001\000\006\011" +
    "\116\012\200\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public LinkedList<Statement> AST;

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= START statements END 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= ENTER name_list AS TYPEDEF WITH_VALUE expr DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= name_list ARROW expr DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= IF logical THEN statements ENDIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IF logical THEN statements ELSE statements ENDIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= FOR ID ARROW numeric TO numeric DO statements ENDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= FOR ID ARROW numeric TO numeric WITHINCREMENTAL numeric DO statements ENDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= WHILE logical DO statements ENDWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= REPEAT statements ENDREPEAT logical 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= RETURN expr DOTCOMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= DEFPROCEDURE FUNCID statements ENDPROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= DEFPROCEDURE FUNCID PARAMS PARSTART params_list PAREND statements ENDPROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= FUNCTION FUNCID TYPEDEF statements ENDFUNCTION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= FUNCTION FUNCID TYPEDEF PARAMS PARSTART params_list PAREND statements ENDFUNCTION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= EXEC FUNCID PARSTART PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= EXEC FUNCID PARSTART args_list PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= PRINT STR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= PRINTLN STR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // params_list ::= ID TYPEDEF COMMA params_list 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // params_list ::= ID TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // args_list ::= ID COMMA args_list 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // args_list ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= logical 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= STR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // name_list ::= ID COMMA name_list 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // name_list ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numeric ::= SUBSTRACT numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric ::= numeric ADD numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numeric ::= numeric SUBSTRACT numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numeric ::= numeric MULTIPLY numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numeric ::= numeric DIVISION numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numeric ::= numeric POW numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numeric ::= numeric MODULE numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // numeric ::= PARSTART numeric PAREND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // numeric ::= NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numeric",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logical ::= numeric MAJOR numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logical ::= numeric MINOR numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logical ::= numeric MAJOREQUALS numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logical ::= numeric MINOREQUALS numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logical ::= numeric EQUALS numeric 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
