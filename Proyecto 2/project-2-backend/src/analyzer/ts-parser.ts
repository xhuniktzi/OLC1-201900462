/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

import { IError } from "./exceptions/IError";
import { EnumError } from "./exceptions/EnumError";

import { IStatement } from "./abstract/IStatement";
import { IExpression } from "./abstract/IExpression";
import { IParam } from "./abstract/IParam";

import { Declaration } from "./statements/Declaration";
import { Assign } from "./statements/Assign";
import { If } from "./statements/If";
import { Elif } from "./statements/Elif";
import { Print } from "./statements/Print";
import { Println } from "./statements/Println";
import { While } from "./statements/While";
import { BreakLoop } from "./statements/BreakLoop";
import { ContinueLoop } from "./statements/ContinueLoop";
import { DoWhile } from "./statements/DoWhile";
import { DoUntil } from "./statements/DoUntil";
import { Return } from "./statements/Return";
import { FunctionDef } from "./statements/FunctionDef";
import { Method } from "./statements/Method";
import { For } from "./statements/For";
import { Case } from "./statements/Case";
import { Switch } from "./statements/Switch";
import { DeclareArrayOne } from "./statements/DeclareArrayOne";
import { DeclareArrayTwo } from "./statements/DeclareArrayTwo";

import fnParseDatatype from "./functions/fnParseDatatype";
import fnParseBoolean from "./functions/fnParseBoolean";

import { Terminals } from "./enums/EnumTerminals";
import { RelationalOp } from "./enums/EnumRelational";
import { ArithmeticOp } from "./enums/EnumArithmetic";
import { LogicalOp } from "./enums/EnumLogical";

import { Terminal } from "./expressions/Terminal";
import { Relational } from "./expressions/Relational";
import { Arithmetic } from "./expressions/Arithmetic";
import { Logical } from "./expressions/Logical";
import { Negative } from "./expressions/Negative";
import { Not } from "./expressions/Not";
import { Ternary } from "./expressions/Ternary";
import { Increment } from "./expressions/Increment";
import { Decrement } from "./expressions/Decrement";
import { Cast } from "./expressions/Cast";
import { Call } from "./expressions/Call";
import { AccessArray } from "./expressions/AccessArray";
import { AccessMatrix } from "./expressions/AccessMatrix";

let errors: IError[] = [];

const addError = (error: IError) => {
  if (error.type === EnumError.LEXICAL_ERROR) {
    error.message = `Caracter: " ${error.message} ", no reconocido como parte del lenguaje`;
  } else if (error.type === EnumError.SYNTAX_ERROR) {
    error.message = `No se esperaba: " ${error.message} ", como parte del lenguaje`;
  }
  console.error(error);
  errors.push(error);
};

import {
  JisonParser,
  JisonParserApi,
  StateType,
  SymbolsType,
  TerminalsType,
  ProductionsType,
  o,
} from "@ts-jison/parser";
const $V0 = [1, 19],
  $V1 = [1, 20],
  $V2 = [1, 21],
  $V3 = [1, 22],
  $V4 = [1, 23],
  $V5 = [1, 27],
  $V6 = [1, 28],
  $V7 = [1, 29],
  $V8 = [1, 30],
  $V9 = [1, 31],
  $Va = [1, 25],
  $Vb = [1, 26],
  $Vc = [5, 24, 25, 26, 60, 65, 71, 77, 78, 83, 86, 95, 96],
  $Vd = [5, 24, 25, 26, 60, 65, 71, 73, 77, 78, 83, 86, 88, 89, 95, 96],
  $Ve = [1, 55],
  $Vf = [1, 56],
  $Vg = [1, 58],
  $Vh = [1, 59],
  $Vi = [1, 60],
  $Vj = [1, 61],
  $Vk = [1, 62],
  $Vl = [1, 63],
  $Vm = [1, 57],
  $Vn = [69, 70],
  $Vo = [2, 64],
  $Vp = [1, 67],
  $Vq = [1, 69],
  $Vr = [1, 84],
  $Vs = [1, 85],
  $Vt = [1, 86],
  $Vu = [1, 87],
  $Vv = [1, 88],
  $Vw = [1, 89],
  $Vx = [1, 78],
  $Vy = [1, 79],
  $Vz = [1, 80],
  $VA = [1, 81],
  $VB = [1, 82],
  $VC = [1, 83],
  $VD = [1, 90],
  $VE = [1, 91],
  $VF = [1, 92],
  $VG = [
    12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 62, 64, 69,
    73, 91,
  ],
  $VH = [1, 97],
  $VI = [1, 98],
  $VJ = [12, 69, 70],
  $VK = [12, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 61, 62, 64, 69, 73, 91],
  $VL = [12, 52, 53, 61, 62, 64, 69, 73, 91],
  $VM = [24, 25, 26, 60, 65, 71, 73, 77, 78, 83, 86, 88, 89, 95, 96],
  $VN = [
    12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 61, 62, 64, 69, 73, 91,
  ],
  $VO = [12, 40, 41, 42, 43, 44, 45, 52, 53, 61, 62, 64, 69, 73, 91],
  $VP = [64, 69],
  $VQ = [1, 227],
  $VR = [69, 73],
  $VS = [73, 88, 89],
  $VT = [5, 24, 25, 26, 60, 65, 71, 73, 74, 76, 77, 78, 83, 86, 88, 89, 95, 96];

export class TsLanguageParser extends JisonParser implements JisonParserApi {
  $?: any;

  constructor(yy = {}, lexer = new TsLanguageLexer(yy)) {
    super(yy, lexer);
  }

  symbols_: SymbolsType = {
    error: 2,
    ini: 3,
    main_statements: 4,
    EOF: 5,
    main_statement: 6,
    standard_statement: 7,
    function: 8,
    method: 9,
    standard_statements: 10,
    declare_array_1: 11,
    END_SENTENCE: 12,
    declare_array_2: 13,
    declaration: 14,
    assign: 15,
    print_st: 16,
    println_st: 17,
    if: 18,
    while: 19,
    do_while: 20,
    do_until: 21,
    for: 22,
    switch: 23,
    BREAK: 24,
    CONTINUE: 25,
    RETURN: 26,
    expr: 27,
    arithmetic: 28,
    relational: 29,
    logical: 30,
    ternary: 31,
    group: 32,
    value: 33,
    cast: 34,
    increment: 35,
    decrement: 36,
    call: 37,
    access_array: 38,
    access_matrix: 39,
    LESS: 40,
    GREATER: 41,
    LESS_EQUAL: 42,
    GREATER_EQUAL: 43,
    EQUAL: 44,
    NOT_EQUAL: 45,
    ADD: 46,
    MINUS: 47,
    PRODUCT: 48,
    DIVISION: 49,
    MODULE: 50,
    POWER: 51,
    AND: 52,
    OR: 53,
    NOT: 54,
    DECIMAL: 55,
    INTEGER: 56,
    LOGICAL: 57,
    STRING: 58,
    CHAR: 59,
    IDENTIFIER: 60,
    TERNARY_IF: 61,
    TERNARY_ELSE: 62,
    OPEN_PARENTHESIS: 63,
    CLOSE_PARENTHESIS: 64,
    TYPE: 65,
    INCREMENT: 66,
    DECREMENT: 67,
    list_identifiers: 68,
    COMMA: 69,
    ASSIGNMENT: 70,
    IF: 71,
    OPEN_BRACE: 72,
    CLOSE_BRACE: 73,
    ELSE: 74,
    elifs: 75,
    ELIF: 76,
    WHILE: 77,
    DO: 78,
    UNTIL: 79,
    parameters: 80,
    VOID: 81,
    arguments: 82,
    FOR: 83,
    for_init: 84,
    for_update: 85,
    SWITCH: 86,
    cases: 87,
    DEFAULT: 88,
    CASE: 89,
    OPEN_BRACKET: 90,
    CLOSE_BRACKET: 91,
    NEW: 92,
    list_expr: 93,
    list_list_expr: 94,
    PRINT: 95,
    PRINTLN: 96,
    $accept: 0,
    $end: 1,
  };
  terminals_: TerminalsType = {
    2: "error",
    5: "EOF",
    12: "END_SENTENCE",
    24: "BREAK",
    25: "CONTINUE",
    26: "RETURN",
    40: "LESS",
    41: "GREATER",
    42: "LESS_EQUAL",
    43: "GREATER_EQUAL",
    44: "EQUAL",
    45: "NOT_EQUAL",
    46: "ADD",
    47: "MINUS",
    48: "PRODUCT",
    49: "DIVISION",
    50: "MODULE",
    51: "POWER",
    52: "AND",
    53: "OR",
    54: "NOT",
    55: "DECIMAL",
    56: "INTEGER",
    57: "LOGICAL",
    58: "STRING",
    59: "CHAR",
    60: "IDENTIFIER",
    61: "TERNARY_IF",
    62: "TERNARY_ELSE",
    63: "OPEN_PARENTHESIS",
    64: "CLOSE_PARENTHESIS",
    65: "TYPE",
    66: "INCREMENT",
    67: "DECREMENT",
    69: "COMMA",
    70: "ASSIGNMENT",
    71: "IF",
    72: "OPEN_BRACE",
    73: "CLOSE_BRACE",
    74: "ELSE",
    76: "ELIF",
    77: "WHILE",
    78: "DO",
    79: "UNTIL",
    81: "VOID",
    83: "FOR",
    86: "SWITCH",
    88: "DEFAULT",
    89: "CASE",
    90: "OPEN_BRACKET",
    91: "CLOSE_BRACKET",
    92: "NEW",
    95: "PRINT",
    96: "PRINTLN",
  };
  productions_: ProductionsType = [
    0,
    [3, 2],
    [4, 2],
    [4, 1],
    [6, 1],
    [6, 1],
    [6, 1],
    [10, 2],
    [10, 1],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 2],
    [7, 2],
    [7, 3],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [27, 1],
    [29, 3],
    [29, 3],
    [29, 3],
    [29, 3],
    [29, 3],
    [29, 3],
    [28, 3],
    [28, 3],
    [28, 3],
    [28, 3],
    [28, 3],
    [28, 3],
    [28, 2],
    [30, 3],
    [30, 3],
    [30, 2],
    [33, 1],
    [33, 1],
    [33, 1],
    [33, 1],
    [33, 1],
    [33, 1],
    [31, 5],
    [32, 3],
    [34, 4],
    [35, 2],
    [36, 2],
    [68, 3],
    [68, 1],
    [14, 2],
    [14, 4],
    [15, 3],
    [18, 7],
    [18, 11],
    [18, 8],
    [18, 12],
    [75, 8],
    [75, 7],
    [19, 7],
    [20, 9],
    [21, 9],
    [80, 4],
    [80, 2],
    [8, 9],
    [8, 8],
    [9, 9],
    [9, 7],
    [9, 8],
    [9, 6],
    [82, 3],
    [82, 1],
    [37, 4],
    [37, 3],
    [22, 11],
    [84, 1],
    [84, 1],
    [85, 1],
    [85, 1],
    [85, 1],
    [23, 7],
    [23, 10],
    [23, 9],
    [87, 5],
    [87, 4],
    [11, 10],
    [11, 8],
    [93, 3],
    [93, 1],
    [94, 5],
    [94, 3],
    [13, 15],
    [13, 10],
    [16, 4],
    [17, 4],
    [38, 4],
    [39, 7],
  ];
  table: Array<StateType> = [
    {
      3: 1,
      4: 2,
      6: 3,
      7: 4,
      8: 5,
      9: 6,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $V3,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 1: [3] },
    {
      5: [1, 32],
      6: 33,
      7: 4,
      8: 5,
      9: 6,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $V3,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vc, [2, 3]),
    o($Vc, [2, 4]),
    o($Vc, [2, 5]),
    o($Vc, [2, 6]),
    { 12: [1, 34] },
    { 12: [1, 35] },
    { 12: [1, 36] },
    { 12: [1, 37] },
    { 12: [1, 38] },
    { 12: [1, 39] },
    o($Vd, [2, 15]),
    o($Vd, [2, 16]),
    o($Vd, [2, 17]),
    o($Vd, [2, 18]),
    o($Vd, [2, 19]),
    o($Vd, [2, 20]),
    { 12: [1, 40] },
    { 12: [1, 41] },
    {
      27: 42,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($Vn, $Vo, { 63: [1, 64] }),
    { 60: $Vp, 68: 66, 90: [1, 65] },
    { 69: $Vq, 70: [1, 68] },
    { 63: [1, 70] },
    { 63: [1, 71] },
    { 63: [1, 72] },
    { 63: [1, 73] },
    { 72: [1, 74] },
    { 63: [1, 75] },
    { 63: [1, 76] },
    { 1: [2, 1] },
    o($Vc, [2, 2]),
    o($Vd, [2, 9]),
    o($Vd, [2, 10]),
    o($Vd, [2, 11]),
    o($Vd, [2, 12]),
    o($Vd, [2, 13]),
    o($Vd, [2, 14]),
    o($Vd, [2, 21]),
    o($Vd, [2, 22]),
    {
      12: [1, 77],
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    },
    o($VG, [2, 24]),
    o($VG, [2, 25]),
    o($VG, [2, 26]),
    o($VG, [2, 27]),
    o($VG, [2, 28]),
    o($VG, [2, 29]),
    o($VG, [2, 30]),
    o($VG, [2, 31]),
    o($VG, [2, 32]),
    o($VG, [2, 33]),
    o($VG, [2, 34]),
    o($VG, [2, 35]),
    {
      27: 93,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 94,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 95,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
      65: [1, 96],
    },
    o($VG, [2, 52]),
    o($VG, [2, 53]),
    o($VG, [2, 54]),
    o($VG, [2, 55]),
    o($VG, [2, 56]),
    o($VG, [2, 57], { 63: [1, 99], 66: $VH, 67: $VI, 90: [1, 100] }),
    { 64: [1, 102], 65: [1, 103], 80: 101 },
    { 91: [1, 104] },
    { 12: [2, 65], 69: $Vq, 70: [1, 105] },
    o($VJ, $Vo),
    {
      27: 106,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 60: [1, 107] },
    {
      27: 108,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 109,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 110,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 111,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      7: 113,
      10: 112,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 14: 116, 15: 115, 60: $Vp, 65: [1, 117], 68: 24, 84: 114 },
    {
      27: 118,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($Vd, [2, 23]),
    {
      27: 119,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 120,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 121,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 122,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 123,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 124,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 125,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 126,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 127,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 128,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 129,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 130,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 131,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 132,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 133,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($VK, [2, 48], { 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VL, [2, 51], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
    }),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 134],
    },
    { 64: [1, 135] },
    o($VG, [2, 61]),
    o($VG, [2, 62]),
    {
      27: 138,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
      64: [1, 137],
      82: 136,
    },
    {
      27: 139,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 64: [1, 140], 69: [1, 141] },
    { 62: [1, 142], 72: [1, 143] },
    { 60: [1, 144] },
    { 60: [1, 145], 90: [1, 146] },
    {
      27: 147,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o([12, 64], [2, 67], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    }),
    o($VJ, [2, 63]),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 148],
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 149],
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 150],
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 151],
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 152],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($VM, [2, 8]),
    { 12: [1, 154] },
    { 12: [2, 90] },
    { 12: [2, 91] },
    { 60: $Vp, 68: 66 },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 155],
    },
    o($VK, [2, 42], { 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VK, [2, 43], { 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VN, [2, 44], { 50: $VB, 51: $VC }),
    o($VN, [2, 45], { 50: $VB, 51: $VC }),
    o($VG, [2, 46]),
    o($VG, [2, 47]),
    o($VO, [2, 36], { 46: $Vx, 47: $Vy, 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VO, [2, 37], { 46: $Vx, 47: $Vy, 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VO, [2, 38], { 46: $Vx, 47: $Vy, 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VO, [2, 39], { 46: $Vx, 47: $Vy, 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VO, [2, 40], { 46: $Vx, 47: $Vy, 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VO, [2, 41], { 46: $Vx, 47: $Vy, 48: $Vz, 49: $VA, 50: $VB, 51: $VC }),
    o($VL, [2, 49], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
    }),
    o([12, 53, 61, 62, 64, 69, 73, 91], [2, 50], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
    }),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      62: [1, 156],
    },
    o($VG, [2, 59]),
    {
      27: 157,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 64: [1, 158], 69: [1, 159] },
    o($VG, [2, 88]),
    o($VP, [2, 86], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    }),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      91: [1, 160],
    },
    { 62: [1, 161], 72: [1, 162] },
    { 65: [1, 163] },
    { 65: [1, 164], 81: [1, 165] },
    {
      7: 113,
      10: 166,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($VP, [2, 78]),
    { 70: [1, 167] },
    { 91: [1, 168] },
    {
      12: [2, 66],
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    },
    { 12: [2, 108] },
    { 12: [2, 109] },
    { 72: [1, 169] },
    { 72: [1, 170] },
    { 77: [1, 171], 79: [1, 172] },
    o($VM, [2, 7]),
    {
      27: 173,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 72: [1, 174] },
    {
      27: 175,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($VG, [2, 60]),
    o($VG, [2, 87]),
    {
      27: 176,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($VG, [2, 110], { 90: [1, 177] }),
    { 65: [1, 178], 81: [1, 179] },
    {
      7: 113,
      10: 180,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 60: [1, 181] },
    { 72: [1, 182] },
    { 72: [1, 183] },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 184],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 72: [1, 186], 92: [1, 185] },
    { 60: [1, 187] },
    {
      7: 113,
      10: 188,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 113,
      10: 189,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 63: [1, 190] },
    { 63: [1, 191] },
    {
      12: [1, 192],
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    },
    { 87: 193, 88: [1, 194], 89: [1, 195] },
    o([12, 62, 64, 69, 73, 91], [2, 58], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    }),
    o($VP, [2, 85], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    }),
    {
      27: 196,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 72: [1, 197] },
    { 72: [1, 198] },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 199],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($VP, [2, 77]),
    {
      7: 113,
      10: 200,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 113,
      10: 201,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vc, [2, 84]),
    { 65: [1, 202] },
    {
      27: 204,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
      93: 203,
    },
    { 70: [1, 205] },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 206],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 207],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      27: 208,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      27: 209,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 15: 211, 35: 212, 36: 213, 60: [1, 214], 68: 24, 85: 210 },
    { 73: [1, 215], 88: [1, 216], 89: [1, 217] },
    { 62: [1, 218] },
    {
      27: 219,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      91: [1, 220],
    },
    {
      7: 113,
      10: 221,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 113,
      10: 222,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vc, [2, 82]),
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 223],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 224],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 90: [1, 225] },
    { 69: $VQ, 73: [1, 226] },
    o($VR, [2, 103], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    }),
    { 72: [1, 229], 92: [1, 228] },
    o($Vd, [2, 68], { 75: 231, 74: [1, 230], 76: [1, 232] }),
    o($Vd, [2, 74]),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 233],
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 234],
    },
    { 64: [1, 235] },
    { 64: [2, 92] },
    { 64: [2, 93] },
    { 64: [2, 94] },
    o($Vn, $Vo, { 66: $VH, 67: $VI }),
    o($Vd, [2, 95]),
    { 62: [1, 236] },
    {
      27: 237,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      7: 113,
      10: 238,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      62: [1, 239],
    },
    o($VG, [2, 111]),
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 240],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 241],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vc, [2, 80]),
    o($Vc, [2, 83]),
    {
      27: 242,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 12: [2, 101] },
    {
      27: 243,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 65: [1, 244] },
    { 72: [1, 246], 94: 245 },
    { 72: [1, 247] },
    o($Vd, [2, 70], { 74: [1, 248], 76: [1, 249] }),
    { 63: [1, 250] },
    { 12: [1, 251] },
    { 12: [1, 252] },
    { 72: [1, 253] },
    {
      7: 113,
      10: 254,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      62: [1, 255],
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 256],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 113,
      10: 257,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vc, [2, 79]),
    o($Vc, [2, 81]),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      91: [1, 258],
    },
    o($VR, [2, 102], {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
    }),
    { 90: [1, 259] },
    { 69: [1, 261], 73: [1, 260] },
    {
      27: 204,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
      93: 262,
    },
    {
      7: 113,
      10: 263,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    { 72: [1, 264] },
    { 63: [1, 265] },
    {
      27: 266,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($Vd, [2, 75]),
    o($Vd, [2, 76]),
    {
      7: 113,
      10: 267,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 268],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 113,
      10: 269,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vd, [2, 97]),
    o($VS, [2, 99], {
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      68: 24,
      7: 153,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    }),
    { 12: [2, 100] },
    {
      27: 270,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    { 12: [2, 107] },
    { 72: [1, 271] },
    { 69: $VQ, 73: [1, 272] },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 273],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 113,
      10: 274,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      27: 275,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 276],
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 277],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($Vd, [2, 96]),
    o($VS, [2, 98], {
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      68: 24,
      7: 153,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    }),
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      91: [1, 278],
    },
    {
      27: 204,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
      93: 279,
    },
    o($VR, [2, 105]),
    o($Vd, [2, 69]),
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 280],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      64: [1, 281],
    },
    { 72: [1, 282] },
    o($Vd, [2, 89]),
    { 90: [1, 283] },
    { 69: $VQ, 73: [1, 284] },
    o($Vd, [2, 71]),
    { 72: [1, 285] },
    {
      7: 113,
      10: 286,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      27: 287,
      28: 43,
      29: 44,
      30: 45,
      31: 46,
      32: 47,
      33: 48,
      34: 49,
      35: 50,
      36: 51,
      37: 52,
      38: 53,
      39: 54,
      47: $Ve,
      54: $Vf,
      55: $Vg,
      56: $Vh,
      57: $Vi,
      58: $Vj,
      59: $Vk,
      60: $Vl,
      63: $Vm,
    },
    o($VR, [2, 104]),
    {
      7: 113,
      10: 288,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 289],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    {
      40: $Vr,
      41: $Vs,
      42: $Vt,
      43: $Vu,
      44: $Vv,
      45: $Vw,
      46: $Vx,
      47: $Vy,
      48: $Vz,
      49: $VA,
      50: $VB,
      51: $VC,
      52: $VD,
      53: $VE,
      61: $VF,
      91: [1, 290],
    },
    {
      7: 153,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: 17,
      23: 18,
      24: $V0,
      25: $V1,
      26: $V2,
      60: $Vp,
      65: $V4,
      68: 24,
      71: $V5,
      73: [1, 291],
      77: $V6,
      78: $V7,
      83: $V8,
      86: $V9,
      95: $Va,
      96: $Vb,
    },
    o($VT, [2, 73]),
    { 12: [2, 106] },
    o($VT, [2, 72]),
  ];
  defaultActions: { [key: number]: any } = {
    32: [2, 1],
    115: [2, 90],
    116: [2, 91],
    148: [2, 108],
    149: [2, 109],
    211: [2, 92],
    212: [2, 93],
    213: [2, 94],
    226: [2, 101],
    258: [2, 100],
    260: [2, 107],
    290: [2, 106],
  };

  performAction(
    yytext: string,
    yyleng: number,
    yylineno: number,
    yy: any,
    yystate: number /* action[1] */,
    $$: any /* vstack */,
    _$: any /* lstack */
  ): any {
    /* this == yyval */
    var $0 = $$.length - 1;
    switch (yystate) {
      case 1:
        return $$[$0 - 1];
        break;
      case 2:
      case 7:
        $$[$0 - 1].push($$[$0]);
        this.$ = $$[$0 - 1];
        break;
      case 3:
      case 8:
        this.$ = new Array<IStatement>();
        this.$[0] = $$[$0];
        break;
      case 4:
      case 5:
      case 6:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
        this.$ = $$[$0];
        break;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 59:
        this.$ = $$[$0 - 1];
        break;
      case 21:
        this.$ = new BreakLoop();
        break;
      case 22:
        this.$ = new ContinueLoop();
        break;
      case 23:
        this.$ = new Return($$[$0 - 1]);
        break;
      case 36:
        this.$ = new Relational($$[$0 - 2], RelationalOp.LESS_THAN, $$[$0]);
        break;
      case 37:
        this.$ = new Relational($$[$0 - 2], RelationalOp.GREATER_THAN, $$[$0]);
        break;
      case 38:
        this.$ = new Relational(
          $$[$0 - 2],
          RelationalOp.LESS_THAN_EQUAL,
          $$[$0]
        );
        break;
      case 39:
        this.$ = new Relational(
          $$[$0 - 2],
          RelationalOp.GREATER_THAN_EQUAL,
          $$[$0]
        );
        break;
      case 40:
        this.$ = new Relational($$[$0 - 2], RelationalOp.EQUAL, $$[$0]);
        break;
      case 41:
        this.$ = new Relational($$[$0 - 2], RelationalOp.NOT_EQUAL, $$[$0]);
        break;
      case 42:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.ADD, $$[$0]);
        break;
      case 43:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.MINUS, $$[$0]);
        break;
      case 44:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.PRODUCT, $$[$0]);
        break;
      case 45:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.DIVISION, $$[$0]);
        break;
      case 46:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.MODULE, $$[$0]);
        break;
      case 47:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.POWER, $$[$0]);
        break;
      case 48:
        this.$ = new Negative($$[$0]);
        break;
      case 49:
        this.$ = new Logical($$[$0 - 2], LogicalOp.AND, $$[$0]);
        break;
      case 50:
        this.$ = new Logical($$[$0 - 2], LogicalOp.OR, $$[$0]);
        break;
      case 51:
        this.$ = new Not($$[$0]);
        break;
      case 52:
        this.$ = new Terminal(Terminals.DECIMAL, Number($$[$0]));
        break;
      case 53:
        this.$ = new Terminal(Terminals.INTEGER, Number($$[$0]));
        break;
      case 54:
        this.$ = new Terminal(Terminals.LOGICAL, fnParseBoolean($$[$0]));
        break;
      case 55:
        this.$ = new Terminal(Terminals.STRING, $$[$0]);
        break;
      case 56:
        this.$ = new Terminal(Terminals.CHAR, $$[$0]);
        break;
      case 57:
        this.$ = new Terminal(Terminals.ID, $$[$0]);
        break;
      case 58:
        this.$ = new Ternary($$[$0 - 4], $$[$0 - 2], $$[$0]);
        break;
      case 60:
        this.$ = new Cast(fnParseDatatype($$[$0 - 2]), $$[$0]);
        break;
      case 61:
        this.$ = new Increment($$[$0 - 1]);
        break;
      case 62:
        this.$ = new Decrement($$[$0 - 1]);
        break;
      case 63:
      case 85:
      case 102:
        $$[$0 - 2].push($$[$0]);
        this.$ = $$[$0 - 2];
        break;
      case 64:
        this.$ = [$$[$0]];
        break;
      case 65:
        this.$ = new Declaration(fnParseDatatype($$[$0 - 1]), $$[$0]);
        break;
      case 66:
        this.$ = new Declaration(
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 2],
          $$[$0]
        );
        break;
      case 67:
        this.$ = new Assign($$[$0 - 2], $$[$0]);
        break;
      case 68:
        this.$ = new If($$[$0 - 4], $$[$0 - 1]);
        break;
      case 69:
        this.$ = new If($$[$0 - 8], $$[$0 - 5], undefined, $$[$0 - 1]);
        break;
      case 70:
        this.$ = new If($$[$0 - 5], $$[$0 - 2], $$[$0]);
        break;
      case 71:
        this.$ = new If($$[$0 - 9], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 72:
        $$[$0 - 7].push(new Elif($$[$0 - 4], $$[$0 - 1]));
        this.$ = $$[$0 - 7];
        break;
      case 73:
        this.$ = new Array<Elif>();
        this.$[0] = new Elif($$[$0 - 4], $$[$0 - 1]);
        break;
      case 74:
        this.$ = new While($$[$0 - 4], $$[$0 - 1]);
        break;
      case 75:
        this.$ = new DoWhile($$[$0 - 2], $$[$0 - 6]);
        break;
      case 76:
        this.$ = new DoUntil($$[$0 - 2], $$[$0 - 6]);
        break;
      case 77:
        $$[$0 - 3].push({ datatype: fnParseDatatype($$[$0 - 1]), id: $$[$0] });
        this.$ = $$[$0 - 3];
        break;
      case 78:
        this.$ = new Array<IParam>();
        this.$[0] = { datatype: fnParseDatatype($$[$0 - 1]), id: $$[$0] };
        break;
      case 79:
        this.$ = new FunctionDef(
          $$[$0 - 8],
          $$[$0 - 6],
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 1]
        );
        break;
      case 80:
        this.$ = new FunctionDef(
          $$[$0 - 7],
          undefined,
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 1]
        );
        break;
      case 81:
        this.$ = new Method($$[$0 - 8], $$[$0 - 6], $$[$0 - 1]);
        break;
      case 82:
        this.$ = new Method($$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 83:
        this.$ = new Method($$[$0 - 7], undefined, $$[$0 - 1]);
        break;
      case 84:
        this.$ = new Method($$[$0 - 5], undefined, $$[$0 - 1]);
        break;
      case 86:
      case 103:
        this.$ = new Array<IExpression>();
        this.$[0] = $$[$0];
        break;
      case 87:
        this.$ = new Call($$[$0 - 3], $$[$0 - 1]);
        break;
      case 88:
        this.$ = new Call($$[$0 - 2], undefined);
        break;
      case 89:
        this.$ = new For($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 95:
        this.$ = new Switch($$[$0 - 4], $$[$0 - 1], undefined);
        break;
      case 96:
        this.$ = new Switch($$[$0 - 7], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 97:
        this.$ = new Switch($$[$0 - 6], undefined, $$[$0 - 2]);
        break;
      case 98:
        $$[$0 - 4].push(new Case($$[$0 - 2], $$[$0]));
        this.$ = $$[$0 - 4];
        break;
      case 99:
        this.$ = new Array<Case>();
        this.$[0] = new Case($$[$0 - 2], $$[$0]);
        break;
      case 100:
        this.$ = new DeclareArrayOne(
          fnParseDatatype($$[$0 - 9]),
          $$[$0 - 6],
          $$[$0 - 1],
          undefined
        );
        break;
      case 101:
        this.$ = new DeclareArrayOne(
          fnParseDatatype($$[$0 - 7]),
          $$[$0 - 4],
          undefined,
          $$[$0 - 1]
        );
        break;
      case 104:
        $$[$0 - 4].push($$[$0 - 2]);
        this.$ = $$[$0 - 4];
        break;
      case 105:
        this.$ = new Array<Array<IExpression>>();
        this.$[0] = $$[$0 - 2];
        break;
      case 106:
        this.$ = new DeclareArrayTwo(
          fnParseDatatype($$[$0 - 14]),
          $$[$0 - 9],
          undefined,
          $$[$0 - 4],
          $$[$0 - 1]
        );
        break;
      case 107:
        this.$ = new DeclareArrayTwo(
          fnParseDatatype($$[$0 - 9]),
          $$[$0 - 4],
          $$[$0 - 1],
          undefined,
          undefined
        );
        break;
      case 108:
        this.$ = new Print($$[$0 - 1]);
        break;
      case 109:
        this.$ = new Println($$[$0 - 1]);
        break;
      case 110:
        this.$ = new AccessArray($$[$0 - 3], $$[$0 - 1]);
        break;
      case 111:
        this.$ = new AccessMatrix($$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
    }
  }
}

/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from "@ts-jison/lexer";
export class TsLanguageLexer extends JisonLexer implements JisonLexerApi {
  options: any = { "case-insensitive": true, moduleName: "TsLanguage" };
  constructor(yy = {}) {
    super(yy);
  }

  rules: RegExp[] = [
    /^(?:\s+)/i,
    /^(?:\/\/.*)/i,
    /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,
    /^(?:[0-9]+(\.[0-9]+)\b)/i,
    /^(?:[0-9]+\b)/i,
    /^(?:True|False\b)/i,
    /^(?:"((\\")|[\\n]|[\\\\]|[^\"])*")/i,
    /^(?:'((\\')|[\\n]|[\\\\]|[^\'])?')/i,
    /^(?:\+\+)/i,
    /^(?:--)/i,
    /^(?:\+)/i,
    /^(?:-)/i,
    /^(?:\*)/i,
    /^(?:\/)/i,
    /^(?:%)/i,
    /^(?:\^)/i,
    /^(?:==)/i,
    /^(?:!=)/i,
    /^(?:<=)/i,
    /^(?:>=)/i,
    /^(?:<)/i,
    /^(?:>)/i,
    /^(?:\?)/i,
    /^(?::)/i,
    /^(?:&&)/i,
    /^(?:\|\|)/i,
    /^(?:!)/i,
    /^(?:\()/i,
    /^(?:\))/i,
    /^(?:\{)/i,
    /^(?:\})/i,
    /^(?:\[)/i,
    /^(?:\])/i,
    /^(?:;)/i,
    /^(?:,)/i,
    /^(?:=)/i,
    /^(?:Int\b)/i,
    /^(?:Double\b)/i,
    /^(?:Boolean\b)/i,
    /^(?:Char\b)/i,
    /^(?:String\b)/i,
    /^(?:new\b)/i,
    /^(?:if\b)/i,
    /^(?:else\b)/i,
    /^(?:elif\b)/i,
    /^(?:switch\b)/i,
    /^(?:case\b)/i,
    /^(?:break\b)/i,
    /^(?:default\b)/i,
    /^(?:continue\b)/i,
    /^(?:while\b)/i,
    /^(?:for\b)/i,
    /^(?:do\b)/i,
    /^(?:until\b)/i,
    /^(?:return\b)/i,
    /^(?:void\b)/i,
    /^(?:print\b)/i,
    /^(?:println\b)/i,
    /^(?:[0-9a-zA-Z_]+)/i,
    /^(?:$)/i,
    /^(?:.)/i,
  ];
  conditions: any = {
    INITIAL: {
      rules: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
        56, 57, 58, 59, 60,
      ],
      inclusive: true,
    },
  };
  performAction(
    yy: any,
    yy_: any,
    $avoiding_name_collisions: any,
    YY_START: any
  ): any {
    var YYSTATE = YY_START;
    switch ($avoiding_name_collisions) {
      case 0: // ignore whitespaces
        break;
      case 1: // ignore comments
        break;
      case 2: // ignore comments
        break;
      case 3:
        return 55;
        break;
      case 4:
        return 56;
        break;
      case 5:
        return 57;
        break;
      case 6:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 58;
        break;
      case 7:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 59;
        break;
      case 8:
        return 66;
        break;
      case 9:
        return 67;
        break;
      case 10:
        return 46;
        break;
      case 11:
        return 47;
        break;
      case 12:
        return 48;
        break;
      case 13:
        return 49;
        break;
      case 14:
        return 50;
        break;
      case 15:
        return 51;
        break;
      case 16:
        return 44;
        break;
      case 17:
        return 45;
        break;
      case 18:
        return 42;
        break;
      case 19:
        return 43;
        break;
      case 20:
        return 40;
        break;
      case 21:
        return 41;
        break;
      case 22:
        return 61;
        break;
      case 23:
        return 62;
        break;
      case 24:
        return 52;
        break;
      case 25:
        return 53;
        break;
      case 26:
        return 54;
        break;
      case 27:
        return 63;
        break;
      case 28:
        return 64;
        break;
      case 29:
        return 72;
        break;
      case 30:
        return 73;
        break;
      case 31:
        return 90;
        break;
      case 32:
        return 91;
        break;
      case 33:
        return 12;
        break;
      case 34:
        return 69;
        break;
      case 35:
        return 70;
        break;
      case 36:
        return 65;
        break;
      case 37:
        return 65;
        break;
      case 38:
        return 65;
        break;
      case 39:
        return 65;
        break;
      case 40:
        return 65;
        break;
      case 41:
        return 92;
        break;
      case 42:
        return 71;
        break;
      case 43:
        return 74;
        break;
      case 44:
        return 76;
        break;
      case 45:
        return 86;
        break;
      case 46:
        return 89;
        break;
      case 47:
        return 24;
        break;
      case 48:
        return 88;
        break;
      case 49:
        return 25;
        break;
      case 50:
        return 77;
        break;
      case 51:
        return 83;
        break;
      case 52:
        return 78;
        break;
      case 53:
        return 79;
        break;
      case 54:
        return 26;
        break;
      case 55:
        return 81;
        break;
      case 56:
        return 95;
        break;
      case 57:
        return 96;
        break;
      case 58:
        return 60;
        break;
      case 59:
        return 5; // end of file
        break;
      case 60:
        addError({
          type: EnumError.LEXICAL_ERROR,
          message: yy_.yytext,
          line: yy_.yylloc.first_line,
          column: yy_.yylloc.first_column,
        });
        break;
    }
  }
}
