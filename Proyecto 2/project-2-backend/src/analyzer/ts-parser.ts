/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

import { IError } from "./exceptions/IError";
import { EnumError } from "./exceptions/EnumError";

import { IStatement } from "./abstract/IStatement";
import { IExpression } from "./abstract/IExpression";
import { IParam } from "./abstract/IParam";

import { Declaration } from "./statements/Declaration";
import { Assign } from "./statements/Assign";
import { If } from "./statements/If";
import { Elif } from "./statements/Elif";
import { Print } from "./statements/Print";
import { Println } from "./statements/Println";
import { While } from "./statements/While";
import { BreakLoop } from "./statements/BreakLoop";
import { ContinueLoop } from "./statements/ContinueLoop";
import { DoWhile } from "./statements/DoWhile";
import { DoUntil } from "./statements/DoUntil";
import { Return } from "./statements/Return";
import { FunctionDef } from "./statements/FunctionDef";
import { Method } from "./statements/Method";

import fnParseDatatype from "./functions/fnParseDatatype";
import fnParseBoolean from "./functions/fnParseBoolean";

import { Terminals } from "./enums/EnumTerminals";
import { RelationalOp } from "./enums/EnumRelational";
import { ArithmeticOp } from "./enums/EnumArithmetic";
import { LogicalOp } from "./enums/EnumLogical";

import { Terminal } from "./expressions/Terminal";
import { Relational } from "./expressions/Relational";
import { Arithmetic } from "./expressions/Arithmetic";
import { Logical } from "./expressions/Logical";
import { Negative } from "./expressions/Negative";
import { Not } from "./expressions/Not";
import { Ternary } from "./expressions/Ternary";
import { Increment } from "./expressions/Increment";
import { Decrement } from "./expressions/Decrement";
import { Cast } from "./expressions/Cast";
import { Call } from "./expressions/Call";

let errors: IError[] = [];

const addError = (error: IError) => {
  if (error.type === EnumError.LEXICAL_ERROR) {
    error.message = `Caracter: " ${error.message} ", no reconocido como parte del lenguaje`;
  } else if (error.type === EnumError.SYNTAX_ERROR) {
    error.message = `No se esperaba: " ${error.message} ", como parte del lenguaje`;
  }
  console.error(error);
  errors.push(error);
};

import {
  JisonParser,
  JisonParserApi,
  StateType,
  SymbolsType,
  TerminalsType,
  ProductionsType,
  o,
} from "@ts-jison/parser";
const $V0 = [1, 15],
  $V1 = [1, 16],
  $V2 = [1, 17],
  $V3 = [1, 18],
  $V4 = [1, 19],
  $V5 = [1, 21],
  $V6 = [1, 22],
  $V7 = [1, 23],
  $V8 = [1, 24],
  $V9 = [1, 25],
  $Va = [5, 20, 21, 22, 54, 59, 65, 66, 67, 73, 74],
  $Vb = [5, 20, 21, 22, 54, 59, 65, 66, 67, 69, 73, 74],
  $Vc = [1, 45],
  $Vd = [1, 46],
  $Ve = [1, 48],
  $Vf = [1, 49],
  $Vg = [1, 50],
  $Vh = [1, 51],
  $Vi = [1, 52],
  $Vj = [1, 53],
  $Vk = [1, 47],
  $Vl = [2, 58],
  $Vm = [1, 56],
  $Vn = [1, 58],
  $Vo = [1, 71],
  $Vp = [1, 72],
  $Vq = [1, 73],
  $Vr = [1, 74],
  $Vs = [1, 75],
  $Vt = [1, 76],
  $Vu = [1, 65],
  $Vv = [1, 66],
  $Vw = [1, 67],
  $Vx = [1, 68],
  $Vy = [1, 69],
  $Vz = [1, 70],
  $VA = [1, 77],
  $VB = [1, 78],
  $VC = [1, 79],
  $VD = [
    12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 63,
  ],
  $VE = [12, 63, 64],
  $VF = [12, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 55, 56, 58, 63],
  $VG = [12, 46, 47, 55, 56, 58, 63],
  $VH = [20, 21, 22, 54, 59, 65, 66, 67, 69, 73, 74],
  $VI = [12, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 55, 56, 58, 63],
  $VJ = [12, 34, 35, 36, 37, 38, 39, 46, 47, 55, 56, 58, 63],
  $VK = [58, 63],
  $VL = [5, 20, 21, 22, 54, 59, 65, 66, 67, 69, 70, 72, 73, 74];

export class TsLanguageParser extends JisonParser implements JisonParserApi {
  $?: any;

  constructor(yy = {}, lexer = new TsLanguageLexer(yy)) {
    super(yy, lexer);
  }

  symbols_: SymbolsType = {
    error: 2,
    ini: 3,
    main_statements: 4,
    EOF: 5,
    main_statement: 6,
    standard_statement: 7,
    function: 8,
    method: 9,
    standard_statements: 10,
    declaration: 11,
    END_SENTENCE: 12,
    assign: 13,
    print_st: 14,
    println_st: 15,
    if: 16,
    while: 17,
    do_while: 18,
    do_until: 19,
    BREAK: 20,
    CONTINUE: 21,
    RETURN: 22,
    expr: 23,
    arithmetic: 24,
    relational: 25,
    logical: 26,
    ternary: 27,
    group: 28,
    value: 29,
    cast: 30,
    increment: 31,
    decrement: 32,
    call: 33,
    LESS: 34,
    GREATER: 35,
    LESS_EQUAL: 36,
    GREATER_EQUAL: 37,
    EQUAL: 38,
    NOT_EQUAL: 39,
    ADD: 40,
    MINUS: 41,
    PRODUCT: 42,
    DIVISION: 43,
    MODULE: 44,
    POWER: 45,
    AND: 46,
    OR: 47,
    NOT: 48,
    DECIMAL: 49,
    INTEGER: 50,
    LOGICAL: 51,
    STRING: 52,
    CHAR: 53,
    IDENTIFIER: 54,
    TERNARY_IF: 55,
    TERNARY_ELSE: 56,
    OPEN_PARENTHESIS: 57,
    CLOSE_PARENTHESIS: 58,
    TYPE: 59,
    INCREMENT: 60,
    DECREMENT: 61,
    list_identifiers: 62,
    COMMA: 63,
    ASSIGNMENT: 64,
    PRINT: 65,
    PRINTLN: 66,
    IF: 67,
    OPEN_BRACE: 68,
    CLOSE_BRACE: 69,
    ELSE: 70,
    elifs: 71,
    ELIF: 72,
    WHILE: 73,
    DO: 74,
    UNTIL: 75,
    parameters: 76,
    VOID: 77,
    arguments: 78,
    $accept: 0,
    $end: 1,
  };
  terminals_: TerminalsType = {
    2: "error",
    5: "EOF",
    12: "END_SENTENCE",
    20: "BREAK",
    21: "CONTINUE",
    22: "RETURN",
    34: "LESS",
    35: "GREATER",
    36: "LESS_EQUAL",
    37: "GREATER_EQUAL",
    38: "EQUAL",
    39: "NOT_EQUAL",
    40: "ADD",
    41: "MINUS",
    42: "PRODUCT",
    43: "DIVISION",
    44: "MODULE",
    45: "POWER",
    46: "AND",
    47: "OR",
    48: "NOT",
    49: "DECIMAL",
    50: "INTEGER",
    51: "LOGICAL",
    52: "STRING",
    53: "CHAR",
    54: "IDENTIFIER",
    55: "TERNARY_IF",
    56: "TERNARY_ELSE",
    57: "OPEN_PARENTHESIS",
    58: "CLOSE_PARENTHESIS",
    59: "TYPE",
    60: "INCREMENT",
    61: "DECREMENT",
    63: "COMMA",
    64: "ASSIGNMENT",
    65: "PRINT",
    66: "PRINTLN",
    67: "IF",
    68: "OPEN_BRACE",
    69: "CLOSE_BRACE",
    70: "ELSE",
    72: "ELIF",
    73: "WHILE",
    74: "DO",
    75: "UNTIL",
    77: "VOID",
  };
  productions_: ProductionsType = [
    0,
    [3, 2],
    [4, 2],
    [4, 1],
    [6, 1],
    [6, 1],
    [6, 1],
    [10, 2],
    [10, 1],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 2],
    [7, 2],
    [7, 3],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [23, 1],
    [25, 3],
    [25, 3],
    [25, 3],
    [25, 3],
    [25, 3],
    [25, 3],
    [24, 3],
    [24, 3],
    [24, 3],
    [24, 3],
    [24, 3],
    [24, 3],
    [24, 2],
    [26, 3],
    [26, 3],
    [26, 2],
    [29, 1],
    [29, 1],
    [29, 1],
    [29, 1],
    [29, 1],
    [29, 1],
    [27, 5],
    [28, 3],
    [30, 4],
    [31, 2],
    [32, 2],
    [62, 3],
    [62, 1],
    [11, 2],
    [11, 4],
    [13, 3],
    [14, 4],
    [15, 4],
    [16, 7],
    [16, 11],
    [16, 8],
    [16, 12],
    [71, 8],
    [71, 7],
    [17, 7],
    [18, 9],
    [19, 9],
    [76, 4],
    [76, 2],
    [8, 9],
    [8, 8],
    [9, 9],
    [9, 7],
    [9, 8],
    [9, 6],
    [78, 3],
    [78, 1],
    [33, 4],
    [33, 3],
  ];
  table: Array<StateType> = [
    {
      3: 1,
      4: 2,
      6: 3,
      7: 4,
      8: 5,
      9: 6,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $V3,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    { 1: [3] },
    {
      5: [1, 26],
      6: 27,
      7: 4,
      8: 5,
      9: 6,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $V3,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    o($Va, [2, 3]),
    o($Va, [2, 4]),
    o($Va, [2, 5]),
    o($Va, [2, 6]),
    { 12: [1, 28] },
    { 12: [1, 29] },
    { 12: [1, 30] },
    { 12: [1, 31] },
    o($Vb, [2, 13]),
    o($Vb, [2, 14]),
    o($Vb, [2, 15]),
    o($Vb, [2, 16]),
    { 12: [1, 32] },
    { 12: [1, 33] },
    {
      23: 34,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    o([63, 64], $Vl, { 57: [1, 54] }),
    { 54: $Vm, 62: 55 },
    { 63: $Vn, 64: [1, 57] },
    { 57: [1, 59] },
    { 57: [1, 60] },
    { 57: [1, 61] },
    { 57: [1, 62] },
    { 68: [1, 63] },
    { 1: [2, 1] },
    o($Va, [2, 2]),
    o($Vb, [2, 9]),
    o($Vb, [2, 10]),
    o($Vb, [2, 11]),
    o($Vb, [2, 12]),
    o($Vb, [2, 17]),
    o($Vb, [2, 18]),
    {
      12: [1, 64],
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
    },
    o($VD, [2, 20]),
    o($VD, [2, 21]),
    o($VD, [2, 22]),
    o($VD, [2, 23]),
    o($VD, [2, 24]),
    o($VD, [2, 25]),
    o($VD, [2, 26]),
    o($VD, [2, 27]),
    o($VD, [2, 28]),
    o($VD, [2, 29]),
    {
      23: 80,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 81,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 82,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
      59: [1, 83],
    },
    o($VD, [2, 46]),
    o($VD, [2, 47]),
    o($VD, [2, 48]),
    o($VD, [2, 49]),
    o($VD, [2, 50]),
    o($VD, [2, 51], { 57: [1, 86], 60: [1, 84], 61: [1, 85] }),
    { 58: [1, 88], 59: [1, 89], 76: 87 },
    { 12: [2, 59], 63: $Vn, 64: [1, 90] },
    o($VE, $Vl),
    {
      23: 91,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    { 54: [1, 92] },
    {
      23: 93,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 94,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 95,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 96,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      7: 98,
      10: 97,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    o($Vb, [2, 19]),
    {
      23: 99,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 100,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 101,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 102,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 103,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 104,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 105,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 106,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 107,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 108,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 109,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 110,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 111,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 112,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 113,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    o($VF, [2, 42], { 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VG, [2, 45], {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
    }),
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 114],
    },
    { 58: [1, 115] },
    o($VD, [2, 55]),
    o($VD, [2, 56]),
    {
      23: 118,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
      58: [1, 117],
      78: 116,
    },
    { 58: [1, 119], 63: [1, 120] },
    { 56: [1, 121], 68: [1, 122] },
    { 54: [1, 123] },
    {
      23: 124,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      12: [2, 61],
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
    },
    o($VE, [2, 57]),
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 125],
    },
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 126],
    },
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 127],
    },
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 128],
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 129],
      73: $V8,
      74: $V9,
    },
    o($VH, [2, 8]),
    o($VF, [2, 36], { 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VF, [2, 37], { 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VI, [2, 38], { 44: $Vy, 45: $Vz }),
    o($VI, [2, 39], { 44: $Vy, 45: $Vz }),
    o($VD, [2, 40]),
    o($VD, [2, 41]),
    o($VJ, [2, 30], { 40: $Vu, 41: $Vv, 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VJ, [2, 31], { 40: $Vu, 41: $Vv, 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VJ, [2, 32], { 40: $Vu, 41: $Vv, 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VJ, [2, 33], { 40: $Vu, 41: $Vv, 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VJ, [2, 34], { 40: $Vu, 41: $Vv, 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VJ, [2, 35], { 40: $Vu, 41: $Vv, 42: $Vw, 43: $Vx, 44: $Vy, 45: $Vz }),
    o($VG, [2, 43], {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
    }),
    o([12, 47, 55, 56, 58, 63], [2, 44], {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
    }),
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      56: [1, 131],
    },
    o($VD, [2, 53]),
    {
      23: 132,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    { 58: [1, 133], 63: [1, 134] },
    o($VD, [2, 84]),
    o($VK, [2, 82], {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
    }),
    { 56: [1, 135], 68: [1, 136] },
    { 59: [1, 137] },
    { 59: [1, 138], 77: [1, 139] },
    {
      7: 98,
      10: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    o($VK, [2, 74]),
    {
      12: [2, 60],
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
    },
    { 12: [2, 62] },
    { 12: [2, 63] },
    { 68: [1, 141] },
    { 68: [1, 142] },
    { 73: [1, 143], 75: [1, 144] },
    o($VH, [2, 7]),
    {
      23: 145,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    o($VD, [2, 54]),
    o($VD, [2, 83]),
    {
      23: 146,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    { 59: [1, 147], 77: [1, 148] },
    {
      7: 98,
      10: 149,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    { 54: [1, 150] },
    { 68: [1, 151] },
    { 68: [1, 152] },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 153],
      73: $V8,
      74: $V9,
    },
    {
      7: 98,
      10: 154,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    {
      7: 98,
      10: 155,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    { 57: [1, 156] },
    { 57: [1, 157] },
    o([12, 56, 58, 63], [2, 52], {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
    }),
    o($VK, [2, 81], {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
    }),
    { 68: [1, 158] },
    { 68: [1, 159] },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 160],
      73: $V8,
      74: $V9,
    },
    o($VK, [2, 73]),
    {
      7: 98,
      10: 161,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    {
      7: 98,
      10: 162,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    o($Va, [2, 80]),
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 163],
      73: $V8,
      74: $V9,
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 164],
      73: $V8,
      74: $V9,
    },
    {
      23: 165,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      23: 166,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      7: 98,
      10: 167,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    {
      7: 98,
      10: 168,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    o($Va, [2, 78]),
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 169],
      73: $V8,
      74: $V9,
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 170],
      73: $V8,
      74: $V9,
    },
    o($Vb, [2, 64], { 71: 172, 70: [1, 171], 72: [1, 173] }),
    o($Vb, [2, 70]),
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 174],
    },
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 175],
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 176],
      73: $V8,
      74: $V9,
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 177],
      73: $V8,
      74: $V9,
    },
    o($Va, [2, 76]),
    o($Va, [2, 79]),
    { 68: [1, 178] },
    o($Vb, [2, 66], { 70: [1, 179], 72: [1, 180] }),
    { 57: [1, 181] },
    { 12: [1, 182] },
    { 12: [1, 183] },
    o($Va, [2, 75]),
    o($Va, [2, 77]),
    {
      7: 98,
      10: 184,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    { 68: [1, 185] },
    { 57: [1, 186] },
    {
      23: 187,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    o($Vb, [2, 71]),
    o($Vb, [2, 72]),
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 188],
      73: $V8,
      74: $V9,
    },
    {
      7: 98,
      10: 189,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    {
      23: 190,
      24: 35,
      25: 36,
      26: 37,
      27: 38,
      28: 39,
      29: 40,
      30: 41,
      31: 42,
      32: 43,
      33: 44,
      41: $Vc,
      48: $Vd,
      49: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      57: $Vk,
    },
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 191],
    },
    o($Vb, [2, 65]),
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 192],
      73: $V8,
      74: $V9,
    },
    {
      34: $Vo,
      35: $Vp,
      36: $Vq,
      37: $Vr,
      38: $Vs,
      39: $Vt,
      40: $Vu,
      41: $Vv,
      42: $Vw,
      43: $Vx,
      44: $Vy,
      45: $Vz,
      46: $VA,
      47: $VB,
      55: $VC,
      58: [1, 193],
    },
    { 68: [1, 194] },
    o($Vb, [2, 67]),
    { 68: [1, 195] },
    {
      7: 98,
      10: 196,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    {
      7: 98,
      10: 197,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      73: $V8,
      74: $V9,
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 198],
      73: $V8,
      74: $V9,
    },
    {
      7: 130,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: $V0,
      21: $V1,
      22: $V2,
      54: $Vm,
      59: $V4,
      62: 20,
      65: $V5,
      66: $V6,
      67: $V7,
      69: [1, 199],
      73: $V8,
      74: $V9,
    },
    o($VL, [2, 69]),
    o($VL, [2, 68]),
  ];
  defaultActions: { [key: number]: any } = {
    26: [2, 1],
    125: [2, 62],
    126: [2, 63],
  };

  performAction(
    yytext: string,
    yyleng: number,
    yylineno: number,
    yy: any,
    yystate: number /* action[1] */,
    $$: any /* vstack */,
    _$: any /* lstack */
  ): any {
    /* this == yyval */
    var $0 = $$.length - 1;
    switch (yystate) {
      case 1:
        return $$[$0 - 1];
      case 2:
      case 7:
        $$[$0 - 1].push($$[$0]);
        this.$ = $$[$0 - 1];
        break;
      case 3:
      case 8:
        this.$ = new Array<IStatement>();
        this.$[0] = $$[$0];
        break;
      case 4:
      case 5:
      case 6:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        this.$ = $$[$0];
        break;
      case 9:
      case 10:
      case 11:
      case 12:
      case 53:
        this.$ = $$[$0 - 1];
        break;
      case 17:
        this.$ = new BreakLoop();
        break;
      case 18:
        this.$ = new ContinueLoop();
        break;
      case 19:
        this.$ = new Return($$[$0 - 1]);
        break;
      case 30:
        this.$ = new Relational($$[$0 - 2], RelationalOp.LESS_THAN, $$[$0]);
        break;
      case 31:
        this.$ = new Relational($$[$0 - 2], RelationalOp.GREATER_THAN, $$[$0]);
        break;
      case 32:
        this.$ = new Relational(
          $$[$0 - 2],
          RelationalOp.LESS_THAN_EQUAL,
          $$[$0]
        );
        break;
      case 33:
        this.$ = new Relational(
          $$[$0 - 2],
          RelationalOp.GREATER_THAN_EQUAL,
          $$[$0]
        );
        break;
      case 34:
        this.$ = new Relational($$[$0 - 2], RelationalOp.EQUAL, $$[$0]);
        break;
      case 35:
        this.$ = new Relational($$[$0 - 2], RelationalOp.NOT_EQUAL, $$[$0]);
        break;
      case 36:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.ADD, $$[$0]);
        break;
      case 37:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.MINUS, $$[$0]);
        break;
      case 38:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.PRODUCT, $$[$0]);
        break;
      case 39:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.DIVISION, $$[$0]);
        break;
      case 40:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.MODULE, $$[$0]);
        break;
      case 41:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.POWER, $$[$0]);
        break;
      case 42:
        this.$ = new Negative($$[$0]);
        break;
      case 43:
        this.$ = new Logical($$[$0 - 2], LogicalOp.AND, $$[$0]);
        break;
      case 44:
        this.$ = new Logical($$[$0 - 2], LogicalOp.OR, $$[$0]);
        break;
      case 45:
        this.$ = new Not($$[$0]);
        break;
      case 46:
        this.$ = new Terminal(Terminals.DECIMAL, Number($$[$0]));
        break;
      case 47:
        this.$ = new Terminal(Terminals.INTEGER, Number($$[$0]));
        break;
      case 48:
        this.$ = new Terminal(Terminals.LOGICAL, fnParseBoolean($$[$0]));
        break;
      case 49:
        this.$ = new Terminal(Terminals.STRING, $$[$0]);
        break;
      case 50:
        this.$ = new Terminal(Terminals.CHAR, $$[$0]);
        break;
      case 51:
        this.$ = new Terminal(Terminals.ID, $$[$0]);
        break;
      case 52:
        this.$ = new Ternary($$[$0 - 4], $$[$0 - 2], $$[$0]);
        break;
      case 54:
        this.$ = new Cast(fnParseDatatype($$[$0 - 2]), $$[$0]);
        break;
      case 55:
        this.$ = new Increment($$[$0 - 1]);
        break;
      case 56:
        this.$ = new Decrement($$[$0 - 1]);
        break;
      case 57:
      case 81:
        $$[$0 - 2].push($$[$0]);
        this.$ = $$[$0 - 2];
        break;
      case 58:
        this.$ = [$$[$0]];
        break;
      case 59:
        this.$ = new Declaration(fnParseDatatype($$[$0 - 1]), $$[$0]);
        break;
      case 60:
        this.$ = new Declaration(
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 2],
          $$[$0]
        );
        break;
      case 61:
        this.$ = new Assign($$[$0 - 2], $$[$0]);
        break;
      case 62:
        this.$ = new Print($$[$0 - 1]);
        break;
      case 63:
        this.$ = new Println($$[$0 - 1]);
        break;
      case 64:
        this.$ = new If($$[$0 - 4], $$[$0 - 1]);
        break;
      case 65:
        this.$ = new If($$[$0 - 8], $$[$0 - 5], undefined, $$[$0 - 1]);
        break;
      case 66:
        this.$ = new If($$[$0 - 5], $$[$0 - 2], $$[$0]);
        break;
      case 67:
        this.$ = new If($$[$0 - 9], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 68:
        $$[$0 - 7].push(new Elif($$[$0 - 4], $$[$0 - 1]));
        this.$ = $$[$0 - 7];
        break;
      case 69:
        this.$ = new Array<Elif>();
        this.$[0] = new Elif($$[$0 - 4], $$[$0 - 1]);
        break;
      case 70:
        this.$ = new While($$[$0 - 4], $$[$0 - 1]);
        break;
      case 71:
        this.$ = new DoWhile($$[$0 - 2], $$[$0 - 6]);
        break;
      case 72:
        this.$ = new DoUntil($$[$0 - 2], $$[$0 - 6]);
        break;
      case 73:
        $$[$0 - 3].push({ datatype: fnParseDatatype($$[$0 - 1]), id: $$[$0] });
        this.$ = $$[$0 - 3];
        break;
      case 74:
        this.$ = new Array<IParam>();
        this.$[0] = { datatype: fnParseDatatype($$[$0 - 1]), id: $$[$0] };
        break;
      case 75:
        this.$ = new FunctionDef(
          $$[$0 - 8],
          $$[$0 - 6],
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 1]
        );
        break;
      case 76:
        this.$ = new FunctionDef(
          $$[$0 - 7],
          undefined,
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 1]
        );
        break;
      case 77:
        this.$ = new Method($$[$0 - 8], $$[$0 - 6], $$[$0 - 1]);
        break;
      case 78:
        this.$ = new Method($$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 79:
        this.$ = new Method($$[$0 - 7], undefined, $$[$0 - 1]);
        break;
      case 80:
        this.$ = new Method($$[$0 - 5], undefined, $$[$0 - 1]);
        break;
      case 82:
        this.$ = new Array<IExpression>();
        this.$[0] = $$[$0];
        break;
      case 83:
        this.$ = new Call($$[$0 - 3], $$[$0 - 1]);
        break;
      case 84:
        this.$ = new Call($$[$0 - 2], undefined);
        break;
    }
  }
}

/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from "@ts-jison/lexer";
export class TsLanguageLexer extends JisonLexer implements JisonLexerApi {
  options: any = { "case-insensitive": true, moduleName: "TsLanguage" };
  constructor(yy = {}) {
    super(yy);
  }

  rules: RegExp[] = [
    /^(?:\s+)/i,
    /^(?:\/\/.*)/i,
    /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,
    /^(?:[0-9]+(\.[0-9]+)\b)/i,
    /^(?:[0-9]+\b)/i,
    /^(?:True|False\b)/i,
    /^(?:"((\\")|[\\n]|[\\\\]|[^\"])*")/i,
    /^(?:'((\\')|[\\n]|[\\\\]|[^\'])?')/i,
    /^(?:\+\+)/i,
    /^(?:--)/i,
    /^(?:\+)/i,
    /^(?:-)/i,
    /^(?:\*)/i,
    /^(?:\/)/i,
    /^(?:%)/i,
    /^(?:\^)/i,
    /^(?:==)/i,
    /^(?:!=)/i,
    /^(?:<=)/i,
    /^(?:>=)/i,
    /^(?:<)/i,
    /^(?:>)/i,
    /^(?:\?)/i,
    /^(?::)/i,
    /^(?:&&)/i,
    /^(?:\|\|)/i,
    /^(?:!)/i,
    /^(?:\()/i,
    /^(?:\))/i,
    /^(?:\{)/i,
    /^(?:\})/i,
    /^(?:\[)/i,
    /^(?:\])/i,
    /^(?:;)/i,
    /^(?:,)/i,
    /^(?:=)/i,
    /^(?:Int\b)/i,
    /^(?:Double\b)/i,
    /^(?:Boolean\b)/i,
    /^(?:Char\b)/i,
    /^(?:String\b)/i,
    /^(?:new\b)/i,
    /^(?:if\b)/i,
    /^(?:else\b)/i,
    /^(?:elif\b)/i,
    /^(?:switch\b)/i,
    /^(?:case\b)/i,
    /^(?:break\b)/i,
    /^(?:default\b)/i,
    /^(?:continue\b)/i,
    /^(?:while\b)/i,
    /^(?:for\b)/i,
    /^(?:do\b)/i,
    /^(?:until\b)/i,
    /^(?:return\b)/i,
    /^(?:void\b)/i,
    /^(?:print\b)/i,
    /^(?:println\b)/i,
    /^(?:[0-9a-zA-Z_]+)/i,
    /^(?:$)/i,
    /^(?:.)/i,
  ];
  conditions: any = {
    INITIAL: {
      rules: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
        56, 57, 58, 59, 60,
      ],
      inclusive: true,
    },
  };
  performAction(
    yy: any,
    yy_: any,
    $avoiding_name_collisions: any,
    YY_START: any
  ): any {
    var YYSTATE = YY_START;
    switch ($avoiding_name_collisions) {
      case 0: // ignore whitespaces
        break;
      case 1: // ignore comments
        break;
      case 2: // ignore comments
        break;
      case 3:
        return 49;
      case 4:
        return 50;
      case 5:
        return 51;
      case 6:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 52;
      case 7:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 53;
      case 8:
        return 60;
      case 9:
        return 61;
      case 10:
        return 40;
      case 11:
        return 41;
      case 12:
        return 42;
      case 13:
        return 43;
      case 14:
        return 44;
      case 15:
        return 45;
      case 16:
        return 38;
      case 17:
        return 39;
      case 18:
        return 36;
      case 19:
        return 37;
      case 20:
        return 34;
      case 21:
        return 35;
      case 22:
        return 55;
      case 23:
        return 56;
      case 24:
        return 46;
      case 25:
        return 47;
      case 26:
        return 48;
      case 27:
        return 57;
      case 28:
        return 58;
      case 29:
        return 68;
      case 30:
        return 69;
      case 31:
        return "OPEN_BRACKET";
      case 32:
        return "CLOSE_BRACKET";
      case 33:
        return 12;
      case 34:
        return 63;
      case 35:
        return 64;
      case 36:
        return 59;
      case 37:
        return 59;
      case 38:
        return 59;
      case 39:
        return 59;
      case 40:
        return 59;
      case 41:
        return "NEW";
      case 42:
        return 67;
      case 43:
        return 70;
      case 44:
        return 72;
      case 45:
        return "SWITCH";
      case 46:
        return "CASE";
      case 47:
        return 20;
      case 48:
        return "DEFAULT";
      case 49:
        return 21;
      case 50:
        return 73;
      case 51:
        return "FOR";
      case 52:
        return 74;
      case 53:
        return 75;
      case 54:
        return 22;
      case 55:
        return 77;
      case 56:
        return 65;
      case 57:
        return 66;
      case 58:
        return 54;
      case 59:
        return 5; // end of file
      case 60:
        addError({
          type: EnumError.LEXICAL_ERROR,
          message: yy_.yytext,
          line: yy_.yylloc.first_line,
          column: yy_.yylloc.first_column,
        });
        break;
    }
  }
}
