/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    import { IError } from './exceptions/IError';
    import { EnumError } from './exceptions/EnumError';

    import { IStatement } from "./abstract/IStatement";
    import { IExpression } from "./abstract/IExpression";
    import { IParam } from "./abstract/IParam";

    import { Declaration } from "./statements/Declaration";
    import { Assign } from "./statements/Assign";
    import { If } from "./statements/If";
    import { Elif } from "./statements/Elif";
    import { Print } from "./statements/Print";
    import { Println } from "./statements/Println";
    import { While } from "./statements/While";
    import { BreakLoop } from "./statements/BreakLoop";
    import { ContinueLoop } from "./statements/ContinueLoop";
    import { DoWhile } from "./statements/DoWhile";
    import { DoUntil } from "./statements/DoUntil";
    import { Return } from "./statements/Return";
    import { FunctionDef } from "./statements/FunctionDef";
    import { Method } from "./statements/Method";
    import { For } from "./statements/For";


    import fnParseDatatype from "./functions/fnParseDatatype";
    import fnParseBoolean from "./functions/fnParseBoolean";

    import { Terminals } from "./enums/EnumTerminals";
    import { RelationalOp } from "./enums/EnumRelational";
    import { ArithmeticOp } from "./enums/EnumArithmetic";
    import { LogicalOp } from "./enums/EnumLogical";

    import { Terminal } from "./expressions/Terminal";
    import { Relational } from "./expressions/Relational";
    import { Arithmetic } from "./expressions/Arithmetic";
    import { Logical } from "./expressions/Logical";
    import { Negative } from "./expressions/Negative";
    import { Not } from "./expressions/Not";
    import { Ternary } from "./expressions/Ternary";
    import { Increment } from "./expressions/Increment";
    import { Decrement } from "./expressions/Decrement";
    import { Cast } from "./expressions/Cast";
    import { Call } from "./expressions/Call";


    let errors: IError[] = [];

    const addError = (error: IError) => {
        if (error.type === EnumError.LEXICAL_ERROR) {
            error.message = `Caracter: " ${error.message} ", no reconocido como parte del lenguaje`;
        } else if (error.type === EnumError.SYNTAX_ERROR) {
            error.message = `No se esperaba: " ${error.message} ", como parte del lenguaje`;
        }
        console.error(error);
        errors.push(error);
    };

import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,16],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[5,21,22,23,55,60,66,67,68,74,75,80],$Vc=[5,21,22,23,55,60,66,67,68,70,74,75,80],$Vd=[1,47],$Ve=[1,48],$Vf=[1,50],$Vg=[1,51],$Vh=[1,52],$Vi=[1,53],$Vj=[1,54],$Vk=[1,55],$Vl=[1,49],$Vm=[64,65],$Vn=[2,59],$Vo=[1,58],$Vp=[1,60],$Vq=[1,74],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[12,35,36,37,38,39,40,41,42,43,44,45,46,47,48,56,57,59,64],$VG=[1,87],$VH=[1,88],$VI=[12,64,65],$VJ=[12,35,36,37,38,39,40,41,42,47,48,56,57,59,64],$VK=[12,47,48,56,57,59,64],$VL=[21,22,23,55,60,66,67,68,70,74,75,80],$VM=[12,35,36,37,38,39,40,41,42,43,44,47,48,56,57,59,64],$VN=[12,35,36,37,38,39,40,47,48,56,57,59,64],$VO=[59,64],$VP=[5,21,22,23,55,60,66,67,68,70,71,73,74,75,80];

export class TsLanguageParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new TsLanguageLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"ini":3,"main_statements":4,"EOF":5,"main_statement":6,"standard_statement":7,"function":8,"method":9,"standard_statements":10,"declaration":11,"END_SENTENCE":12,"assign":13,"print_st":14,"println_st":15,"if":16,"while":17,"do_while":18,"do_until":19,"for":20,"BREAK":21,"CONTINUE":22,"RETURN":23,"expr":24,"arithmetic":25,"relational":26,"logical":27,"ternary":28,"group":29,"value":30,"cast":31,"increment":32,"decrement":33,"call":34,"LESS":35,"GREATER":36,"LESS_EQUAL":37,"GREATER_EQUAL":38,"EQUAL":39,"NOT_EQUAL":40,"ADD":41,"MINUS":42,"PRODUCT":43,"DIVISION":44,"MODULE":45,"POWER":46,"AND":47,"OR":48,"NOT":49,"DECIMAL":50,"INTEGER":51,"LOGICAL":52,"STRING":53,"CHAR":54,"IDENTIFIER":55,"TERNARY_IF":56,"TERNARY_ELSE":57,"OPEN_PARENTHESIS":58,"CLOSE_PARENTHESIS":59,"TYPE":60,"INCREMENT":61,"DECREMENT":62,"list_identifiers":63,"COMMA":64,"ASSIGNMENT":65,"PRINT":66,"PRINTLN":67,"IF":68,"OPEN_BRACE":69,"CLOSE_BRACE":70,"ELSE":71,"elifs":72,"ELIF":73,"WHILE":74,"DO":75,"UNTIL":76,"parameters":77,"VOID":78,"arguments":79,"FOR":80,"for_init":81,"for_update":82,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",12:"END_SENTENCE",21:"BREAK",22:"CONTINUE",23:"RETURN",35:"LESS",36:"GREATER",37:"LESS_EQUAL",38:"GREATER_EQUAL",39:"EQUAL",40:"NOT_EQUAL",41:"ADD",42:"MINUS",43:"PRODUCT",44:"DIVISION",45:"MODULE",46:"POWER",47:"AND",48:"OR",49:"NOT",50:"DECIMAL",51:"INTEGER",52:"LOGICAL",53:"STRING",54:"CHAR",55:"IDENTIFIER",56:"TERNARY_IF",57:"TERNARY_ELSE",58:"OPEN_PARENTHESIS",59:"CLOSE_PARENTHESIS",60:"TYPE",61:"INCREMENT",62:"DECREMENT",64:"COMMA",65:"ASSIGNMENT",66:"PRINT",67:"PRINTLN",68:"IF",69:"OPEN_BRACE",70:"CLOSE_BRACE",71:"ELSE",73:"ELIF",74:"WHILE",75:"DO",76:"UNTIL",78:"VOID",80:"FOR"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[7,2],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[27,3],[27,3],[27,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[28,5],[29,3],[31,4],[32,2],[33,2],[63,3],[63,1],[11,2],[11,4],[13,3],[14,4],[15,4],[16,7],[16,11],[16,8],[16,12],[72,8],[72,7],[17,7],[18,9],[19,9],[77,4],[77,2],[8,9],[8,8],[9,9],[9,7],[9,8],[9,6],[79,3],[79,1],[34,4],[34,3],[20,11],[81,1],[81,1],[82,1],[82,1],[82,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$V3,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$V3,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),{12:[1,30]},{12:[1,31]},{12:[1,32]},{12:[1,33]},o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),{12:[1,34]},{12:[1,35]},{24:36,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},o($Vm,$Vn,{58:[1,56]}),{55:$Vo,63:57},{64:$Vp,65:[1,59]},{58:[1,61]},{58:[1,62]},{58:[1,63]},{58:[1,64]},{69:[1,65]},{58:[1,66]},{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,18]),o($Vc,[2,19]),{12:[1,67],35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE},o($VF,[2,21]),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,27]),o($VF,[2,28]),o($VF,[2,29]),o($VF,[2,30]),{24:83,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:84,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:85,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl,60:[1,86]},o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52],{58:[1,89],61:$VG,62:$VH}),{59:[1,91],60:[1,92],77:90},{12:[2,60],64:$Vp,65:[1,93]},o($VI,$Vn),{24:94,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{55:[1,95]},{24:96,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:97,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:98,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:99,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{7:101,10:100,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{11:104,13:103,55:$Vo,60:$V4,63:21,81:102},o($Vc,[2,20]),{24:105,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:106,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:107,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:108,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:109,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:110,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:111,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:112,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:113,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:114,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:115,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:116,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:117,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:118,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:119,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},o($VJ,[2,43],{43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VK,[2,46],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,120]},{59:[1,121]},o($VF,[2,56]),o($VF,[2,57]),{24:124,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl,59:[1,123],79:122},{59:[1,125],64:[1,126]},{57:[1,127],69:[1,128]},{55:[1,129]},{24:130,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},o([12,59],[2,62],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE}),o($VI,[2,58]),{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,131]},{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,132]},{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,133]},{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,134]},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,135],74:$V8,75:$V9,80:$Va},o($VL,[2,8]),{12:[1,137]},{12:[2,87]},{12:[2,88]},o($VJ,[2,37],{43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VJ,[2,38],{43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VM,[2,39],{45:$VA,46:$VB}),o($VM,[2,40],{45:$VA,46:$VB}),o($VF,[2,41]),o($VF,[2,42]),o($VN,[2,31],{41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VN,[2,32],{41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VN,[2,33],{41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VN,[2,34],{41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VN,[2,35],{41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VN,[2,36],{41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o($VK,[2,44],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o([12,48,56,57,59,64],[2,45],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,57:[1,138]},o($VF,[2,54]),{24:139,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{59:[1,140],64:[1,141]},o($VF,[2,85]),o($VO,[2,83],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE}),{57:[1,142],69:[1,143]},{60:[1,144]},{60:[1,145],78:[1,146]},{7:101,10:147,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},o($VO,[2,75]),{12:[2,61],35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE},{12:[2,63]},{12:[2,64]},{69:[1,148]},{69:[1,149]},{74:[1,150],76:[1,151]},o($VL,[2,7]),{24:152,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:153,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},o($VF,[2,55]),o($VF,[2,84]),{24:154,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{60:[1,155],78:[1,156]},{7:101,10:157,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{55:[1,158]},{69:[1,159]},{69:[1,160]},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,161],74:$V8,75:$V9,80:$Va},{7:101,10:162,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{7:101,10:163,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{58:[1,164]},{58:[1,165]},{12:[1,166],35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE},o([12,57,59,64],[2,53],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE}),o($VO,[2,82],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE}),{69:[1,167]},{69:[1,168]},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,169],74:$V8,75:$V9,80:$Va},o($VO,[2,74]),{7:101,10:170,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{7:101,10:171,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},o($Vb,[2,81]),{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,172],74:$V8,75:$V9,80:$Va},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,173],74:$V8,75:$V9,80:$Va},{24:174,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{24:175,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{13:177,32:178,33:179,55:[1,180],63:21,82:176},{7:101,10:181,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{7:101,10:182,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},o($Vb,[2,79]),{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,183],74:$V8,75:$V9,80:$Va},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,184],74:$V8,75:$V9,80:$Va},o($Vc,[2,65],{72:186,71:[1,185],73:[1,187]}),o($Vc,[2,71]),{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,188]},{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,189]},{59:[1,190]},{59:[2,89]},{59:[2,90]},{59:[2,91]},o($Vm,$Vn,{61:$VG,62:$VH}),{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,191],74:$V8,75:$V9,80:$Va},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,192],74:$V8,75:$V9,80:$Va},o($Vb,[2,77]),o($Vb,[2,80]),{69:[1,193]},o($Vc,[2,67],{71:[1,194],73:[1,195]}),{58:[1,196]},{12:[1,197]},{12:[1,198]},{69:[1,199]},o($Vb,[2,76]),o($Vb,[2,78]),{7:101,10:200,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{69:[1,201]},{58:[1,202]},{24:203,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},o($Vc,[2,72]),o($Vc,[2,73]),{7:101,10:204,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,205],74:$V8,75:$V9,80:$Va},{7:101,10:206,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{24:207,25:37,26:38,27:39,28:40,29:41,30:42,31:43,32:44,33:45,34:46,42:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,58:$Vl},{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,208]},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,209],74:$V8,75:$V9,80:$Va},o($Vc,[2,66]),{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,210],74:$V8,75:$V9,80:$Va},{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,56:$VE,59:[1,211]},{69:[1,212]},o($Vc,[2,86]),o($Vc,[2,68]),{69:[1,213]},{7:101,10:214,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{7:101,10:215,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,74:$V8,75:$V9,80:$Va},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,216],74:$V8,75:$V9,80:$Va},{7:136,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:$V0,22:$V1,23:$V2,55:$Vo,60:$V4,63:21,66:$V5,67:$V6,68:$V7,70:[1,217],74:$V8,75:$V9,80:$Va},o($VP,[2,70]),o($VP,[2,69])];
    defaultActions: {[key:number]: any} = {28:[2,1],103:[2,87],104:[2,88],131:[2,63],132:[2,64],177:[2,89],178:[2,90],179:[2,91]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 7:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 8:
 this.$ = new Array<IStatement>(); this.$[0] = $$[$0]; 
break;
case 4: case 5: case 6: case 13: case 14: case 15: case 16: case 17: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 87: case 88: case 89: case 90: case 91:
 this.$ = $$[$0]; 
break;
case 9: case 10: case 11: case 12: case 54:
 this.$ = $$[$0-1]; 
break;
case 18:
 this.$ = new BreakLoop(); 
break;
case 19:
 this.$ = new ContinueLoop(); 
break;
case 20:
 this.$ = new Return($$[$0-1]); 
break;
case 31:
 this.$ = new Relational($$[$0-2], RelationalOp.LESS_THAN, $$[$0]); 
break;
case 32:
 this.$ = new Relational($$[$0-2], RelationalOp.GREATER_THAN, $$[$0]); 
break;
case 33:
 this.$ = new Relational($$[$0-2], RelationalOp.LESS_THAN_EQUAL, $$[$0]); 
break;
case 34:
 this.$ = new Relational($$[$0-2], RelationalOp.GREATER_THAN_EQUAL, $$[$0]); 
break;
case 35:
 this.$ = new Relational($$[$0-2], RelationalOp.EQUAL, $$[$0]); 
break;
case 36:
 this.$ = new Relational($$[$0-2], RelationalOp.NOT_EQUAL, $$[$0]); 
break;
case 37:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.ADD, $$[$0]); 
break;
case 38:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.MINUS, $$[$0]); 
break;
case 39:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.PRODUCT, $$[$0]); 
break;
case 40:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.DIVISION, $$[$0]); 
break;
case 41:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.MODULE, $$[$0]); 
break;
case 42:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.POWER, $$[$0]); 
break;
case 43:
this.$ = new Negative($$[$0]); 
break;
case 44:
 this.$ = new Logical($$[$0-2], LogicalOp.AND, $$[$0]); 
break;
case 45:
 this.$ = new Logical($$[$0-2], LogicalOp.OR, $$[$0]); 
break;
case 46:
 this.$ = new Not($$[$0]); 
break;
case 47:
 this.$ = new Terminal(Terminals.DECIMAL, Number($$[$0])); 
break;
case 48:
 this.$ = new Terminal(Terminals.INTEGER, Number($$[$0])); 
break;
case 49:
 this.$ = new Terminal(Terminals.LOGICAL, fnParseBoolean($$[$0])); 
break;
case 50:
 this.$ = new Terminal(Terminals.STRING, $$[$0]); 
break;
case 51:
 this.$ = new Terminal(Terminals.CHAR, $$[$0]); 
break;
case 52:
 this.$ = new Terminal(Terminals.ID, $$[$0]); 
break;
case 53:
 this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 55:
 this.$ = new Cast(fnParseDatatype($$[$0-2]), $$[$0]); 
break;
case 56:
 this.$ = new Increment($$[$0-1]); 
break;
case 57:
 this.$ = new Decrement($$[$0-1]); 
break;
case 58: case 82:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 59:
 this.$ = [$$[$0]]; 
break;
case 60:
 this.$ = new Declaration(fnParseDatatype($$[$0-1]), $$[$0]); 
break;
case 61:
 this.$ = new Declaration(fnParseDatatype($$[$0-3]), $$[$0-2], $$[$0]); 
break;
case 62:
 this.$ = new Assign($$[$0-2], $$[$0]); 
break;
case 63:
 this.$ = new Print($$[$0-1]); 
break;
case 64:
 this.$ = new Println($$[$0-1]); 
break;
case 65:
 this.$ = new If($$[$0-4], $$[$0-1]); 
break;
case 66:
 this.$ = new If($$[$0-8], $$[$0-5], undefined, $$[$0-1]); 
break;
case 67:
 this.$ = new If($$[$0-5], $$[$0-2], $$[$0]); 
break;
case 68:
 this.$ = new If($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 69:
 $$[$0-7].push(new Elif($$[$0-4], $$[$0-1])); this.$ = $$[$0-7]; 
break;
case 70:
 this.$ = new Array<Elif>(); this.$[0] = new Elif($$[$0-4], $$[$0-1]); 
break;
case 71:
 this.$ = new While($$[$0-4], $$[$0-1]); 
break;
case 72:
 this.$ = new DoWhile($$[$0-2], $$[$0-6]); 
break;
case 73:
 this.$ = new DoUntil($$[$0-2], $$[$0-6]); 
break;
case 74:
 $$[$0-3].push({datatype: fnParseDatatype($$[$0-1]), id: $$[$0]}); this.$ = $$[$0-3]; 
break;
case 75:
 this.$ = new Array<IParam>(); this.$[0] = {datatype: fnParseDatatype($$[$0-1]), id: $$[$0]}; 
break;
case 76:
 this.$ = new FunctionDef($$[$0-8], $$[$0-6], fnParseDatatype($$[$0-3]), $$[$0-1]); 
break;
case 77:
 this.$ = new FunctionDef($$[$0-7], undefined, fnParseDatatype($$[$0-3]), $$[$0-1]); 
break;
case 78:
 this.$ = new Method($$[$0-8], $$[$0-6], $$[$0-1]); 
break;
case 79:
 this.$ = new Method($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 80:
 this.$ = new Method($$[$0-7], undefined, $$[$0-1]); 
break;
case 81:
 this.$ = new Method($$[$0-5], undefined, $$[$0-1]); 
break;
case 83:
 this.$ = new Array<IExpression>(); this.$[0] = $$[$0]; 
break;
case 84:
 this.$ = new Call($$[$0-3], $$[$0-1]); 
break;
case 85:
 this.$ = new Call($$[$0-2], undefined); 
break;
case 86:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class TsLanguageLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"TsLanguage"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:True|False\b)/i,/^(?:"((\\")|[\\n]|[\\\\]|[^\"])*")/i,/^(?:'((\\')|[\\n]|[\\\\]|[^\'])?')/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:[0-9a-zA-Z_]+)/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:// ignore whitespaces
      break;
    case 1:// ignore comments
      break;
    case 2:// ignore comments
      break;
    case 3:return 50;
      break;
    case 4:return 51;
      break;
    case 5:return 52;
      break;
    case 6:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 53;
      break;
    case 7:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 54;
      break;
    case 8:return 61;
      break;
    case 9:return 62;
      break;
    case 10:return 41;
      break;
    case 11:return 42;
      break;
    case 12:return 43;
      break;
    case 13:return 44;
      break;
    case 14:return 45;
      break;
    case 15:return 46;
      break;
    case 16:return 39;
      break;
    case 17:return 40;
      break;
    case 18:return 37;
      break;
    case 19:return 38;
      break;
    case 20:return 35;
      break;
    case 21:return 36;
      break;
    case 22:return 56;
      break;
    case 23:return 57;
      break;
    case 24:return 47;
      break;
    case 25:return 48;
      break;
    case 26:return 49;
      break;
    case 27:return 58;
      break;
    case 28:return 59;
      break;
    case 29:return 69;
      break;
    case 30:return 70;
      break;
    case 31:return 'OPEN_BRACKET';
      break;
    case 32:return 'CLOSE_BRACKET';
      break;
    case 33:return 12;
      break;
    case 34:return 64;
      break;
    case 35:return 65;
      break;
    case 36:return 60;
      break;
    case 37:return 60;
      break;
    case 38:return 60;
      break;
    case 39:return 60;
      break;
    case 40:return 60;
      break;
    case 41:return 'NEW';
      break;
    case 42:return 68;
      break;
    case 43:return 71;
      break;
    case 44:return 73;
      break;
    case 45:return 'SWITCH';
      break;
    case 46:return 'CASE';
      break;
    case 47:return 21;
      break;
    case 48:return 'DEFAULT';
      break;
    case 49:return 22;
      break;
    case 50:return 74;
      break;
    case 51:return 80;
      break;
    case 52:return 75;
      break;
    case 53:return 76;
      break;
    case 54:return 23;
      break;
    case 55:return 78;
      break;
    case 56:return 66;
      break;
    case 57:return 67;
      break;
    case 58:return 55;
      break;
    case 59:return 5; // end of file
      break;
    case 60: addError({type: EnumError.LEXICAL_ERROR, message: yy_.yytext, line: yy_.yylloc.first_line,
column: yy_.yylloc.first_column}); 
      break;
        }
    }
}

