/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    import { IError } from './exceptions/IError';
    import { EnumError } from './exceptions/EnumError';

    import { IStatement } from "./abstract/IStatement";
    import { IExpression } from "./abstract/IExpression";
    import { IParam } from "./abstract/IParam";

    import { Declaration } from "./statements/Declaration";
    import { Assign } from "./statements/Assign";
    import { If } from "./statements/If";
    import { Elif } from "./statements/Elif";
    import { Print } from "./statements/Print";
    import { Println } from "./statements/Println";
    import { While } from "./statements/While";
    import { BreakLoop } from "./statements/BreakLoop";
    import { ContinueLoop } from "./statements/ContinueLoop";
    import { DoWhile } from "./statements/DoWhile";
    import { DoUntil } from "./statements/DoUntil";
    import { Return } from "./statements/Return";
    import { FunctionDef } from "./statements/FunctionDef";
    import { Method } from "./statements/Method";
    import { For } from "./statements/For";
    import { Case } from "./statements/Case";
    import { Switch } from "./statements/Switch";
    import { DeclareArrayOne } from "./statements/DeclareArrayOne";
    import { DeclareArrayTwo } from "./statements/DeclareArrayTwo";

    import fnParseDatatype from "./functions/fnParseDatatype";
    import fnParseBoolean from "./functions/fnParseBoolean";

    import { Terminals } from "./enums/EnumTerminals";
    import { RelationalOp } from "./enums/EnumRelational";
    import { ArithmeticOp } from "./enums/EnumArithmetic";
    import { LogicalOp } from "./enums/EnumLogical";

    import { Terminal } from "./expressions/Terminal";
    import { Relational } from "./expressions/Relational";
    import { Arithmetic } from "./expressions/Arithmetic";
    import { Logical } from "./expressions/Logical";
    import { Negative } from "./expressions/Negative";
    import { Not } from "./expressions/Not";
    import { Ternary } from "./expressions/Ternary";
    import { Increment } from "./expressions/Increment";
    import { Decrement } from "./expressions/Decrement";
    import { Cast } from "./expressions/Cast";
    import { Call } from "./expressions/Call";


    let errors: IError[] = [];

    const addError = (error: IError) => {
        if (error.type === EnumError.LEXICAL_ERROR) {
            error.message = `Caracter: " ${error.message} ", no reconocido como parte del lenguaje`;
        } else if (error.type === EnumError.SYNTAX_ERROR) {
            error.message = `No se esperaba: " ${error.message} ", como parte del lenguaje`;
        }
        console.error(error);
        errors.push(error);
    };

import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,19],$V1=[1,20],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,25],$Vb=[1,26],$Vc=[5,24,25,26,58,63,69,75,76,81,84,93,94],$Vd=[5,24,25,26,58,63,69,71,75,76,81,84,86,87,93,94],$Ve=[1,53],$Vf=[1,54],$Vg=[1,56],$Vh=[1,57],$Vi=[1,58],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,55],$Vn=[67,68],$Vo=[2,62],$Vp=[1,65],$Vq=[1,67],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[12,38,39,40,41,42,43,44,45,46,47,48,49,50,51,59,60,62,67,71,89],$VH=[1,95],$VI=[1,96],$VJ=[12,67,68],$VK=[12,38,39,40,41,42,43,44,45,50,51,59,60,62,67,71,89],$VL=[12,50,51,59,60,62,67,71,89],$VM=[24,25,26,58,63,69,71,75,76,81,84,86,87,93,94],$VN=[12,38,39,40,41,42,43,44,45,46,47,50,51,59,60,62,67,71,89],$VO=[12,38,39,40,41,42,43,50,51,59,60,62,67,71,89],$VP=[62,67],$VQ=[1,219],$VR=[67,71],$VS=[71,86,87],$VT=[5,24,25,26,58,63,69,71,72,74,75,76,81,84,86,87,93,94];

export class TsLanguageParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new TsLanguageLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"ini":3,"main_statements":4,"EOF":5,"main_statement":6,"standard_statement":7,"function":8,"method":9,"standard_statements":10,"declare_array_1":11,"END_SENTENCE":12,"declare_array_2":13,"declaration":14,"assign":15,"print_st":16,"println_st":17,"if":18,"while":19,"do_while":20,"do_until":21,"for":22,"switch":23,"BREAK":24,"CONTINUE":25,"RETURN":26,"expr":27,"arithmetic":28,"relational":29,"logical":30,"ternary":31,"group":32,"value":33,"cast":34,"increment":35,"decrement":36,"call":37,"LESS":38,"GREATER":39,"LESS_EQUAL":40,"GREATER_EQUAL":41,"EQUAL":42,"NOT_EQUAL":43,"ADD":44,"MINUS":45,"PRODUCT":46,"DIVISION":47,"MODULE":48,"POWER":49,"AND":50,"OR":51,"NOT":52,"DECIMAL":53,"INTEGER":54,"LOGICAL":55,"STRING":56,"CHAR":57,"IDENTIFIER":58,"TERNARY_IF":59,"TERNARY_ELSE":60,"OPEN_PARENTHESIS":61,"CLOSE_PARENTHESIS":62,"TYPE":63,"INCREMENT":64,"DECREMENT":65,"list_identifiers":66,"COMMA":67,"ASSIGNMENT":68,"IF":69,"OPEN_BRACE":70,"CLOSE_BRACE":71,"ELSE":72,"elifs":73,"ELIF":74,"WHILE":75,"DO":76,"UNTIL":77,"parameters":78,"VOID":79,"arguments":80,"FOR":81,"for_init":82,"for_update":83,"SWITCH":84,"cases":85,"DEFAULT":86,"CASE":87,"OPEN_BRACKET":88,"CLOSE_BRACKET":89,"NEW":90,"list_expr":91,"list_list_expr":92,"PRINT":93,"PRINTLN":94,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",12:"END_SENTENCE",24:"BREAK",25:"CONTINUE",26:"RETURN",38:"LESS",39:"GREATER",40:"LESS_EQUAL",41:"GREATER_EQUAL",42:"EQUAL",43:"NOT_EQUAL",44:"ADD",45:"MINUS",46:"PRODUCT",47:"DIVISION",48:"MODULE",49:"POWER",50:"AND",51:"OR",52:"NOT",53:"DECIMAL",54:"INTEGER",55:"LOGICAL",56:"STRING",57:"CHAR",58:"IDENTIFIER",59:"TERNARY_IF",60:"TERNARY_ELSE",61:"OPEN_PARENTHESIS",62:"CLOSE_PARENTHESIS",63:"TYPE",64:"INCREMENT",65:"DECREMENT",67:"COMMA",68:"ASSIGNMENT",69:"IF",70:"OPEN_BRACE",71:"CLOSE_BRACE",72:"ELSE",74:"ELIF",75:"WHILE",76:"DO",77:"UNTIL",79:"VOID",81:"FOR",84:"SWITCH",86:"DEFAULT",87:"CASE",88:"OPEN_BRACKET",89:"CLOSE_BRACKET",90:"NEW",93:"PRINT",94:"PRINTLN"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[30,3],[30,3],[30,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[31,5],[32,3],[34,4],[35,2],[36,2],[66,3],[66,1],[14,2],[14,4],[15,3],[18,7],[18,11],[18,8],[18,12],[73,8],[73,7],[19,7],[20,9],[21,9],[78,4],[78,2],[8,9],[8,8],[9,9],[9,7],[9,8],[9,6],[80,3],[80,1],[37,4],[37,3],[22,11],[82,1],[82,1],[83,1],[83,1],[83,1],[23,7],[23,10],[23,9],[85,5],[85,4],[11,10],[11,8],[91,3],[91,1],[92,5],[92,3],[13,15],[13,10],[16,4],[17,4]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$V3,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$V3,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{12:[1,34]},{12:[1,35]},{12:[1,36]},{12:[1,37]},{12:[1,38]},{12:[1,39]},o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),o($Vd,[2,20]),{12:[1,40]},{12:[1,41]},{27:42,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o($Vn,$Vo,{61:[1,62]}),{58:$Vp,66:64,88:[1,63]},{67:$Vq,68:[1,66]},{61:[1,68]},{61:[1,69]},{61:[1,70]},{61:[1,71]},{70:[1,72]},{61:[1,73]},{61:[1,74]},{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,21]),o($Vd,[2,22]),{12:[1,75],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF},o($VG,[2,24]),o($VG,[2,25]),o($VG,[2,26]),o($VG,[2,27]),o($VG,[2,28]),o($VG,[2,29]),o($VG,[2,30]),o($VG,[2,31]),o($VG,[2,32]),o($VG,[2,33]),{27:91,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:92,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:93,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm,63:[1,94]},o($VG,[2,50]),o($VG,[2,51]),o($VG,[2,52]),o($VG,[2,53]),o($VG,[2,54]),o($VG,[2,55],{61:[1,97],64:$VH,65:$VI}),{62:[1,99],63:[1,100],78:98},{89:[1,101]},{12:[2,63],67:$Vq,68:[1,102]},o($VJ,$Vo),{27:103,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{58:[1,104]},{27:105,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:106,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:107,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:108,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{7:110,10:109,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{14:113,15:112,58:$Vp,63:[1,114],66:24,82:111},{27:115,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o($Vd,[2,23]),{27:116,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:117,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:118,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:119,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:120,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:121,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:122,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:123,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:124,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:125,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:126,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:127,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:128,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:129,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:130,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o($VK,[2,46],{46:$Vz,47:$VA,48:$VB,49:$VC}),o($VL,[2,49],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,131]},{62:[1,132]},o($VG,[2,59]),o($VG,[2,60]),{27:135,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm,62:[1,134],80:133},{62:[1,136],67:[1,137]},{60:[1,138],70:[1,139]},{58:[1,140]},{58:[1,141],88:[1,142]},{27:143,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o([12,62],[2,65],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF}),o($VJ,[2,61]),{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,144]},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,145]},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,146]},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,147]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,148],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($VM,[2,8]),{12:[1,150]},{12:[2,88]},{12:[2,89]},{58:$Vp,66:64},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,151]},o($VK,[2,40],{46:$Vz,47:$VA,48:$VB,49:$VC}),o($VK,[2,41],{46:$Vz,47:$VA,48:$VB,49:$VC}),o($VN,[2,42],{48:$VB,49:$VC}),o($VN,[2,43],{48:$VB,49:$VC}),o($VG,[2,44]),o($VG,[2,45]),o($VO,[2,34],{44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VO,[2,35],{44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VO,[2,36],{44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VO,[2,37],{44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VO,[2,38],{44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VO,[2,39],{44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o($VL,[2,47],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC}),o([12,51,59,60,62,67,71,89],[2,48],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD}),{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,60:[1,152]},o($VG,[2,57]),{27:153,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{62:[1,154],67:[1,155]},o($VG,[2,86]),o($VP,[2,84],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF}),{60:[1,156],70:[1,157]},{63:[1,158]},{63:[1,159],79:[1,160]},{7:110,10:161,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($VP,[2,76]),{68:[1,162]},{89:[1,163]},{12:[2,64],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF},{12:[2,106]},{12:[2,107]},{70:[1,164]},{70:[1,165]},{75:[1,166],77:[1,167]},o($VM,[2,7]),{27:168,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{70:[1,169]},{27:170,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o($VG,[2,58]),o($VG,[2,85]),{27:171,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{63:[1,172],79:[1,173]},{7:110,10:174,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{58:[1,175]},{70:[1,176]},{70:[1,177]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,178],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{70:[1,180],90:[1,179]},{58:[1,181]},{7:110,10:182,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:110,10:183,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{61:[1,184]},{61:[1,185]},{12:[1,186],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF},{85:187,86:[1,188],87:[1,189]},o([12,60,62,67,71,89],[2,56],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF}),o($VP,[2,83],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF}),{70:[1,190]},{70:[1,191]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,192],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($VP,[2,75]),{7:110,10:193,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:110,10:194,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vc,[2,82]),{63:[1,195]},{27:197,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm,91:196},{68:[1,198]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,199],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,200],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{27:201,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{27:202,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{15:204,35:205,36:206,58:[1,207],66:24,83:203},{71:[1,208],86:[1,209],87:[1,210]},{60:[1,211]},{27:212,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{7:110,10:213,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:110,10:214,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vc,[2,80]),{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,215],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,216],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{88:[1,217]},{67:$VQ,71:[1,218]},o($VR,[2,101],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF}),{70:[1,221],90:[1,220]},o($Vd,[2,66],{73:223,72:[1,222],74:[1,224]}),o($Vd,[2,72]),{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,225]},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,226]},{62:[1,227]},{62:[2,90]},{62:[2,91]},{62:[2,92]},o($Vn,$Vo,{64:$VH,65:$VI}),o($Vd,[2,93]),{60:[1,228]},{27:229,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{7:110,10:230,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,60:[1,231]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,232],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,233],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vc,[2,78]),o($Vc,[2,81]),{27:234,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{12:[2,99]},{27:235,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{63:[1,236]},{70:[1,238],92:237},{70:[1,239]},o($Vd,[2,68],{72:[1,240],74:[1,241]}),{61:[1,242]},{12:[1,243]},{12:[1,244]},{70:[1,245]},{7:110,10:246,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,60:[1,247]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,248],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:110,10:249,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vc,[2,77]),o($Vc,[2,79]),{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,89:[1,250]},o($VR,[2,100],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF}),{88:[1,251]},{67:[1,253],71:[1,252]},{27:197,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm,91:254},{7:110,10:255,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{70:[1,256]},{61:[1,257]},{27:258,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o($Vd,[2,73]),o($Vd,[2,74]),{7:110,10:259,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,260],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:110,10:261,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vd,[2,95]),o($VS,[2,97],{11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,66:24,7:149,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb}),{12:[2,98]},{27:262,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{12:[2,105]},{70:[1,263]},{67:$VQ,71:[1,264]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,265],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:110,10:266,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{27:267,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,268]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,269],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($Vd,[2,94]),o($VS,[2,96],{11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,66:24,7:149,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb}),{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,89:[1,270]},{27:197,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm,91:271},o($VR,[2,103]),o($Vd,[2,67]),{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,272],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,62:[1,273]},{70:[1,274]},o($Vd,[2,87]),{88:[1,275]},{67:$VQ,71:[1,276]},o($Vd,[2,69]),{70:[1,277]},{7:110,10:278,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{27:279,28:43,29:44,30:45,31:46,32:47,33:48,34:49,35:50,36:51,37:52,45:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,61:$Vm},o($VR,[2,102]),{7:110,10:280,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,281],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,59:$VF,89:[1,282]},{7:149,11:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V0,25:$V1,26:$V2,58:$Vp,63:$V4,66:24,69:$V5,71:[1,283],75:$V6,76:$V7,81:$V8,84:$V9,93:$Va,94:$Vb},o($VT,[2,71]),{12:[2,104]},o($VT,[2,70])];
    defaultActions: {[key:number]: any} = {32:[2,1],112:[2,88],113:[2,89],144:[2,106],145:[2,107],204:[2,90],205:[2,91],206:[2,92],218:[2,99],250:[2,98],252:[2,105],282:[2,104]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 7:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 8:
 this.$ = new Array<IStatement>(); this.$[0] = $$[$0]; 
break;
case 4: case 5: case 6: case 15: case 16: case 17: case 18: case 19: case 20: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 88: case 89: case 90: case 91: case 92:
 this.$ = $$[$0]; 
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 57:
 this.$ = $$[$0-1]; 
break;
case 21:
 this.$ = new BreakLoop(); 
break;
case 22:
 this.$ = new ContinueLoop(); 
break;
case 23:
 this.$ = new Return($$[$0-1]); 
break;
case 34:
 this.$ = new Relational($$[$0-2], RelationalOp.LESS_THAN, $$[$0]); 
break;
case 35:
 this.$ = new Relational($$[$0-2], RelationalOp.GREATER_THAN, $$[$0]); 
break;
case 36:
 this.$ = new Relational($$[$0-2], RelationalOp.LESS_THAN_EQUAL, $$[$0]); 
break;
case 37:
 this.$ = new Relational($$[$0-2], RelationalOp.GREATER_THAN_EQUAL, $$[$0]); 
break;
case 38:
 this.$ = new Relational($$[$0-2], RelationalOp.EQUAL, $$[$0]); 
break;
case 39:
 this.$ = new Relational($$[$0-2], RelationalOp.NOT_EQUAL, $$[$0]); 
break;
case 40:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.ADD, $$[$0]); 
break;
case 41:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.MINUS, $$[$0]); 
break;
case 42:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.PRODUCT, $$[$0]); 
break;
case 43:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.DIVISION, $$[$0]); 
break;
case 44:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.MODULE, $$[$0]); 
break;
case 45:
 this.$ = new Arithmetic($$[$0-2], ArithmeticOp.POWER, $$[$0]); 
break;
case 46:
this.$ = new Negative($$[$0]); 
break;
case 47:
 this.$ = new Logical($$[$0-2], LogicalOp.AND, $$[$0]); 
break;
case 48:
 this.$ = new Logical($$[$0-2], LogicalOp.OR, $$[$0]); 
break;
case 49:
 this.$ = new Not($$[$0]); 
break;
case 50:
 this.$ = new Terminal(Terminals.DECIMAL, Number($$[$0])); 
break;
case 51:
 this.$ = new Terminal(Terminals.INTEGER, Number($$[$0])); 
break;
case 52:
 this.$ = new Terminal(Terminals.LOGICAL, fnParseBoolean($$[$0])); 
break;
case 53:
 this.$ = new Terminal(Terminals.STRING, $$[$0]); 
break;
case 54:
 this.$ = new Terminal(Terminals.CHAR, $$[$0]); 
break;
case 55:
 this.$ = new Terminal(Terminals.ID, $$[$0]); 
break;
case 56:
 this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = new Cast(fnParseDatatype($$[$0-2]), $$[$0]); 
break;
case 59:
 this.$ = new Increment($$[$0-1]); 
break;
case 60:
 this.$ = new Decrement($$[$0-1]); 
break;
case 61: case 83: case 100:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 62:
 this.$ = [$$[$0]]; 
break;
case 63:
 this.$ = new Declaration(fnParseDatatype($$[$0-1]), $$[$0]); 
break;
case 64:
 this.$ = new Declaration(fnParseDatatype($$[$0-3]), $$[$0-2], $$[$0]); 
break;
case 65:
 this.$ = new Assign($$[$0-2], $$[$0]); 
break;
case 66:
 this.$ = new If($$[$0-4], $$[$0-1]); 
break;
case 67:
 this.$ = new If($$[$0-8], $$[$0-5], undefined, $$[$0-1]); 
break;
case 68:
 this.$ = new If($$[$0-5], $$[$0-2], $$[$0]); 
break;
case 69:
 this.$ = new If($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 70:
 $$[$0-7].push(new Elif($$[$0-4], $$[$0-1])); this.$ = $$[$0-7]; 
break;
case 71:
 this.$ = new Array<Elif>(); this.$[0] = new Elif($$[$0-4], $$[$0-1]); 
break;
case 72:
 this.$ = new While($$[$0-4], $$[$0-1]); 
break;
case 73:
 this.$ = new DoWhile($$[$0-2], $$[$0-6]); 
break;
case 74:
 this.$ = new DoUntil($$[$0-2], $$[$0-6]); 
break;
case 75:
 $$[$0-3].push({datatype: fnParseDatatype($$[$0-1]), id: $$[$0]}); this.$ = $$[$0-3]; 
break;
case 76:
 this.$ = new Array<IParam>(); this.$[0] = {datatype: fnParseDatatype($$[$0-1]), id: $$[$0]}; 
break;
case 77:
 this.$ = new FunctionDef($$[$0-8], $$[$0-6], fnParseDatatype($$[$0-3]), $$[$0-1]); 
break;
case 78:
 this.$ = new FunctionDef($$[$0-7], undefined, fnParseDatatype($$[$0-3]), $$[$0-1]); 
break;
case 79:
 this.$ = new Method($$[$0-8], $$[$0-6], $$[$0-1]); 
break;
case 80:
 this.$ = new Method($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 81:
 this.$ = new Method($$[$0-7], undefined, $$[$0-1]); 
break;
case 82:
 this.$ = new Method($$[$0-5], undefined, $$[$0-1]); 
break;
case 84: case 101:
 this.$ = new Array<IExpression>(); this.$[0] = $$[$0]; 
break;
case 85:
 this.$ = new Call($$[$0-3], $$[$0-1]); 
break;
case 86:
 this.$ = new Call($$[$0-2], undefined); 
break;
case 87:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 93:
 this.$ = new Switch($$[$0-4], $$[$0-1], undefined); 
break;
case 94:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1]); 
break;
case 95:
 this.$ = new Switch($$[$0-6], undefined, $$[$0-2]); 
break;
case 96:
 $$[$0-4].push(new Case($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 97:
 this.$ = new Array<Case>(); this.$[0] = new Case($$[$0-2], $$[$0]); 
break;
case 98:
 this.$ = new DeclareArrayOne(fnParseDatatype($$[$0-9]), $$[$0-6], $$[$0-1], undefined); 
break;
case 99:
 this.$ = new DeclareArrayOne(fnParseDatatype($$[$0-7]), $$[$0-4], undefined, $$[$0-1]); 
break;
case 102:
 $$[$0-4].push($$[$0-2]); this.$ = $$[$0-4]; 
break;
case 103:
 this.$ = new Array<Array<IExpression>>(); this.$[0] = $$[$0-2]; 
break;
case 104:
 this.$ = new DeclareArrayTwo(fnParseDatatype($$[$0-14]), $$[$0-9], undefined, $$[$0-4], $$[$0-2]); 
break;
case 105:
 this.$ = new DeclareArrayTwo(fnParseDatatype($$[$0-9]), $$[$0-4], $$[$0-1], undefined, undefined); 
break;
case 106:
 this.$ = new Print($$[$0-1]); 
break;
case 107:
 this.$ = new Println($$[$0-1]); 
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class TsLanguageLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"TsLanguage"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:True|False\b)/i,/^(?:"((\\")|[\\n]|[\\\\]|[^\"])*")/i,/^(?:'((\\')|[\\n]|[\\\\]|[^\'])?')/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:[0-9a-zA-Z_]+)/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:// ignore whitespaces
      break;
    case 1:// ignore comments
      break;
    case 2:// ignore comments
      break;
    case 3:return 53;
      break;
    case 4:return 54;
      break;
    case 5:return 55;
      break;
    case 6:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 56;
      break;
    case 7:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 57;
      break;
    case 8:return 64;
      break;
    case 9:return 65;
      break;
    case 10:return 44;
      break;
    case 11:return 45;
      break;
    case 12:return 46;
      break;
    case 13:return 47;
      break;
    case 14:return 48;
      break;
    case 15:return 49;
      break;
    case 16:return 42;
      break;
    case 17:return 43;
      break;
    case 18:return 40;
      break;
    case 19:return 41;
      break;
    case 20:return 38;
      break;
    case 21:return 39;
      break;
    case 22:return 59;
      break;
    case 23:return 60;
      break;
    case 24:return 50;
      break;
    case 25:return 51;
      break;
    case 26:return 52;
      break;
    case 27:return 61;
      break;
    case 28:return 62;
      break;
    case 29:return 70;
      break;
    case 30:return 71;
      break;
    case 31:return 88;
      break;
    case 32:return 89;
      break;
    case 33:return 12;
      break;
    case 34:return 67;
      break;
    case 35:return 68;
      break;
    case 36:return 63;
      break;
    case 37:return 63;
      break;
    case 38:return 63;
      break;
    case 39:return 63;
      break;
    case 40:return 63;
      break;
    case 41:return 90;
      break;
    case 42:return 69;
      break;
    case 43:return 72;
      break;
    case 44:return 74;
      break;
    case 45:return 84;
      break;
    case 46:return 87;
      break;
    case 47:return 24;
      break;
    case 48:return 86;
      break;
    case 49:return 25;
      break;
    case 50:return 75;
      break;
    case 51:return 81;
      break;
    case 52:return 76;
      break;
    case 53:return 77;
      break;
    case 54:return 26;
      break;
    case 55:return 79;
      break;
    case 56:return 93;
      break;
    case 57:return 94;
      break;
    case 58:return 58;
      break;
    case 59:return 5; // end of file
      break;
    case 60: addError({type: EnumError.LEXICAL_ERROR, message: yy_.yytext, line: yy_.yylloc.first_line,
column: yy_.yylloc.first_column}); 
      break;
        }
    }
}

