/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

import { IError } from "./exceptions/IError";
import { EnumError } from "./exceptions/EnumError";

let errors: IError[] = [];

const addError = (error: IError) => {
  if (error.type === EnumError.LEXICAL_ERROR) {
    error.message = `Caracter: " ${error.message} ", no reconocido como parte del lenguaje`;
  } else if (error.type === EnumError.SYNTAX_ERROR) {
    error.message = `No se esperaba: " ${error.message} ", como parte del lenguaje`;
  }
  console.error(error);
  errors.push(error);
};

import {
  JisonParser,
  JisonParserApi,
  StateType,
  SymbolsType,
  TerminalsType,
  ProductionsType,
  o,
} from "@ts-jison/parser";
const $V0 = [1, 5],
  $V1 = [1, 6],
  $V2 = [2, 5, 9],
  $V3 = [8, 11, 13],
  $V4 = [1, 21],
  $V5 = [1, 22],
  $V6 = [1, 23],
  $V7 = [1, 24],
  $V8 = [1, 25],
  $V9 = [1, 26],
  $Va = [1, 27],
  $Vb = [1, 28],
  $Vc = [1, 29],
  $Vd = [1, 35],
  $Ve = [1, 36],
  $Vf = [1, 37],
  $Vg = [1, 38],
  $Vh = [1, 39],
  $Vi = [1, 40],
  $Vj = [1, 31],
  $Vk = [1, 32],
  $Vl = [1, 33],
  $Vm = [1, 34],
  $Vn = [1, 41],
  $Vo = [1, 42],
  $Vp = [1, 43],
  $Vq = [8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37],
  $Vr = [8, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 37],
  $Vs = [8, 31, 32, 34, 35, 37],
  $Vt = [8, 21, 22, 23, 24, 25, 26, 31, 32, 34, 35, 37];

export class TsLanguageParser extends JisonParser implements JisonParserApi {
  $?: any;

  constructor(yy = {}, lexer = new TsLanguageLexer(yy)) {
    super(yy, lexer);
  }

  symbols_: SymbolsType = {
    error: 2,
    ini: 3,
    standard_statements: 4,
    EOF: 5,
    standard_statement: 6,
    declaration: 7,
    END_SENTENCE: 8,
    TYPE: 9,
    list_identifiers: 10,
    ASSIGNMENT: 11,
    expr: 12,
    COMMA: 13,
    IDENTIFIER: 14,
    aritmetic: 15,
    relational: 16,
    logical: 17,
    ternary: 18,
    group: 19,
    value: 20,
    LESS: 21,
    GREATER: 22,
    LESS_EQUAL: 23,
    GREATER_EQUAL: 24,
    EQUAL: 25,
    NOT_EQUAL: 26,
    ADD: 27,
    MINUS: 28,
    PRODUCT: 29,
    DIVISION: 30,
    AND: 31,
    OR: 32,
    NOT: 33,
    TERNARY_IF: 34,
    TERNARY_ELSE: 35,
    OPEN_PARENTHESIS: 36,
    CLOSE_PARENTHESIS: 37,
    DECIMAL: 38,
    INTEGER: 39,
    LOGICAL: 40,
    STRING: 41,
    CHAR: 42,
    $accept: 0,
    $end: 1,
  };
  terminals_: TerminalsType = {
    2: "error",
    5: "EOF",
    8: "END_SENTENCE",
    9: "TYPE",
    11: "ASSIGNMENT",
    13: "COMMA",
    14: "IDENTIFIER",
    21: "LESS",
    22: "GREATER",
    23: "LESS_EQUAL",
    24: "GREATER_EQUAL",
    25: "EQUAL",
    26: "NOT_EQUAL",
    27: "ADD",
    28: "MINUS",
    29: "PRODUCT",
    30: "DIVISION",
    31: "AND",
    32: "OR",
    33: "NOT",
    34: "TERNARY_IF",
    35: "TERNARY_ELSE",
    36: "OPEN_PARENTHESIS",
    37: "CLOSE_PARENTHESIS",
    38: "DECIMAL",
    39: "INTEGER",
    40: "LOGICAL",
    41: "STRING",
    42: "CHAR",
  };
  productions_: ProductionsType = [
    0,
    [3, 2],
    [4, 2],
    [4, 1],
    [6, 2],
    [6, 1],
    [7, 2],
    [7, 4],
    [10, 3],
    [10, 1],
    [12, 1],
    [12, 1],
    [12, 1],
    [12, 1],
    [12, 1],
    [12, 1],
    [12, 1],
    [16, 3],
    [16, 3],
    [16, 3],
    [16, 3],
    [16, 3],
    [16, 3],
    [15, 3],
    [15, 3],
    [15, 3],
    [15, 3],
    [15, 2],
    [17, 3],
    [17, 3],
    [17, 2],
    [18, 5],
    [19, 3],
    [20, 1],
    [20, 1],
    [20, 1],
    [20, 1],
    [20, 1],
  ];
  table: Array<StateType> = [
    { 2: $V0, 3: 1, 4: 2, 6: 3, 7: 4, 9: $V1 },
    { 1: [3] },
    { 2: $V0, 5: [1, 7], 6: 8, 7: 4, 9: $V1 },
    o($V2, [2, 3]),
    { 8: [1, 9] },
    o($V2, [2, 5]),
    { 10: 10, 14: [1, 11] },
    { 1: [2, 1] },
    o($V2, [2, 2]),
    o($V2, [2, 4]),
    { 8: [2, 6], 11: [1, 12], 13: [1, 13] },
    o($V3, [2, 9]),
    {
      2: $V4,
      12: 14,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    { 14: [1, 30] },
    {
      8: [2, 7],
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
      31: $Vn,
      32: $Vo,
      34: $Vp,
    },
    o($Vq, [2, 10]),
    o($Vq, [2, 11]),
    o($Vq, [2, 12]),
    o($Vq, [2, 13]),
    o($Vq, [2, 14]),
    o($Vq, [2, 15]),
    o($Vq, [2, 16]),
    {
      2: $V4,
      12: 44,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 45,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 46,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    o($Vq, [2, 33]),
    o($Vq, [2, 34]),
    o($Vq, [2, 35]),
    o($Vq, [2, 36]),
    o($Vq, [2, 37]),
    o($V3, [2, 8]),
    {
      2: $V4,
      12: 47,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 48,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 49,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 50,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 51,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 52,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 53,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 54,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 55,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 56,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 57,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 58,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    {
      2: $V4,
      12: 59,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    o($Vr, [2, 27], { 29: $Vl, 30: $Vm }),
    o($Vs, [2, 30], {
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
    }),
    {
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
      31: $Vn,
      32: $Vo,
      34: $Vp,
      37: [1, 60],
    },
    o($Vr, [2, 23], { 29: $Vl, 30: $Vm }),
    o($Vr, [2, 24], { 29: $Vl, 30: $Vm }),
    o($Vq, [2, 25]),
    o($Vq, [2, 26]),
    o($Vt, [2, 17], { 27: $Vj, 28: $Vk, 29: $Vl, 30: $Vm }),
    o($Vt, [2, 18], { 27: $Vj, 28: $Vk, 29: $Vl, 30: $Vm }),
    o($Vt, [2, 19], { 27: $Vj, 28: $Vk, 29: $Vl, 30: $Vm }),
    o($Vt, [2, 20], { 27: $Vj, 28: $Vk, 29: $Vl, 30: $Vm }),
    o($Vt, [2, 21], { 27: $Vj, 28: $Vk, 29: $Vl, 30: $Vm }),
    o($Vt, [2, 22], { 27: $Vj, 28: $Vk, 29: $Vl, 30: $Vm }),
    o($Vs, [2, 28], {
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
    }),
    o([8, 32, 34, 35, 37], [2, 29], {
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
      31: $Vn,
    }),
    {
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
      31: $Vn,
      32: $Vo,
      34: $Vp,
      35: [1, 61],
    },
    o($Vq, [2, 32]),
    {
      2: $V4,
      12: 62,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      28: $V5,
      33: $V6,
      36: $V7,
      38: $V8,
      39: $V9,
      40: $Va,
      41: $Vb,
      42: $Vc,
    },
    o([8, 35, 37], [2, 31], {
      21: $Vd,
      22: $Ve,
      23: $Vf,
      24: $Vg,
      25: $Vh,
      26: $Vi,
      27: $Vj,
      28: $Vk,
      29: $Vl,
      30: $Vm,
      31: $Vn,
      32: $Vo,
      34: $Vp,
    }),
  ];
  defaultActions: { [key: number]: any } = { 7: [2, 1] };

  performAction(
    yytext: string,
    yyleng: number,
    yylineno: number,
    yy: any,
    yystate: number /* action[1] */,
    $$: any /* vstack */,
    _$: any /* lstack */
  ): any {
    /* this == yyval */
    var $0 = $$.length - 1;
    switch (yystate) {
      case 1:
        return $$[$0 - 1];
      case 2:
        $$[$0 - 1].push($$[$0]);
        this.$ = $$[$0 - 1];
        break;
      case 3:
      case 9:
        this.$ = [$$[$0]];
        break;
      case 4:
        this.$ = $$[$0 - 1];
        break;
      case 5:
      case 16:
        addError({
          type: EnumError.SYNTAX_ERROR,
          message: yytext,
          line: this.$.first_line,
          column: this.$.first_column,
        });
        break;
      case 6:
      case 27:
      case 30:
        this.$ = [$$[$0 - 1], $$[$0]];
        break;
      case 7:
        this.$ = [$$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]];
        break;
      case 8:
        $$[$0 - 2].push($$[$0]);
        this.$ = $$[$0 - 2];
        break;
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
        this.$ = $$[$0];
        break;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 28:
      case 29:
      case 32:
        this.$ = [$$[$0 - 2], $$[$0 - 1], $$[$0]];
        break;
      case 31:
        this.$ = [$$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]];
        break;
    }
  }
}

/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from "@ts-jison/lexer";
export class TsLanguageLexer extends JisonLexer implements JisonLexerApi {
  options: any = { "case-insensitive": true, moduleName: "TsLanguage" };
  constructor(yy = {}) {
    super(yy);
  }

  rules: RegExp[] = [
    /^(?:\s+)/i,
    /^(?:\/\/.*)/i,
    /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,
    /^(?:[0-9]+(\.[0-9]+)\b)/i,
    /^(?:[0-9]+\b)/i,
    /^(?:True|False\b)/i,
    /^(?:"((\\")|[\\n]|[\\\\]|[^\"])*")/i,
    /^(?:'((\\')|[\\n]|[\\\\]|[^\'])?')/i,
    /^(?:\+)/i,
    /^(?:-)/i,
    /^(?:\*)/i,
    /^(?:\/)/i,
    /^(?:%)/i,
    /^(?:\^)/i,
    /^(?:<)/i,
    /^(?:>)/i,
    /^(?:<=)/i,
    /^(?:>=)/i,
    /^(?:==)/i,
    /^(?:!=)/i,
    /^(?:\?)/i,
    /^(?::)/i,
    /^(?:&&)/i,
    /^(?:\|\|)/i,
    /^(?:!)/i,
    /^(?:\()/i,
    /^(?:\))/i,
    /^(?:\{)/i,
    /^(?:\})/i,
    /^(?:;)/i,
    /^(?:=)/i,
    /^(?:,)/i,
    /^(?:Int\b)/i,
    /^(?:Double\b)/i,
    /^(?:Boolean\b)/i,
    /^(?:Char\b)/i,
    /^(?:String\b)/i,
    /^(?:[0-9a-zA-Z_]+)/i,
    /^(?:$)/i,
    /^(?:.)/i,
  ];
  conditions: any = {
    INITIAL: {
      rules: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39,
      ],
      inclusive: true,
    },
  };
  performAction(
    yy: any,
    yy_: any,
    $avoiding_name_collisions: any,
    YY_START: any
  ): any {
    var YYSTATE = YY_START;
    switch ($avoiding_name_collisions) {
      case 0: // ignore whitespaces
        break;
      case 1: // ignore comments
        break;
      case 2: // ignore comments
        break;
      case 3:
        return 38;
      case 4:
        return 39;
      case 5:
        return 40;
      case 6:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 41;
      case 7:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 42;
      case 8:
        return 27;
      case 9:
        return 28;
      case 10:
        return 29;
      case 11:
        return 30;
      case 12:
        return "MODULE";
      case 13:
        return "POWER";
      case 14:
        return 21;
      case 15:
        return 22;
      case 16:
        return 23;
      case 17:
        return 24;
      case 18:
        return 25;
      case 19:
        return 26;
      case 20:
        return 34;
      case 21:
        return 35;
      case 22:
        return 31;
      case 23:
        return 32;
      case 24:
        return 33;
      case 25:
        return 36;
      case 26:
        return 37;
      case 27:
        return "OPEN_BRACE";
      case 28:
        return "CLOSE_BRACE";
      case 29:
        return 8;
      case 30:
        return 11;
      case 31:
        return 13;
      case 32:
        return 9;
      case 33:
        return 9;
      case 34:
        return 9;
      case 35:
        return 9;
      case 36:
        return 9;
      case 37:
        return 14;
      case 38:
        return 5; // end of file
      case 39:
        addError({
          type: EnumError.LEXICAL_ERROR,
          message: yy_.yytext,
          line: yy_.yylloc.first_line,
          column: yy_.yylloc.first_column,
        });
        break;
    }
  }
}
