/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

import { IError } from "./exceptions/IError";
import { EnumError } from "./exceptions/EnumError";

import { IStatement } from "./abstract/IStatement";
import { IExpression } from "./abstract/IExpression";
import { IParam } from "./abstract/IParam";

import { Declaration } from "./statements/Declaration";
import { Assign } from "./statements/Assign";
import { If } from "./statements/If";
import { Elif } from "./statements/Elif";
import { Print } from "./statements/Print";
import { Println } from "./statements/Println";
import { While } from "./statements/While";
import { BreakLoop } from "./statements/BreakLoop";
import { ContinueLoop } from "./statements/ContinueLoop";
import { DoWhile } from "./statements/DoWhile";
import { DoUntil } from "./statements/DoUntil";
import { Return } from "./statements/Return";
import { FunctionDef } from "./statements/FunctionDef";
import { Method } from "./statements/Method";
import { For } from "./statements/For";
import { Case } from "./statements/Case";
import { Switch } from "./statements/Switch";

import fnParseDatatype from "./functions/fnParseDatatype";
import fnParseBoolean from "./functions/fnParseBoolean";

import { Terminals } from "./enums/EnumTerminals";
import { RelationalOp } from "./enums/EnumRelational";
import { ArithmeticOp } from "./enums/EnumArithmetic";
import { LogicalOp } from "./enums/EnumLogical";

import { Terminal } from "./expressions/Terminal";
import { Relational } from "./expressions/Relational";
import { Arithmetic } from "./expressions/Arithmetic";
import { Logical } from "./expressions/Logical";
import { Negative } from "./expressions/Negative";
import { Not } from "./expressions/Not";
import { Ternary } from "./expressions/Ternary";
import { Increment } from "./expressions/Increment";
import { Decrement } from "./expressions/Decrement";
import { Cast } from "./expressions/Cast";
import { Call } from "./expressions/Call";

let errors: IError[] = [];

const addError = (error: IError) => {
  if (error.type === EnumError.LEXICAL_ERROR) {
    error.message = `Caracter: " ${error.message} ", no reconocido como parte del lenguaje`;
  } else if (error.type === EnumError.SYNTAX_ERROR) {
    error.message = `No se esperaba: " ${error.message} ", como parte del lenguaje`;
  }
  console.error(error);
  errors.push(error);
};

import {
  JisonParser,
  JisonParserApi,
  StateType,
  SymbolsType,
  TerminalsType,
  ProductionsType,
  o,
} from "@ts-jison/parser";
const $V0 = [1, 17],
  $V1 = [1, 18],
  $V2 = [1, 19],
  $V3 = [1, 20],
  $V4 = [1, 21],
  $V5 = [1, 23],
  $V6 = [1, 24],
  $V7 = [1, 25],
  $V8 = [1, 26],
  $V9 = [1, 27],
  $Va = [1, 28],
  $Vb = [1, 29],
  $Vc = [5, 22, 23, 24, 56, 61, 67, 68, 69, 75, 76, 81, 84],
  $Vd = [5, 22, 23, 24, 56, 61, 67, 68, 69, 71, 75, 76, 81, 84, 86, 87],
  $Ve = [1, 49],
  $Vf = [1, 50],
  $Vg = [1, 52],
  $Vh = [1, 53],
  $Vi = [1, 54],
  $Vj = [1, 55],
  $Vk = [1, 56],
  $Vl = [1, 57],
  $Vm = [1, 51],
  $Vn = [65, 66],
  $Vo = [2, 60],
  $Vp = [1, 60],
  $Vq = [1, 62],
  $Vr = [1, 77],
  $Vs = [1, 78],
  $Vt = [1, 79],
  $Vu = [1, 80],
  $Vv = [1, 81],
  $Vw = [1, 82],
  $Vx = [1, 71],
  $Vy = [1, 72],
  $Vz = [1, 73],
  $VA = [1, 74],
  $VB = [1, 75],
  $VC = [1, 76],
  $VD = [1, 83],
  $VE = [1, 84],
  $VF = [1, 85],
  $VG = [
    12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 60, 65,
  ],
  $VH = [1, 90],
  $VI = [1, 91],
  $VJ = [12, 65, 66],
  $VK = [12, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 57, 58, 60, 65],
  $VL = [12, 48, 49, 57, 58, 60, 65],
  $VM = [22, 23, 24, 56, 61, 67, 68, 69, 71, 75, 76, 81, 84, 86, 87],
  $VN = [12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 60, 65],
  $VO = [12, 36, 37, 38, 39, 40, 41, 48, 49, 57, 58, 60, 65],
  $VP = [60, 65],
  $VQ = [71, 86, 87],
  $VR = [5, 22, 23, 24, 56, 61, 67, 68, 69, 71, 72, 74, 75, 76, 81, 84, 86, 87];

export class TsLanguageParser extends JisonParser implements JisonParserApi {
  $?: any;

  constructor(yy = {}, lexer = new TsLanguageLexer(yy)) {
    super(yy, lexer);
  }

  symbols_: SymbolsType = {
    error: 2,
    ini: 3,
    main_statements: 4,
    EOF: 5,
    main_statement: 6,
    standard_statement: 7,
    function: 8,
    method: 9,
    standard_statements: 10,
    declaration: 11,
    END_SENTENCE: 12,
    assign: 13,
    print_st: 14,
    println_st: 15,
    if: 16,
    while: 17,
    do_while: 18,
    do_until: 19,
    for: 20,
    switch: 21,
    BREAK: 22,
    CONTINUE: 23,
    RETURN: 24,
    expr: 25,
    arithmetic: 26,
    relational: 27,
    logical: 28,
    ternary: 29,
    group: 30,
    value: 31,
    cast: 32,
    increment: 33,
    decrement: 34,
    call: 35,
    LESS: 36,
    GREATER: 37,
    LESS_EQUAL: 38,
    GREATER_EQUAL: 39,
    EQUAL: 40,
    NOT_EQUAL: 41,
    ADD: 42,
    MINUS: 43,
    PRODUCT: 44,
    DIVISION: 45,
    MODULE: 46,
    POWER: 47,
    AND: 48,
    OR: 49,
    NOT: 50,
    DECIMAL: 51,
    INTEGER: 52,
    LOGICAL: 53,
    STRING: 54,
    CHAR: 55,
    IDENTIFIER: 56,
    TERNARY_IF: 57,
    TERNARY_ELSE: 58,
    OPEN_PARENTHESIS: 59,
    CLOSE_PARENTHESIS: 60,
    TYPE: 61,
    INCREMENT: 62,
    DECREMENT: 63,
    list_identifiers: 64,
    COMMA: 65,
    ASSIGNMENT: 66,
    PRINT: 67,
    PRINTLN: 68,
    IF: 69,
    OPEN_BRACE: 70,
    CLOSE_BRACE: 71,
    ELSE: 72,
    elifs: 73,
    ELIF: 74,
    WHILE: 75,
    DO: 76,
    UNTIL: 77,
    parameters: 78,
    VOID: 79,
    arguments: 80,
    FOR: 81,
    for_init: 82,
    for_update: 83,
    SWITCH: 84,
    cases: 85,
    DEFAULT: 86,
    CASE: 87,
    $accept: 0,
    $end: 1,
  };
  terminals_: TerminalsType = {
    2: "error",
    5: "EOF",
    12: "END_SENTENCE",
    22: "BREAK",
    23: "CONTINUE",
    24: "RETURN",
    36: "LESS",
    37: "GREATER",
    38: "LESS_EQUAL",
    39: "GREATER_EQUAL",
    40: "EQUAL",
    41: "NOT_EQUAL",
    42: "ADD",
    43: "MINUS",
    44: "PRODUCT",
    45: "DIVISION",
    46: "MODULE",
    47: "POWER",
    48: "AND",
    49: "OR",
    50: "NOT",
    51: "DECIMAL",
    52: "INTEGER",
    53: "LOGICAL",
    54: "STRING",
    55: "CHAR",
    56: "IDENTIFIER",
    57: "TERNARY_IF",
    58: "TERNARY_ELSE",
    59: "OPEN_PARENTHESIS",
    60: "CLOSE_PARENTHESIS",
    61: "TYPE",
    62: "INCREMENT",
    63: "DECREMENT",
    65: "COMMA",
    66: "ASSIGNMENT",
    67: "PRINT",
    68: "PRINTLN",
    69: "IF",
    70: "OPEN_BRACE",
    71: "CLOSE_BRACE",
    72: "ELSE",
    74: "ELIF",
    75: "WHILE",
    76: "DO",
    77: "UNTIL",
    79: "VOID",
    81: "FOR",
    84: "SWITCH",
    86: "DEFAULT",
    87: "CASE",
  };
  productions_: ProductionsType = [
    0,
    [3, 2],
    [4, 2],
    [4, 1],
    [6, 1],
    [6, 1],
    [6, 1],
    [10, 2],
    [10, 1],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 2],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 1],
    [7, 2],
    [7, 2],
    [7, 3],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [25, 1],
    [27, 3],
    [27, 3],
    [27, 3],
    [27, 3],
    [27, 3],
    [27, 3],
    [26, 3],
    [26, 3],
    [26, 3],
    [26, 3],
    [26, 3],
    [26, 3],
    [26, 2],
    [28, 3],
    [28, 3],
    [28, 2],
    [31, 1],
    [31, 1],
    [31, 1],
    [31, 1],
    [31, 1],
    [31, 1],
    [29, 5],
    [30, 3],
    [32, 4],
    [33, 2],
    [34, 2],
    [64, 3],
    [64, 1],
    [11, 2],
    [11, 4],
    [13, 3],
    [14, 4],
    [15, 4],
    [16, 7],
    [16, 11],
    [16, 8],
    [16, 12],
    [73, 8],
    [73, 7],
    [17, 7],
    [18, 9],
    [19, 9],
    [78, 4],
    [78, 2],
    [8, 9],
    [8, 8],
    [9, 9],
    [9, 7],
    [9, 8],
    [9, 6],
    [80, 3],
    [80, 1],
    [35, 4],
    [35, 3],
    [20, 11],
    [82, 1],
    [82, 1],
    [83, 1],
    [83, 1],
    [83, 1],
    [21, 7],
    [21, 10],
    [21, 9],
    [85, 5],
    [85, 4],
  ];
  table: Array<StateType> = [
    {
      3: 1,
      4: 2,
      6: 3,
      7: 4,
      8: 5,
      9: 6,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $V3,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    { 1: [3] },
    {
      5: [1, 30],
      6: 31,
      7: 4,
      8: 5,
      9: 6,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $V3,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vc, [2, 3]),
    o($Vc, [2, 4]),
    o($Vc, [2, 5]),
    o($Vc, [2, 6]),
    { 12: [1, 32] },
    { 12: [1, 33] },
    { 12: [1, 34] },
    { 12: [1, 35] },
    o($Vd, [2, 13]),
    o($Vd, [2, 14]),
    o($Vd, [2, 15]),
    o($Vd, [2, 16]),
    o($Vd, [2, 17]),
    o($Vd, [2, 18]),
    { 12: [1, 36] },
    { 12: [1, 37] },
    {
      25: 38,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    o($Vn, $Vo, { 59: [1, 58] }),
    { 56: $Vp, 64: 59 },
    { 65: $Vq, 66: [1, 61] },
    { 59: [1, 63] },
    { 59: [1, 64] },
    { 59: [1, 65] },
    { 59: [1, 66] },
    { 70: [1, 67] },
    { 59: [1, 68] },
    { 59: [1, 69] },
    { 1: [2, 1] },
    o($Vc, [2, 2]),
    o($Vd, [2, 9]),
    o($Vd, [2, 10]),
    o($Vd, [2, 11]),
    o($Vd, [2, 12]),
    o($Vd, [2, 19]),
    o($Vd, [2, 20]),
    {
      12: [1, 70],
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    },
    o($VG, [2, 22]),
    o($VG, [2, 23]),
    o($VG, [2, 24]),
    o($VG, [2, 25]),
    o($VG, [2, 26]),
    o($VG, [2, 27]),
    o($VG, [2, 28]),
    o($VG, [2, 29]),
    o($VG, [2, 30]),
    o($VG, [2, 31]),
    {
      25: 86,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 87,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 88,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
      61: [1, 89],
    },
    o($VG, [2, 48]),
    o($VG, [2, 49]),
    o($VG, [2, 50]),
    o($VG, [2, 51]),
    o($VG, [2, 52]),
    o($VG, [2, 53], { 59: [1, 92], 62: $VH, 63: $VI }),
    { 60: [1, 94], 61: [1, 95], 78: 93 },
    { 12: [2, 61], 65: $Vq, 66: [1, 96] },
    o($VJ, $Vo),
    {
      25: 97,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    { 56: [1, 98] },
    {
      25: 99,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 100,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 101,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 102,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      7: 104,
      10: 103,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    { 11: 107, 13: 106, 56: $Vp, 61: $V4, 64: 22, 82: 105 },
    {
      25: 108,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    o($Vd, [2, 21]),
    {
      25: 109,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 110,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 111,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 112,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 113,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 114,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 115,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 116,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 117,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 118,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 119,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 120,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 121,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 122,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 123,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    o($VK, [2, 44], { 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VL, [2, 47], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
    }),
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 124],
    },
    { 60: [1, 125] },
    o($VG, [2, 57]),
    o($VG, [2, 58]),
    {
      25: 128,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
      60: [1, 127],
      80: 126,
    },
    { 60: [1, 129], 65: [1, 130] },
    { 58: [1, 131], 70: [1, 132] },
    { 56: [1, 133] },
    {
      25: 134,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    o([12, 60], [2, 63], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    }),
    o($VJ, [2, 59]),
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 135],
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 136],
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 137],
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 138],
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 139],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($VM, [2, 8]),
    { 12: [1, 141] },
    { 12: [2, 88] },
    { 12: [2, 89] },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 142],
    },
    o($VK, [2, 38], { 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VK, [2, 39], { 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VN, [2, 40], { 46: $VB, 47: $VC }),
    o($VN, [2, 41], { 46: $VB, 47: $VC }),
    o($VG, [2, 42]),
    o($VG, [2, 43]),
    o($VO, [2, 32], { 42: $Vx, 43: $Vy, 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VO, [2, 33], { 42: $Vx, 43: $Vy, 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VO, [2, 34], { 42: $Vx, 43: $Vy, 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VO, [2, 35], { 42: $Vx, 43: $Vy, 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VO, [2, 36], { 42: $Vx, 43: $Vy, 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VO, [2, 37], { 42: $Vx, 43: $Vy, 44: $Vz, 45: $VA, 46: $VB, 47: $VC }),
    o($VL, [2, 45], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
    }),
    o([12, 49, 57, 58, 60, 65], [2, 46], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
    }),
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      58: [1, 143],
    },
    o($VG, [2, 55]),
    {
      25: 144,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    { 60: [1, 145], 65: [1, 146] },
    o($VG, [2, 86]),
    o($VP, [2, 84], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    }),
    { 58: [1, 147], 70: [1, 148] },
    { 61: [1, 149] },
    { 61: [1, 150], 79: [1, 151] },
    {
      7: 104,
      10: 152,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($VP, [2, 76]),
    {
      12: [2, 62],
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    },
    { 12: [2, 64] },
    { 12: [2, 65] },
    { 70: [1, 153] },
    { 70: [1, 154] },
    { 75: [1, 155], 77: [1, 156] },
    o($VM, [2, 7]),
    {
      25: 157,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    { 70: [1, 158] },
    {
      25: 159,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    o($VG, [2, 56]),
    o($VG, [2, 85]),
    {
      25: 160,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    { 61: [1, 161], 79: [1, 162] },
    {
      7: 104,
      10: 163,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    { 56: [1, 164] },
    { 70: [1, 165] },
    { 70: [1, 166] },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 167],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 168,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 169,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    { 59: [1, 170] },
    { 59: [1, 171] },
    {
      12: [1, 172],
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    },
    { 85: 173, 86: [1, 174], 87: [1, 175] },
    o([12, 58, 60, 65], [2, 54], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    }),
    o($VP, [2, 83], {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
    }),
    { 70: [1, 176] },
    { 70: [1, 177] },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 178],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($VP, [2, 75]),
    {
      7: 104,
      10: 179,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 180,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vc, [2, 82]),
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 181],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 182],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      25: 183,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      25: 184,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    { 13: 186, 33: 187, 34: 188, 56: [1, 189], 64: 22, 83: 185 },
    { 71: [1, 190], 86: [1, 191], 87: [1, 192] },
    { 58: [1, 193] },
    {
      25: 194,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      7: 104,
      10: 195,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 196,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vc, [2, 80]),
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 197],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 198],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vd, [2, 66], { 73: 200, 72: [1, 199], 74: [1, 201] }),
    o($Vd, [2, 72]),
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 202],
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 203],
    },
    { 60: [1, 204] },
    { 60: [2, 90] },
    { 60: [2, 91] },
    { 60: [2, 92] },
    o($Vn, $Vo, { 62: $VH, 63: $VI }),
    o($Vd, [2, 93]),
    { 58: [1, 205] },
    {
      25: 206,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      7: 104,
      10: 207,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      58: [1, 208],
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 209],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 210],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vc, [2, 78]),
    o($Vc, [2, 81]),
    { 70: [1, 211] },
    o($Vd, [2, 68], { 72: [1, 212], 74: [1, 213] }),
    { 59: [1, 214] },
    { 12: [1, 215] },
    { 12: [1, 216] },
    { 70: [1, 217] },
    {
      7: 104,
      10: 218,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      58: [1, 219],
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 220],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 221,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vc, [2, 77]),
    o($Vc, [2, 79]),
    {
      7: 104,
      10: 222,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    { 70: [1, 223] },
    { 59: [1, 224] },
    {
      25: 225,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    o($Vd, [2, 73]),
    o($Vd, [2, 74]),
    {
      7: 104,
      10: 226,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 227],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 228,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vd, [2, 95]),
    o($VQ, [2, 97], {
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      64: 22,
      7: 140,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    }),
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 229],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 230,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      25: 231,
      26: 39,
      27: 40,
      28: 41,
      29: 42,
      30: 43,
      31: 44,
      32: 45,
      33: 46,
      34: 47,
      35: 48,
      43: $Ve,
      50: $Vf,
      51: $Vg,
      52: $Vh,
      53: $Vi,
      54: $Vj,
      55: $Vk,
      56: $Vl,
      59: $Vm,
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 232],
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 233],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($Vd, [2, 94]),
    o($VQ, [2, 96], {
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      64: 22,
      7: 140,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    }),
    o($Vd, [2, 67]),
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 234],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      36: $Vr,
      37: $Vs,
      38: $Vt,
      39: $Vu,
      40: $Vv,
      41: $Vw,
      42: $Vx,
      43: $Vy,
      44: $Vz,
      45: $VA,
      46: $VB,
      47: $VC,
      48: $VD,
      49: $VE,
      57: $VF,
      60: [1, 235],
    },
    { 70: [1, 236] },
    o($Vd, [2, 87]),
    o($Vd, [2, 69]),
    { 70: [1, 237] },
    {
      7: 104,
      10: 238,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 104,
      10: 239,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 240],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    {
      7: 140,
      11: 7,
      13: 8,
      14: 9,
      15: 10,
      16: 11,
      17: 12,
      18: 13,
      19: 14,
      20: 15,
      21: 16,
      22: $V0,
      23: $V1,
      24: $V2,
      56: $Vp,
      61: $V4,
      64: 22,
      67: $V5,
      68: $V6,
      69: $V7,
      71: [1, 241],
      75: $V8,
      76: $V9,
      81: $Va,
      84: $Vb,
    },
    o($VR, [2, 71]),
    o($VR, [2, 70]),
  ];
  defaultActions: { [key: number]: any } = {
    30: [2, 1],
    106: [2, 88],
    107: [2, 89],
    135: [2, 64],
    136: [2, 65],
    186: [2, 90],
    187: [2, 91],
    188: [2, 92],
  };

  performAction(
    yytext: string,
    yyleng: number,
    yylineno: number,
    yy: any,
    yystate: number /* action[1] */,
    $$: any /* vstack */,
    _$: any /* lstack */
  ): any {
    /* this == yyval */
    var $0 = $$.length - 1;
    switch (yystate) {
      case 1:
        return $$[$0 - 1];
      case 2:
      case 7:
        $$[$0 - 1].push($$[$0]);
        this.$ = $$[$0 - 1];
        break;
      case 3:
      case 8:
        this.$ = new Array<IStatement>();
        this.$[0] = $$[$0];
        break;
      case 4:
      case 5:
      case 6:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
        this.$ = $$[$0];
        break;
      case 9:
      case 10:
      case 11:
      case 12:
      case 55:
        this.$ = $$[$0 - 1];
        break;
      case 19:
        this.$ = new BreakLoop();
        break;
      case 20:
        this.$ = new ContinueLoop();
        break;
      case 21:
        this.$ = new Return($$[$0 - 1]);
        break;
      case 32:
        this.$ = new Relational($$[$0 - 2], RelationalOp.LESS_THAN, $$[$0]);
        break;
      case 33:
        this.$ = new Relational($$[$0 - 2], RelationalOp.GREATER_THAN, $$[$0]);
        break;
      case 34:
        this.$ = new Relational(
          $$[$0 - 2],
          RelationalOp.LESS_THAN_EQUAL,
          $$[$0]
        );
        break;
      case 35:
        this.$ = new Relational(
          $$[$0 - 2],
          RelationalOp.GREATER_THAN_EQUAL,
          $$[$0]
        );
        break;
      case 36:
        this.$ = new Relational($$[$0 - 2], RelationalOp.EQUAL, $$[$0]);
        break;
      case 37:
        this.$ = new Relational($$[$0 - 2], RelationalOp.NOT_EQUAL, $$[$0]);
        break;
      case 38:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.ADD, $$[$0]);
        break;
      case 39:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.MINUS, $$[$0]);
        break;
      case 40:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.PRODUCT, $$[$0]);
        break;
      case 41:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.DIVISION, $$[$0]);
        break;
      case 42:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.MODULE, $$[$0]);
        break;
      case 43:
        this.$ = new Arithmetic($$[$0 - 2], ArithmeticOp.POWER, $$[$0]);
        break;
      case 44:
        this.$ = new Negative($$[$0]);
        break;
      case 45:
        this.$ = new Logical($$[$0 - 2], LogicalOp.AND, $$[$0]);
        break;
      case 46:
        this.$ = new Logical($$[$0 - 2], LogicalOp.OR, $$[$0]);
        break;
      case 47:
        this.$ = new Not($$[$0]);
        break;
      case 48:
        this.$ = new Terminal(Terminals.DECIMAL, Number($$[$0]));
        break;
      case 49:
        this.$ = new Terminal(Terminals.INTEGER, Number($$[$0]));
        break;
      case 50:
        this.$ = new Terminal(Terminals.LOGICAL, fnParseBoolean($$[$0]));
        break;
      case 51:
        this.$ = new Terminal(Terminals.STRING, $$[$0]);
        break;
      case 52:
        this.$ = new Terminal(Terminals.CHAR, $$[$0]);
        break;
      case 53:
        this.$ = new Terminal(Terminals.ID, $$[$0]);
        break;
      case 54:
        this.$ = new Ternary($$[$0 - 4], $$[$0 - 2], $$[$0]);
        break;
      case 56:
        this.$ = new Cast(fnParseDatatype($$[$0 - 2]), $$[$0]);
        break;
      case 57:
        this.$ = new Increment($$[$0 - 1]);
        break;
      case 58:
        this.$ = new Decrement($$[$0 - 1]);
        break;
      case 59:
      case 83:
        $$[$0 - 2].push($$[$0]);
        this.$ = $$[$0 - 2];
        break;
      case 60:
        this.$ = [$$[$0]];
        break;
      case 61:
        this.$ = new Declaration(fnParseDatatype($$[$0 - 1]), $$[$0]);
        break;
      case 62:
        this.$ = new Declaration(
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 2],
          $$[$0]
        );
        break;
      case 63:
        this.$ = new Assign($$[$0 - 2], $$[$0]);
        break;
      case 64:
        this.$ = new Print($$[$0 - 1]);
        break;
      case 65:
        this.$ = new Println($$[$0 - 1]);
        break;
      case 66:
        this.$ = new If($$[$0 - 4], $$[$0 - 1]);
        break;
      case 67:
        this.$ = new If($$[$0 - 8], $$[$0 - 5], undefined, $$[$0 - 1]);
        break;
      case 68:
        this.$ = new If($$[$0 - 5], $$[$0 - 2], $$[$0]);
        break;
      case 69:
        this.$ = new If($$[$0 - 9], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 70:
        $$[$0 - 7].push(new Elif($$[$0 - 4], $$[$0 - 1]));
        this.$ = $$[$0 - 7];
        break;
      case 71:
        this.$ = new Array<Elif>();
        this.$[0] = new Elif($$[$0 - 4], $$[$0 - 1]);
        break;
      case 72:
        this.$ = new While($$[$0 - 4], $$[$0 - 1]);
        break;
      case 73:
        this.$ = new DoWhile($$[$0 - 2], $$[$0 - 6]);
        break;
      case 74:
        this.$ = new DoUntil($$[$0 - 2], $$[$0 - 6]);
        break;
      case 75:
        $$[$0 - 3].push({ datatype: fnParseDatatype($$[$0 - 1]), id: $$[$0] });
        this.$ = $$[$0 - 3];
        break;
      case 76:
        this.$ = new Array<IParam>();
        this.$[0] = { datatype: fnParseDatatype($$[$0 - 1]), id: $$[$0] };
        break;
      case 77:
        this.$ = new FunctionDef(
          $$[$0 - 8],
          $$[$0 - 6],
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 1]
        );
        break;
      case 78:
        this.$ = new FunctionDef(
          $$[$0 - 7],
          undefined,
          fnParseDatatype($$[$0 - 3]),
          $$[$0 - 1]
        );
        break;
      case 79:
        this.$ = new Method($$[$0 - 8], $$[$0 - 6], $$[$0 - 1]);
        break;
      case 80:
        this.$ = new Method($$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 81:
        this.$ = new Method($$[$0 - 7], undefined, $$[$0 - 1]);
        break;
      case 82:
        this.$ = new Method($$[$0 - 5], undefined, $$[$0 - 1]);
        break;
      case 84:
        this.$ = new Array<IExpression>();
        this.$[0] = $$[$0];
        break;
      case 85:
        this.$ = new Call($$[$0 - 3], $$[$0 - 1]);
        break;
      case 86:
        this.$ = new Call($$[$0 - 2], undefined);
        break;
      case 87:
        this.$ = new For($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 93:
        this.$ = new Switch($$[$0 - 4], $$[$0 - 1], undefined);
        break;
      case 94:
        this.$ = new Switch($$[$0 - 7], $$[$0 - 4], $$[$0 - 1]);
        break;
      case 95:
        this.$ = new Switch($$[$0 - 6], undefined, $$[$0 - 2]);
        break;
      case 96:
        $$[$0 - 4].push(new Case($$[$0 - 2], $$[$0]));
        this.$ = $$[$0 - 4];
        break;
      case 97:
        this.$ = new Array<Case>();
        this.$[0] = new Case($$[$0 - 2], $$[$0]);
        break;
    }
  }
}

/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from "@ts-jison/lexer";
export class TsLanguageLexer extends JisonLexer implements JisonLexerApi {
  options: any = { "case-insensitive": true, moduleName: "TsLanguage" };
  constructor(yy = {}) {
    super(yy);
  }

  rules: RegExp[] = [
    /^(?:\s+)/i,
    /^(?:\/\/.*)/i,
    /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,
    /^(?:[0-9]+(\.[0-9]+)\b)/i,
    /^(?:[0-9]+\b)/i,
    /^(?:True|False\b)/i,
    /^(?:"((\\")|[\\n]|[\\\\]|[^\"])*")/i,
    /^(?:'((\\')|[\\n]|[\\\\]|[^\'])?')/i,
    /^(?:\+\+)/i,
    /^(?:--)/i,
    /^(?:\+)/i,
    /^(?:-)/i,
    /^(?:\*)/i,
    /^(?:\/)/i,
    /^(?:%)/i,
    /^(?:\^)/i,
    /^(?:==)/i,
    /^(?:!=)/i,
    /^(?:<=)/i,
    /^(?:>=)/i,
    /^(?:<)/i,
    /^(?:>)/i,
    /^(?:\?)/i,
    /^(?::)/i,
    /^(?:&&)/i,
    /^(?:\|\|)/i,
    /^(?:!)/i,
    /^(?:\()/i,
    /^(?:\))/i,
    /^(?:\{)/i,
    /^(?:\})/i,
    /^(?:\[)/i,
    /^(?:\])/i,
    /^(?:;)/i,
    /^(?:,)/i,
    /^(?:=)/i,
    /^(?:Int\b)/i,
    /^(?:Double\b)/i,
    /^(?:Boolean\b)/i,
    /^(?:Char\b)/i,
    /^(?:String\b)/i,
    /^(?:new\b)/i,
    /^(?:if\b)/i,
    /^(?:else\b)/i,
    /^(?:elif\b)/i,
    /^(?:switch\b)/i,
    /^(?:case\b)/i,
    /^(?:break\b)/i,
    /^(?:default\b)/i,
    /^(?:continue\b)/i,
    /^(?:while\b)/i,
    /^(?:for\b)/i,
    /^(?:do\b)/i,
    /^(?:until\b)/i,
    /^(?:return\b)/i,
    /^(?:void\b)/i,
    /^(?:print\b)/i,
    /^(?:println\b)/i,
    /^(?:[0-9a-zA-Z_]+)/i,
    /^(?:$)/i,
    /^(?:.)/i,
  ];
  conditions: any = {
    INITIAL: {
      rules: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
        56, 57, 58, 59, 60,
      ],
      inclusive: true,
    },
  };
  performAction(
    yy: any,
    yy_: any,
    $avoiding_name_collisions: any,
    YY_START: any
  ): any {
    var YYSTATE = YY_START;
    switch ($avoiding_name_collisions) {
      case 0: // ignore whitespaces
        break;
      case 1: // ignore comments
        break;
      case 2: // ignore comments
        break;
      case 3:
        return 51;
      case 4:
        return 52;
      case 5:
        return 53;
      case 6:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 54;
      case 7:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
        return 55;
      case 8:
        return 62;
      case 9:
        return 63;
      case 10:
        return 42;
      case 11:
        return 43;
      case 12:
        return 44;
      case 13:
        return 45;
      case 14:
        return 46;
      case 15:
        return 47;
      case 16:
        return 40;
      case 17:
        return 41;
      case 18:
        return 38;
      case 19:
        return 39;
      case 20:
        return 36;
      case 21:
        return 37;
      case 22:
        return 57;
      case 23:
        return 58;
      case 24:
        return 48;
      case 25:
        return 49;
      case 26:
        return 50;
      case 27:
        return 59;
      case 28:
        return 60;
      case 29:
        return 70;
      case 30:
        return 71;
      case 31:
        return "OPEN_BRACKET";
      case 32:
        return "CLOSE_BRACKET";
      case 33:
        return 12;
      case 34:
        return 65;
      case 35:
        return 66;
      case 36:
        return 61;
      case 37:
        return 61;
      case 38:
        return 61;
      case 39:
        return 61;
      case 40:
        return 61;
      case 41:
        return "NEW";
      case 42:
        return 69;
      case 43:
        return 72;
      case 44:
        return 74;
      case 45:
        return 84;
      case 46:
        return 87;
      case 47:
        return 22;
      case 48:
        return 86;
      case 49:
        return 23;
      case 50:
        return 75;
      case 51:
        return 81;
      case 52:
        return 76;
      case 53:
        return 77;
      case 54:
        return 24;
      case 55:
        return 79;
      case 56:
        return 67;
      case 57:
        return 68;
      case 58:
        return 56;
      case 59:
        return 5; // end of file
      case 60:
        addError({
          type: EnumError.LEXICAL_ERROR,
          message: yy_.yytext,
          line: yy_.yylloc.first_line,
          column: yy_.yylloc.first_column,
        });
        break;
    }
  }
}
